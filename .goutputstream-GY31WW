#include <stdio.h>
#include "entradas3D.h"

int main(void){
	apstack = 0;
	apheap = 105;
	A_void_main();
}

void A_void_main() {
	t1 = stack[(int) apstack];
	t1 = t1 + 104;
	t2 = apheap;
	heap[(int) t2] = t2;
	apheap = apheap + 104;
	// guardar temps en stack;
	t3 = apstack + 1;
	stack[(int) t3] = t1;
	t3 = apstack + 2;
	stack[(int) t3] = t2;
	// setear parametros por valor o referencia;
	// actualizar punteros en stack y heap;
	t3 = apstack + 3;
	stack[(int) t3] = t2;
	apstack = apstack + 3;
	// llamar al procedimiento;
	B_void_B();
	// restablecer valor de apstack;
	apstack = apstack - 3;
	// tomar valor retorno;
	// restablecer temporales;
	t3 = apstack + 2;
	t2 = stack[(int) t3];
	t3 = apstack + 1;
	t1 = stack[(int) t3];
	heap[(int) t1] = t2;
	t4 = stack[(int) apstack];
	t4 = t4 + 104;
	t4 = heap[(int) t4];
	// guardar temps en stack;
	t5 = apstack + 1;
	stack[(int) t5] = t4;
	// setear parametros por valor o referencia;
	t5 = apstack + 3;
	stack[(int) t5] = 2.2;
	t5 = apstack + 4;
	stack[(int) t5] = 3.3;
	// actualizar punteros en stack y heap;
	t5 = apstack + 2;
	stack[(int) t5] = t4;
	apstack = apstack + 2;
	// llamar al procedimiento;
	B_void_add_float_float();
	// restablecer valor de apstack;
	apstack = apstack - 2;
	// tomar valor retorno;
	// restablecer temporales;
	t5 = apstack + 1;
	t4 = stack[(int) t5];
	t6 = apheap;
	heap[(int) t6] = t6;
	apheap = apheap + 105;
	// guardar temps en stack;
	t7 = apstack + 2;
	stack[(int) t7] = t6;
	// setear parametros por valor o referencia;
	t7 = apstack + 4;
	stack[(int) t7] = 3;
	// actualizar punteros en stack y heap;
	t7 = apstack + 3;
	stack[(int) t7] = t6;
	apstack = apstack + 3;
	// llamar al procedimiento;
	A_void_A_int();
	// restablecer valor de apstack;
	apstack = apstack - 3;
	// tomar valor retorno;
	// restablecer temporales;
	t7 = apstack + 2;
	t6 = stack[(int) t7];
	t8 = apstack + 1;
	stack[(int) t8] = t6;
	t9 = apstack + 1;
	t9 = stack[(int) t9];
	t9 = t9 + 4;
	if (2 < 4) goto l2;
	exception();
l2:
	t10 = 2;
	if (3 < 5) goto l3;
	exception();
l3:
	t11 = t10 * 5;
	t10 = t11 + 3;
	if (2 < 5) goto l4;
	exception();
l4:
	t11 = t10 * 5;
	t10 = t11 + 2;
	t9 = t10 + t9;
	t9 = heap[(int) t9];
	printf("%d", (int)t9);
	printf("%c", (char)((int) 10));
	t12 = apstack + 2;
	stack[(int) t12] = 0;
l5:
	if (1 == 0) goto l6;
	t13 = apstack + 2;
	t13 = stack[(int) t13];
	printf("%d", (int)t13);
	printf("%c", (char)((int) 10));
	t14 = apstack + 2;
	t16 = stack[(int) t14];
	t15 = t16 + 8;
	stack[(int) t14] = t15;
	t17 = apstack + 2;
	t17 = stack[(int) t17];
	t18 = 1;
	if (t17 > 32) goto l7;
	t18 = 0;
l7:
	if (t18 == 0) goto l8;
	goto l6;
l8:
	goto l5;
l6:
	t19 = apheap;
	heap[(int) t19] = t19;
	apheap = apheap + 256;
	t20 = t19 + 1;
	heap[(int) t20] = 116;
	t20 = t19 + 2;
	heap[(int) t20] = 101;
	t20 = t19 + 3;
	heap[(int) t20] = 114;
	t20 = t19 + 4;
	heap[(int) t20] = 109;
	t20 = t19 + 5;
	heap[(int) t20] = 105;
	t20 = t19 + 6;
	heap[(int) t20] = 110;
	t20 = t19 + 7;
	heap[(int) t20] = 97;
	t20 = t19 + 8;
	heap[(int) t20] = 32;
	t20 = t19 + 9;
	heap[(int) t20] = 119;
	t20 = t19 + 10;
	heap[(int) t20] = 104;
	t20 = t19 + 11;
	heap[(int) t20] = 105;
	t20 = t19 + 12;
	heap[(int) t20] = 108;
	t20 = t19 + 13;
	heap[(int) t20] = 101;
	t20 = t19 + 14;
	heap[(int) t20] = 0;
	t21 = heap[(int) t19];
l9:
	t21 = t21 + 1;
	t19 = heap[(int) t21];
	if (t19 == 0) goto l10;
	printf("%c", (char)((int) t19));
	goto l9;
l10:
	printf("%c", (char)((int) 10));
	t22 = apstack + 2;
	stack[(int) t22] = 1;
	t23 = apstack + 3;
	stack[(int) t23] = 0;
l11:
	t24 = apstack + 3;
	t24 = stack[(int) t24];
	t25 = 1;
	if (t24 < 4) goto l12;
	t25 = 0;
l12:
	if (t25 == 0) goto l13;
	goto l14;
l15:
	t26 = apstack + 3;
	t27 = stack[(int) t26];
	t28 = t27 + 1;
	stack[(int) t26] = t28;
	goto l11;
l14:
	t29 = apstack + 2;
	stack[(int) t29] = 0;
l16:
	t30 = apstack + 2;
	t30 = stack[(int) t30];
	t31 = 1;
	if (t30 < 5) goto l17;
	t31 = 0;
l17:
	if (t31 == 0) goto l18;
	goto l19;
l20:
	t32 = apstack + 2;
	t33 = stack[(int) t32];
	t34 = t33 + 1;
	stack[(int) t32] = t34;
	goto l16;
l19:
	t35 = apstack + 2;
	t36 = apstack + 3;
	t35 = stack[(int) t35];
	t36 = stack[(int) t36];
	t35 = t35 + t36;
	goto l21;
l23:
	t37 = apheap;
	heap[(int) t37] = t37;
	apheap = apheap + 256;
	t38 = t37 + 1;
	heap[(int) t38] = 101;
	t38 = t37 + 2;
	heap[(int) t38] = 115;
	t38 = t37 + 3;
	heap[(int) t38] = 32;
	t38 = t37 + 4;
	heap[(int) t38] = 100;
	t38 = t37 + 5;
	heap[(int) t38] = 111;
	t38 = t37 + 6;
	heap[(int) t38] = 115;
	t38 = t37 + 7;
	heap[(int) t38] = 0;
	t39 = heap[(int) t37];
l24:
	t39 = t39 + 1;
	t37 = heap[(int) t39];
	if (t37 == 0) goto l25;
	printf("%c", (char)((int) t37));
	goto l24;
l25:
	printf("%c", (char)((int) 10));
	goto l22;
l26:
	t40 = apheap;
	heap[(int) t40] = t40;
	apheap = apheap + 256;
	t41 = t40 + 1;
	heap[(int) t41] = 101;
	t41 = t40 + 2;
	heap[(int) t41] = 115;
	t41 = t40 + 3;
	heap[(int) t41] = 32;
	t41 = t40 + 4;
	heap[(int) t41] = 99;
	t41 = t40 + 5;
	heap[(int) t41] = 105;
	t41 = t40 + 6;
	heap[(int) t41] = 110;
	t41 = t40 + 7;
	heap[(int) t41] = 99;
	t41 = t40 + 8;
	heap[(int) t41] = 111;
	t41 = t40 + 9;
	heap[(int) t41] = 0;
	t42 = heap[(int) t40];
l27:
	t42 = t42 + 1;
	t40 = heap[(int) t42];
	if (t40 == 0) goto l28;
	printf("%c", (char)((int) t40));
	goto l27;
l28:
	printf("%c", (char)((int) 10));
	goto l22;
l29:
	t43 = apheap;
	heap[(int) t43] = t43;
	apheap = apheap + 256;
	t44 = t43 + 1;
	heap[(int) t44] = 101;
	t44 = t43 + 2;
	heap[(int) t44] = 115;
	t44 = t43 + 3;
	heap[(int) t44] = 32;
	t44 = t43 + 4;
	heap[(int) t44] = 115;
	t44 = t43 + 5;
	heap[(int) t44] = 105;
	t44 = t43 + 6;
	heap[(int) t44] = 101;
	t44 = t43 + 7;
	heap[(int) t44] = 116;
	t44 = t43 + 8;
	heap[(int) t44] = 101;
	t44 = t43 + 9;
	heap[(int) t44] = 0;
	t45 = heap[(int) t43];
l30:
	t45 = t45 + 1;
	t43 = heap[(int) t45];
	if (t43 == 0) goto l31;
	printf("%c", (char)((int) t43));
	goto l30;
l31:
	printf("%c", (char)((int) 10));
	goto l22;
l32:
	t46 = apheap;
	heap[(int) t46] = t46;
	apheap = apheap + 256;
	t47 = t46 + 1;
	heap[(int) t47] = 101;
	t47 = t46 + 2;
	heap[(int) t47] = 115;
	t47 = t46 + 3;
	heap[(int) t47] = 32;
	t47 = t46 + 4;
	heap[(int) t47] = 111;
	t47 = t46 + 5;
	heap[(int) t47] = 116;
	t47 = t46 + 6;
	heap[(int) t47] = 114;
	t47 = t46 + 7;
	heap[(int) t47] = 111;
	t47 = t46 + 8;
	heap[(int) t47] = 32;
	t47 = t46 + 9;
	heap[(int) t47] = 118;
	t47 = t46 + 10;
	heap[(int) t47] = 97;
	t47 = t46 + 11;
	heap[(int) t47] = 108;
	t47 = t46 + 12;
	heap[(int) t47] = 111;
	t47 = t46 + 13;
	heap[(int) t47] = 114;
	t47 = t46 + 14;
	heap[(int) t47] = 0;
	t48 = heap[(int) t46];
l33:
	t48 = t48 + 1;
	t46 = heap[(int) t48];
	if (t46 == 0) goto l34;
	printf("%c", (char)((int) t46));
	goto l33;
l34:
	printf("%c", (char)((int) 10));
	goto l22;
l21:
	if(t35 == 2) goto l23;
	if(t35 == 5) goto l26;
	if(t35 == 2) goto l29;
	goto l32;
l22:
	goto l20;
l18:
	goto l15;
l13:
	t49 = apheap;
	heap[(int) t49] = t49;
	apheap = apheap + 256;
	t50 = t49 + 1;
	heap[(int) t50] = 116;
	t50 = t49 + 2;
	heap[(int) t50] = 101;
	t50 = t49 + 3;
	heap[(int) t50] = 114;
	t50 = t49 + 4;
	heap[(int) t50] = 109;
	t50 = t49 + 5;
	heap[(int) t50] = 105;
	t50 = t49 + 6;
	heap[(int) t50] = 110;
	t50 = t49 + 7;
	heap[(int) t50] = 97;
	t50 = t49 + 8;
	heap[(int) t50] = 32;
	t50 = t49 + 9;
	heap[(int) t50] = 102;
	t50 = t49 + 10;
	heap[(int) t50] = 111;
	t50 = t49 + 11;
	heap[(int) t50] = 114;
	t50 = t49 + 12;
	heap[(int) t50] = 0;
	t51 = heap[(int) t49];
l35:
	t51 = t51 + 1;
	t49 = heap[(int) t51];
	if (t49 == 0) goto l36;
	printf("%c", (char)((int) t49));
	goto l35;
l36:
	printf("%c", (char)((int) 10));
	printf("%c", (char)((int) 10));
	t52 = apstack + 2;
	stack[(int) t52] = 1;
l37:
	t53 = apstack + 2;
	t53 = stack[(int) t53];
	printf("%d", (int)t53);
	printf("%c", (char)((int) 10));
	t54 = apstack + 2;
	t55 = stack[(int) t54];
	t56 = t55 - 1;
	stack[(int) t54] = t56;
	t57 = 0 - 2;
	t58 = 1;
	if (t55 == t57) goto l39;
	t58 = 0;
l39:
	if (t58 == 0) goto l40;
	goto l38;
l40:
	if (1 == 1) goto l37;
l38:
	t59 = apheap;
	heap[(int) t59] = t59;
	apheap = apheap + 256;
	t60 = t59 + 1;
	heap[(int) t60] = 116;
	t60 = t59 + 2;
	heap[(int) t60] = 101;
	t60 = t59 + 3;
	heap[(int) t60] = 114;
	t60 = t59 + 4;
	heap[(int) t60] = 109;
	t60 = t59 + 5;
	heap[(int) t60] = 105;
	t60 = t59 + 6;
	heap[(int) t60] = 110;
	t60 = t59 + 7;
	heap[(int) t60] = 97;
	t60 = t59 + 8;
	heap[(int) t60] = 32;
	t60 = t59 + 9;
	heap[(int) t60] = 100;
	t60 = t59 + 10;
	heap[(int) t60] = 111;
	t60 = t59 + 11;
	heap[(int) t60] = 119;
	t60 = t59 + 12;
	heap[(int) t60] = 104;
	t60 = t59 + 13;
	heap[(int) t60] = 105;
	t60 = t59 + 14;
	heap[(int) t60] = 108;
	t60 = t59 + 15;
	heap[(int) t60] = 101;
	t60 = t59 + 16;
	heap[(int) t60] = 0;
	t61 = heap[(int) t59];
l41:
	t61 = t61 + 1;
	t59 = heap[(int) t61];
	if (t59 == 0) goto l42;
	printf("%c", (char)((int) t59));
	goto l41;
l42:
	printf("%c", (char)((int) 10));
	printf("%c", (char)((int) 10));
	t62 = apheap;
	heap[(int) t62] = t62;
	apheap = apheap + 105;
	// guardar temps en stack;
	t63 = apstack + 4;
	stack[(int) t63] = t62;
	// setear parametros por valor o referencia;
	t63 = apstack + 6;
	stack[(int) t63] = 3;
	// actualizar punteros en stack y heap;
	t63 = apstack + 5;
	stack[(int) t63] = t62;
	apstack = apstack + 5;
	// llamar al procedimiento;
	A_void_A_int();
	// restablecer valor de apstack;
	apstack = apstack - 5;
	// tomar valor retorno;
	// restablecer temporales;
	t63 = apstack + 4;
	t62 = stack[(int) t63];
	t64 = apstack + 3;
	stack[(int) t64] = t62;
	t65 = apheap;
	heap[(int) t65] = t65;
	apheap = apheap + 104;
	// guardar temps en stack;
	t66 = apstack + 4;
	stack[(int) t66] = t65;
	// setear parametros por valor o referencia;
	// actualizar punteros en stack y heap;
	t66 = apstack + 5;
	stack[(int) t66] = t65;
	apstack = apstack + 5;
	// llamar al procedimiento;
	B_void_B();
	// restablecer valor de apstack;
	apstack = apstack - 5;
	// tomar valor retorno;
	// restablecer temporales;
	t66 = apstack + 4;
	t65 = stack[(int) t66];
	t65 = heap[(int) t65];
	t65 = t65 + 4;
	if (2 < 4) goto l43;
	exception();
l43:
	t67 = 2;
	if (3 < 5) goto l44;
	exception();
l44:
	t68 = t67 * 5;
	t67 = t68 + 3;
	if (4 < 5) goto l45;
	exception();
l45:
	t68 = t67 * 5;
	t67 = t68 + 4;
	t65 = t67 + t65;
	t65 = heap[(int) t65];
	printf("%d", (int)t65);
	printf("%c", (char)((int) 10));
	t69 = apheap;
	heap[(int) t69] = t69;
	apheap = apheap + 256;
	t70 = t69 + 1;
	heap[(int) t70] = 101;
	t70 = t69 + 2;
	heap[(int) t70] = 115;
	t70 = t69 + 3;
	heap[(int) t70] = 111;
	t70 = t69 + 4;
	heap[(int) t70] = 32;
	t70 = t69 + 5;
	heap[(int) t70] = 101;
	t70 = t69 + 6;
	heap[(int) t70] = 114;
	t70 = t69 + 7;
	heap[(int) t70] = 97;
	t70 = t69 + 8;
	heap[(int) t70] = 32;
	t70 = t69 + 9;
	heap[(int) t70] = 117;
	t70 = t69 + 10;
	heap[(int) t70] = 110;
	t70 = t69 + 11;
	heap[(int) t70] = 97;
	t70 = t69 + 12;
	heap[(int) t70] = 32;
	t70 = t69 + 13;
	heap[(int) t70] = 109;
	t70 = t69 + 14;
	heap[(int) t70] = 97;
	t70 = t69 + 15;
	heap[(int) t70] = 116;
	t70 = t69 + 16;
	heap[(int) t70] = 114;
	t70 = t69 + 17;
	heap[(int) t70] = 105;
	t70 = t69 + 18;
	heap[(int) t70] = 122;
	t70 = t69 + 19;
	heap[(int) t70] = 0;
	t71 = heap[(int) t69];
l46:
	t71 = t71 + 1;
	t69 = heap[(int) t71];
	if (t69 == 0) goto l47;
	printf("%c", (char)((int) t69));
	goto l46;
l47:
	printf("%c", (char)((int) 10));
	printf("%c", (char)((int) 10));
	t72 = apheap;
	heap[(int) t72] = t72;
	apheap = apheap + 104;
	// guardar temps en stack;
	t73 = apstack + 4;
	stack[(int) t73] = t72;
	// setear parametros por valor o referencia;
	// actualizar punteros en stack y heap;
	t73 = apstack + 5;
	stack[(int) t73] = t72;
	apstack = apstack + 5;
	// llamar al procedimiento;
	B_void_B();
	// restablecer valor de apstack;
	apstack = apstack - 5;
	// tomar valor retorno;
	// restablecer temporales;
	t73 = apstack + 4;
	t72 = stack[(int) t73];
	t72 = heap[(int) t72];
	// guardar temps en stack;
	t74 = apstack + 4;
	stack[(int) t74] = t72;
	// setear parametros por valor o referencia;
	t74 = apstack + 6;
	stack[(int) t74] = 2.2;
	t74 = apstack + 7;
	stack[(int) t74] = 3.3;
	// actualizar punteros en stack y heap;
	t74 = apstack + 5;
	stack[(int) t74] = t72;
	apstack = apstack + 5;
	// llamar al procedimiento;
	B_void_add_float_float();
	// restablecer valor de apstack;
	apstack = apstack - 5;
	// tomar valor retorno;
	// restablecer temporales;
	t74 = apstack + 4;
	t72 = stack[(int) t74];
	t75 = apheap;
	heap[(int) t75] = t75;
	apheap = apheap + 256;
	t76 = t75 + 1;
	heap[(int) t76] = 97;
	t76 = t75 + 2;
	heap[(int) t76] = 108;
	t76 = t75 + 3;
	heap[(int) t76] = 97;
	t76 = t75 + 4;
	heap[(int) t76] = 109;
	t76 = t75 + 5;
	heap[(int) t76] = 97;
	t76 = t75 + 6;
	heap[(int) t76] = 100;
	t76 = t75 + 7;
	heap[(int) t76] = 114;
	t76 = t75 + 8;
	heap[(int) t76] = 101;
	t76 = t75 + 9;
	heap[(int) t76] = 0;
	t77 = heap[(int) t75];
l48:
	t77 = t77 + 1;
	t75 = heap[(int) t77];
	if (t75 == 0) goto l49;
	printf("%c", (char)((int) t75));
	goto l48;
l49:
	printf("%c", (char)((int) 10));
	t78 = stack[(int) apstack];
	t78 = t78 + 4;
	if (3 < 4) goto l50;
	exception();
l50:
	t79 = 3;
	if (4 < 5) goto l51;
	exception();
l51:
	t80 = t79 * 5;
	t79 = t80 + 4;
	if (4 < 5) goto l52;
	exception();
l52:
	t80 = t79 * 5;
	t79 = t80 + 4;
	t78 = t79 + t78;
	heap[(int) t78] = 3;
	t81 = stack[(int) apstack];
	t81 = t81 + 4;
	if (3 < 4) goto l53;
	exception();
l53:
	t82 = 3;
	if (4 < 5) goto l54;
	exception();
l54:
	t83 = t82 * 5;
	t82 = t83 + 4;
	if (4 < 5) goto l55;
	exception();
l55:
	t83 = t82 * 5;
	t82 = t83 + 4;
	t81 = t82 + t81;
	t81 = heap[(int) t81];
	printf("%d", (int)t81);
	printf("%c", (char)((int) 10));
	t84 = stack[(int) apstack];
	t84 = t84 + 4;
	if (4 < 4) goto l56;
	exception();
l56:
	t85 = 4;
	if (4 < 5) goto l57;
	exception();
l57:
	t86 = t85 * 5;
	t85 = t86 + 4;
	if (4 < 5) goto l58;
	exception();
l58:
	t86 = t85 * 5;
	t85 = t86 + 4;
	t84 = t85 + t84;
	heap[(int) t84] = 4;
l1:
	return;
}

void A_void_A_int() {
	t1 = stack[(int) apstack];
	t1 = t1 + 4;
	if (2 < 4) goto l60;
	exception();
l60:
	t2 = 2;
	if (3 < 5) goto l61;
	exception();
l61:
	t3 = t2 * 5;
	t2 = t3 + 3;
	if (2 < 5) goto l62;
	exception();
l62:
	t3 = t2 * 5;
	t2 = t3 + 2;
	t1 = t2 + t1;
	t4 = apstack + 1;
	t4 = stack[(int) t4];
	heap[(int) t1] = t4;
l59:
	return;
}

void A_void_exception() {
	t1 = apheap;
	heap[(int) t1] = t1;
	apheap = apheap + 256;
	t2 = t1 + 1;
	heap[(int) t2] = 161;
	t2 = t1 + 2;
	heap[(int) t2] = 69;
	t2 = t1 + 3;
	heap[(int) t2] = 114;
	t2 = t1 + 4;
	heap[(int) t2] = 114;
	t2 = t1 + 5;
	heap[(int) t2] = 111;
	t2 = t1 + 6;
	heap[(int) t2] = 114;
	t2 = t1 + 7;
	heap[(int) t2] = 32;
	t2 = t1 + 8;
	heap[(int) t2] = 101;
	t2 = t1 + 9;
	heap[(int) t2] = 110;
	t2 = t1 + 10;
	heap[(int) t2] = 32;
	t2 = t1 + 11;
	heap[(int) t2] = 116;
	t2 = t1 + 12;
	heap[(int) t2] = 105;
	t2 = t1 + 13;
	heap[(int) t2] = 101;
	t2 = t1 + 14;
	heap[(int) t2] = 109;
	t2 = t1 + 15;
	heap[(int) t2] = 112;
	t2 = t1 + 16;
	heap[(int) t2] = 111;
	t2 = t1 + 17;
	heap[(int) t2] = 32;
	t2 = t1 + 18;
	heap[(int) t2] = 100;
	t2 = t1 + 19;
	heap[(int) t2] = 101;
	t2 = t1 + 20;
	heap[(int) t2] = 32;
	t2 = t1 + 21;
	heap[(int) t2] = 101;
	t2 = t1 + 22;
	heap[(int) t2] = 106;
	t2 = t1 + 23;
	heap[(int) t2] = 101;
	t2 = t1 + 24;
	heap[(int) t2] = 99;
	t2 = t1 + 25;
	heap[(int) t2] = 117;
	t2 = t1 + 26;
	heap[(int) t2] = 99;
	t2 = t1 + 27;
	heap[(int) t2] = 105;
	t2 = t1 + 28;
	heap[(int) t2] = 243;
	t2 = t1 + 29;
	heap[(int) t2] = 110;
	t2 = t1 + 30;
	heap[(int) t2] = 33;
	t2 = t1 + 31;
	heap[(int) t2] = 32;
	t2 = t1 + 32;
	heap[(int) t2] = 68;
	t2 = t1 + 33;
	heap[(int) t2] = 105;
	t2 = t1 + 34;
	heap[(int) t2] = 109;
	t2 = t1 + 35;
	heap[(int) t2] = 101;
	t2 = t1 + 36;
	heap[(int) t2] = 110;
	t2 = t1 + 37;
	heap[(int) t2] = 115;
	t2 = t1 + 38;
	heap[(int) t2] = 105;
	t2 = t1 + 39;
	heap[(int) t2] = 111;
	t2 = t1 + 40;
	heap[(int) t2] = 110;
	t2 = t1 + 41;
	heap[(int) t2] = 101;
	t2 = t1 + 42;
	heap[(int) t2] = 115;
	t2 = t1 + 43;
	heap[(int) t2] = 32;
	t2 = t1 + 44;
	heap[(int) t2] = 102;
	t2 = t1 + 45;
	heap[(int) t2] = 117;
	t2 = t1 + 46;
	heap[(int) t2] = 101;
	t2 = t1 + 47;
	heap[(int) t2] = 114;
	t2 = t1 + 48;
	heap[(int) t2] = 97;
	t2 = t1 + 49;
	heap[(int) t2] = 32;
	t2 = t1 + 50;
	heap[(int) t2] = 100;
	t2 = t1 + 51;
	heap[(int) t2] = 101;
	t2 = t1 + 52;
	heap[(int) t2] = 32;
	t2 = t1 + 53;
	heap[(int) t2] = 114;
	t2 = t1 + 54;
	heap[(int) t2] = 97;
	t2 = t1 + 55;
	heap[(int) t2] = 110;
	t2 = t1 + 56;
	heap[(int) t2] = 103;
	t2 = t1 + 57;
	heap[(int) t2] = 111;
	t2 = t1 + 58;
	heap[(int) t2] = 46;
	t2 = t1 + 59;
	heap[(int) t2] = 0;
	t3 = heap[(int) t1];
l64:
	t3 = t3 + 1;
	t1 = heap[(int) t3];
	if (t1 == 0) goto l65;
	printf("%c", (char)((int) t1));
	goto l64;
l65:
	printf("%c", (char)((int) 10));
l63:
	return;
}

void B_void_B() {
	t1 = stack[(int) apstack];
	t1 = t1 + 2;
	heap[(int) t1] = 6;
	t2 = stack[(int) apstack];
	t2 = t2 + 4;
	if (2 < 4) goto l67;
	exception();
l67:
	t3 = 2;
	if (3 < 5) goto l68;
	exception();
l68:
	t4 = t3 * 5;
	t3 = t4 + 3;
	if (4 < 5) goto l69;
	exception();
l69:
	t4 = t3 * 5;
	t3 = t4 + 4;
	t2 = t3 + t2;
	heap[(int) t2] = 24;
l66:
	return;
}

void B_void_add_float_float() {
	t1 = stack[(int) apstack];
	t1 = t1 + 2;
	t1 = heap[(int) t1];
	printf("%d", (int)t1);
	printf("%c", (char)((int) 10));
l70:
	return;
}

void exception(){ 
	printf("%c", (char)((int) 69));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 116));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 109));
	printf("%c", (char)((int) 112));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 100));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 106));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 99));
	printf("%c", (char)((int) 117));
	printf("%c", (char)((int) 99));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 33));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 68));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 109));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 115));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 115));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 102));
	printf("%c", (char)((int) 117));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 97));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 100));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 97));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 103));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 46));
	printf("%c", (char)((int) 10));
}
#include <stdio.h>
#include "entradas3D.h"

int main(void){
	apstack = 0;
	apheap = 107;
	kenny_void_main();
}

void kenny_normal_main() {
	t1 = stack[(int) apstack];
	t1 = t1 + 2;
	heap[(int) t1] = 2;
	t2 = stack[(int) apstack];
	t2 = t2 + 3;
	t3 = apheap;
	heap[(int) t3] = t3;
	apheap = apheap + 256;
	t4 = t3 + 1;
	heap[(int) t4] = 111;
	t4 = t3 + 2;
	heap[(int) t4] = 108;
	t4 = t3 + 3;
	heap[(int) t4] = 97;
	t4 = t3 + 4;
	heap[(int) t4] = 0;
	heap[(int) t2] = t3;
	t5 = stack[(int) apstack];
	t5 = t5 + 4;
	heap[(int) t5] = 2.32;
	t6 = stack[(int) apstack];
	t6 = t6 + 5;
	heap[(int) t6] = 0;
	t7 = stack[(int) apstack];
	t7 = t7 + 6;
	heap[(int) t7] = 99;
	t8 = stack[(int) apstack];
	t8 = t8 + 7;
	t9 = 1;
	t10 = t9 * 5;
	t9 = t10 + 1;
	t10 = t9 * 5;
	t9 = t10 + 1;
	t8 = t9 + t8;
	t11 = 0 - 32;
	heap[(int) t8] = t11;
	t12 = stack[(int) apstack];
	t12 = t12 + 2;
	t13 = 0 - 2;
	t14 = 0 - 143;
	t15 = stack[(int) apstack];
	// guardar temps en stack;
	t16 = apstack + 13;
	stack[(int) t16] = t12;
	t16 = apstack + 14;
	stack[(int) t16] = t13;
	t16 = apstack + 15;
	stack[(int) t16] = t14;
	t16 = apstack + 16;
	stack[(int) t16] = t15;
	// setear parametros por valor o referencia;
	t16 = apstack + 19;
	stack[(int) t16] = t13;
	t16 = apstack + 20;
	stack[(int) t16] = t14;
	// actualizar punteros en stack y heap;
	t16 = apstack + 17;
	stack[(int) t16] = t15;
	apstack = apstack + 17;
	// llamar al procedimiento;
	kenny_int_suma_int_int();
	// restablecer valor de apstack;
	apstack = apstack - 17;
	// tomar valor retorno;
	t17 = apstack + 18;
	// restablecer temporales;
	t16 = apstack + 16;
	t15 = stack[(int) t16];
	t16 = apstack + 15;
	t14 = stack[(int) t16];
	t16 = apstack + 14;
	t13 = stack[(int) t16];
	t16 = apstack + 13;
	t12 = stack[(int) t16];
	t17 = stack[(int) t17];
	heap[(int) t12] = t17;
	t18 = apheap;
	heap[(int) t18] = t18;
	apheap = apheap + 256;
	t19 = t18 + 1;
	heap[(int) t19] = 108;
	t19 = t18 + 2;
	heap[(int) t19] = 97;
	t19 = t18 + 3;
	heap[(int) t19] = 32;
	t19 = t18 + 4;
	heap[(int) t19] = 114;
	t19 = t18 + 5;
	heap[(int) t19] = 101;
	t19 = t18 + 6;
	heap[(int) t19] = 115;
	t19 = t18 + 7;
	heap[(int) t19] = 112;
	t19 = t18 + 8;
	heap[(int) t19] = 117;
	t19 = t18 + 9;
	heap[(int) t19] = 101;
	t19 = t18 + 10;
	heap[(int) t19] = 115;
	t19 = t18 + 11;
	heap[(int) t19] = 116;
	t19 = t18 + 12;
	heap[(int) t19] = 97;
	t19 = t18 + 13;
	heap[(int) t19] = 32;
	t19 = t18 + 14;
	heap[(int) t19] = 101;
	t19 = t18 + 15;
	heap[(int) t19] = 115;
	t19 = t18 + 16;
	heap[(int) t19] = 0;
	t20 = heap[(int) t18];
l254:
	t20 = t20 + 1;
	t18 = heap[(int) t20];
	if (t18 == 0) goto l255;
	printf("%c", (char)((int) t18));
	goto l254;
l255:
	printf("%c", (char)((int) 10));
	t21 = stack[(int) apstack];
	t21 = t21 + 2;
	t21 = heap[(int) t21];
	printf("%d", (int)t21);
	printf("%c", (char)((int) 10));
	t22 = apstack + 13;
	stack[(int) t22] = 20;
	t23 = apstack + 14;
	stack[(int) t23] = 4;
	t24 = apstack + 14;
	t25 = apstack + 13;
	t24 = stack[(int) t24];
	t25 = stack[(int) t25];
	t26 = 1;
	if (t24 == t25) goto l256;
	t26 = 0;
l256:
	if (t26 == 0) goto l257;
	t27 = apheap;
	heap[(int) t27] = t27;
	apheap = apheap + 256;
	t28 = t27 + 1;
	heap[(int) t28] = 105;
	t28 = t27 + 2;
	heap[(int) t28] = 103;
	t28 = t27 + 3;
	heap[(int) t28] = 117;
	t28 = t27 + 4;
	heap[(int) t28] = 97;
	t28 = t27 + 5;
	heap[(int) t28] = 108;
	t28 = t27 + 6;
	heap[(int) t28] = 0;
	t29 = heap[(int) t27];
l258:
	t29 = t29 + 1;
	t27 = heap[(int) t29];
	if (t27 == 0) goto l259;
	printf("%c", (char)((int) t27));
	goto l258;
l259:
	printf("%c", (char)((int) 10));
	goto l260;
l257:
	t30 = apstack + 14;
	t31 = apstack + 13;
	t30 = stack[(int) t30];
	t31 = stack[(int) t31];
	t32 = 1;
	if (t30 < t31) goto l261;
	t32 = 0;
l261:
	if (t32 == 0) goto l262;
	t33 = apheap;
	heap[(int) t33] = t33;
	apheap = apheap + 256;
	t34 = t33 + 1;
	heap[(int) t34] = 109;
	t34 = t33 + 2;
	heap[(int) t34] = 101;
	t34 = t33 + 3;
	heap[(int) t34] = 110;
	t34 = t33 + 4;
	heap[(int) t34] = 111;
	t34 = t33 + 5;
	heap[(int) t34] = 114;
	t34 = t33 + 6;
	heap[(int) t34] = 0;
	t35 = heap[(int) t33];
l263:
	t35 = t35 + 1;
	t33 = heap[(int) t35];
	if (t33 == 0) goto l264;
	printf("%c", (char)((int) t33));
	goto l263;
l264:
	printf("%c", (char)((int) 10));
	goto l265;
l262:
	t36 = apheap;
	heap[(int) t36] = t36;
	apheap = apheap + 256;
	t37 = t36 + 1;
	heap[(int) t37] = 109;
	t37 = t36 + 2;
	heap[(int) t37] = 97;
	t37 = t36 + 3;
	heap[(int) t37] = 121;
	t37 = t36 + 4;
	heap[(int) t37] = 111;
	t37 = t36 + 5;
	heap[(int) t37] = 114;
	t37 = t36 + 6;
	heap[(int) t37] = 32;
	t37 = t36 + 7;
	heap[(int) t37] = 111;
	t37 = t36 + 8;
	heap[(int) t37] = 32;
	t37 = t36 + 9;
	heap[(int) t37] = 105;
	t37 = t36 + 10;
	heap[(int) t37] = 103;
	t37 = t36 + 11;
	heap[(int) t37] = 117;
	t37 = t36 + 12;
	heap[(int) t37] = 97;
	t37 = t36 + 13;
	heap[(int) t37] = 108;
	t37 = t36 + 14;
	heap[(int) t37] = 0;
	t38 = heap[(int) t36];
l266:
	t38 = t38 + 1;
	t36 = heap[(int) t38];
	if (t36 == 0) goto l267;
	printf("%c", (char)((int) t36));
	goto l266;
l267:
	printf("%c", (char)((int) 10));
l265:
l260:
l268:
	t39 = apstack + 13;
	t40 = apstack + 14;
	t39 = stack[(int) t39];
	t40 = stack[(int) t40];
	t41 = 1;
	if (t39 > t40) goto l269;
	t41 = 0;
l269:
	if (t41 == 0) goto l270;
	t42 = apstack + 13;
	t42 = stack[(int) t42];
	printf("%d", (int)t42);
	printf("%c", (char)((int) 10));
	t43 = apstack + 13;
	t43 = stack[(int) t43];
	t44 = 1;
	if (t43 == 18) goto l271;
	t44 = 0;
l271:
	if (t44 == 0) goto l272;
	goto l270;
l272:
	t45 = apstack + 13;
	t46 = stack[(int) t45];
	t47 = t46 - 1;
	stack[(int) t45] = t47;
	goto l268;
l270:
	t48 = stack[(int) apstack];
	// guardar temps en stack;
	t49 = apstack + 15;
	stack[(int) t49] = t48;
	// setear parametros por valor o referencia;
	t49 = apstack + 18;
	stack[(int) t49] = 3;
	t49 = apstack + 19;
	stack[(int) t49] = 2;
	// actualizar punteros en stack y heap;
	t49 = apstack + 16;
	stack[(int) t49] = t48;
	apstack = apstack + 16;
	// llamar al procedimiento;
	kenny_int_resta_int_int();
	// restablecer valor de apstack;
	apstack = apstack - 16;
	// tomar valor retorno;
	t50 = apstack + 17;
	// restablecer temporales;
	t49 = apstack + 15;
	t48 = stack[(int) t49];
	t50 = stack[(int) t50];
	printf("%d", (int)t50);
	printf("%c", (char)((int) 10));
	t51 = apstack + 15;
	stack[(int) t51] = 44;
	t52 = apstack + 16;
	stack[(int) t52] = 24;
	t53 = apstack + 15;
	t54 = apstack + 16;
	t55 = stack[(int) apstack];
	// guardar temps en stack;
	t56 = apstack + 17;
	stack[(int) t56] = t53;
	t56 = apstack + 18;
	stack[(int) t56] = t54;
	t56 = apstack + 19;
	stack[(int) t56] = t55;
	// setear parametros por valor o referencia;
	t56 = apstack + 22;
	stack[(int) t56] = t53;
	t56 = apstack + 23;
	stack[(int) t56] = t54;
	// actualizar punteros en stack y heap;
	t56 = apstack + 20;
	stack[(int) t56] = t55;
	apstack = apstack + 20;
	// llamar al procedimiento;
	kenny_boolean_mayor_int_int();
	// restablecer valor de apstack;
	apstack = apstack - 20;
	// tomar valor retorno;
	t57 = apstack + 21;
	// restablecer temporales;
	t56 = apstack + 19;
	t55 = stack[(int) t56];
	t56 = apstack + 18;
	t54 = stack[(int) t56];
	t56 = apstack + 17;
	t53 = stack[(int) t56];
	t57 = stack[(int) t57];
	if (t57 == 0) goto l273;
	t58 = apheap;
	heap[(int) t58] = t58;
	apheap = apheap + 256;
	t59 = t58 + 1;
	heap[(int) t59] = 101;
	t59 = t58 + 2;
	heap[(int) t59] = 115;
	t59 = t58 + 3;
	heap[(int) t59] = 32;
	t59 = t58 + 4;
	heap[(int) t59] = 109;
	t59 = t58 + 5;
	heap[(int) t59] = 97;
	t59 = t58 + 6;
	heap[(int) t59] = 121;
	t59 = t58 + 7;
	heap[(int) t59] = 111;
	t59 = t58 + 8;
	heap[(int) t59] = 114;
	t59 = t58 + 9;
	heap[(int) t59] = 33;
	t59 = t58 + 10;
	heap[(int) t59] = 0;
	t60 = heap[(int) t58];
l274:
	t60 = t60 + 1;
	t58 = heap[(int) t60];
	if (t58 == 0) goto l275;
	printf("%c", (char)((int) t58));
	goto l274;
l275:
	printf("%c", (char)((int) 10));
	goto l276;
l273:
	t61 = apheap;
	heap[(int) t61] = t61;
	apheap = apheap + 256;
	t62 = t61 + 1;
	heap[(int) t62] = 101;
	t62 = t61 + 2;
	heap[(int) t62] = 115;
	t62 = t61 + 3;
	heap[(int) t62] = 32;
	t62 = t61 + 4;
	heap[(int) t62] = 109;
	t62 = t61 + 5;
	heap[(int) t62] = 101;
	t62 = t61 + 6;
	heap[(int) t62] = 110;
	t62 = t61 + 7;
	heap[(int) t62] = 111;
	t62 = t61 + 8;
	heap[(int) t62] = 114;
	t62 = t61 + 9;
	heap[(int) t62] = 33;
	t62 = t61 + 10;
	heap[(int) t62] = 0;
	t63 = heap[(int) t61];
l277:
	t63 = t63 + 1;
	t61 = heap[(int) t63];
	if (t61 == 0) goto l278;
	printf("%c", (char)((int) t61));
	goto l277;
l278:
	printf("%c", (char)((int) 10));
l276:
	t64 = apstack + 15;
	t64 = stack[(int) t64];
	printf("%d", (int)t64);
	printf("%c", (char)((int) 10));
	t65 = apstack + 16;
	t65 = stack[(int) t65];
	printf("%d", (int)t65);
	printf("%c", (char)((int) 10));
l253:
	return;
}

void kenny_int_resta_int_int() {
	t1 = apstack + 2;
	t2 = apstack + 3;
	t1 = stack[(int) t1];
	t2 = stack[(int) t2];
	t1 = t1 + t2;
	t3 = apstack + 1;
	stack[(int) t3] = t1;
l279:
	return;
}

void kenny_int_suma_int_int() {
	t1 = apstack + 2;
	t2 = apstack + 3;
	t1 = stack[(int) t1];
	t2 = stack[(int) t2];
	t1 = t1 + t2;
	t3 = apstack + 4;
	stack[(int) t3] = t1;
	t4 = apstack + 4;
	t5 = apstack + 1;
	t4 = stack[(int) t4];
	stack[(int) t5] = t4;
l280:
	return;
}

void kenny_boolean_mayor_int_int() {
	t1 = apstack + 2;
	t2 = apstack + 2;
	t2 = stack[(int) t2];
	t2 = t2 + 3;
	stack[(int) t1] = t2;
	t3 = apstack + 3;
	t4 = apstack + 3;
	t4 = stack[(int) t4];
	t4 = t4 + 3;
	stack[(int) t3] = t4;
	t5 = apstack + 2;
	t6 = apstack + 3;
	t5 = stack[(int) t5];
	t6 = stack[(int) t6];
	t7 = 1;
	if (t5 > t6) goto l282;
	t7 = 0;
l282:
	t8 = apstack + 1;
	stack[(int) t8] = t7;
l281:
	return;
}

void miguel_int_resta_int_int() {
	t1 = apstack + 2;
	t2 = apstack + 3;
	t1 = stack[(int) t1];
	t2 = stack[(int) t2];
	t1 = t1 - t2;
	t3 = apstack + 1;
	stack[(int) t3] = t1;
l283:
	return;
}

void exception() { 
	printf("%c", (char)((int) 69));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 116));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 109));
	printf("%c", (char)((int) 112));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 100));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 106));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 99));
	printf("%c", (char)((int) 117));
	printf("%c", (char)((int) 99));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 33));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 68));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 109));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 115));
	printf("%c", (char)((int) 105));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 115));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 102));
	printf("%c", (char)((int) 117));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 97));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 100));
	printf("%c", (char)((int) 101));
	printf("%c", (char)((int) 32));
	printf("%c", (char)((int) 114));
	printf("%c", (char)((int) 97));
	printf("%c", (char)((int) 110));
	printf("%c", (char)((int) 103));
	printf("%c", (char)((int) 111));
	printf("%c", (char)((int) 46));
	printf("%c", (char)((int) 10));
}
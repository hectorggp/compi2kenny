
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 24 00:00:47 CST 2013
//----------------------------------------------------

package com.formato;

import java_cup.runtime.Symbol;
import java.io.File;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 24 00:00:47 CST 2013
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\365\000\002\002\004\000\002\064\002\000\002\002" +
    "\004\000\002\065\002\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\005\000\002\005\004\000\002\066\002\000\002" +
    "\067\002\000\002\070\002\000\002\006\014\000\002\057" +
    "\003\000\002\057\002\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\002\000\002\010\004\000" +
    "\002\010\002\000\002\071\002\000\002\011\005\000\002" +
    "\011\002\000\002\012\003\000\002\012\003\000\002\072" +
    "\002\000\002\013\010\000\002\073\002\000\002\013\011" +
    "\000\002\013\004\000\002\060\003\000\002\060\002\000" +
    "\002\074\002\000\002\031\006\000\002\075\002\000\002" +
    "\031\006\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\076\002\000\002" +
    "\015\005\000\002\015\002\000\002\077\002\000\002\100" +
    "\002\000\002\016\013\000\002\101\002\000\002\102\002" +
    "\000\002\016\013\000\002\103\002\000\002\104\002\000" +
    "\002\016\012\000\002\016\003\000\002\020\003\000\002" +
    "\020\002\000\002\105\002\000\002\017\006\000\002\017" +
    "\003\000\002\021\005\000\002\022\003\000\002\022\002" +
    "\000\002\106\002\000\002\023\006\000\002\107\002\000" +
    "\002\037\004\000\002\037\003\000\002\110\002\000\002" +
    "\025\005\000\002\025\002\000\002\111\002\000\002\026" +
    "\007\000\002\112\002\000\002\026\010\000\002\026\004" +
    "\000\002\026\006\000\002\026\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\004\000\002\113\002\000\002\026" +
    "\006\000\002\114\002\000\002\026\010\000\002\026\004" +
    "\000\002\115\002\000\002\055\006\000\002\116\002\000" +
    "\002\055\006\000\002\117\002\000\002\046\006\000\002" +
    "\120\002\000\002\046\006\000\002\054\003\000\002\054" +
    "\005\000\002\054\005\000\002\121\002\000\002\036\006" +
    "\000\002\122\002\000\002\036\006\000\002\123\002\000" +
    "\002\036\006\000\002\124\002\000\002\036\006\000\002" +
    "\125\002\000\002\036\006\000\002\036\004\000\002\036" +
    "\004\000\002\126\002\000\002\036\007\000\002\127\002" +
    "\000\002\036\007\000\002\130\002\000\002\036\007\000" +
    "\002\131\002\000\002\036\007\000\002\132\002\000\002" +
    "\036\007\000\002\036\005\000\002\036\005\000\002\133" +
    "\002\000\002\036\006\000\002\134\002\000\002\036\006" +
    "\000\002\061\004\000\002\061\002\000\002\135\002\000" +
    "\002\047\006\000\002\136\002\000\002\047\005\000\002" +
    "\024\003\000\002\137\002\000\002\024\006\000\002\024" +
    "\003\000\002\140\002\000\002\035\006\000\002\141\002" +
    "\000\002\035\006\000\002\142\002\000\002\035\006\000" +
    "\002\143\002\000\002\035\006\000\002\144\002\000\002" +
    "\035\006\000\002\145\002\000\002\035\005\000\002\146" +
    "\002\000\002\035\006\000\002\035\003\000\002\147\002" +
    "\000\002\035\006\000\002\150\002\000\002\035\006\000" +
    "\002\151\002\000\002\035\006\000\002\152\002\000\002" +
    "\035\006\000\002\153\002\000\002\033\006\000\002\033" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\004\000\002\154\002\000\002\155\002\000\002" +
    "\030\010\000\002\030\004\000\002\030\004\000\002\156" +
    "\002\000\002\030\010\000\002\030\005\000\002\030\007" +
    "\000\002\030\004\000\002\030\004\000\002\030\005\000" +
    "\002\030\005\000\002\157\002\000\002\030\006\000\002" +
    "\160\002\000\002\030\006\000\002\030\003\000\002\063" +
    "\004\000\002\063\002\000\002\161\002\000\002\032\006" +
    "\000\002\162\002\000\002\032\005\000\002\062\003\000" +
    "\002\062\002\000\002\163\002\000\002\027\006\000\002" +
    "\027\003\000\002\164\002\000\002\034\006\000\002\165" +
    "\002\000\002\034\006\000\002\166\002\000\002\034\010" +
    "\000\002\167\002\000\002\170\002\000\002\040\011\000" +
    "\002\171\002\000\002\041\006\000\002\041\003\000\002" +
    "\172\002\000\002\173\002\000\002\042\011\000\002\174" +
    "\002\000\002\175\002\000\002\176\002\000\002\043\013" +
    "\000\002\177\002\000\002\200\002\000\002\201\002\000" +
    "\002\202\002\000\002\044\017\000\002\045\003\000\002" +
    "\045\002\000\002\203\002\000\002\204\002\000\002\050" +
    "\014\000\002\051\004\000\002\051\003\000\002\205\002" +
    "\000\002\206\002\000\002\052\010\000\002\207\002\000" +
    "\002\053\006\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\016\003\000\051\000\053\000\054\000\055" +
    "\000\056\000\001\002\000\016\003\013\051\ufff6\053\012" +
    "\054\ufff6\055\ufff6\056\ufff6\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffff\001\002" +
    "\000\016\003\u018a\051\ufffe\053\012\054\ufffe\055\ufffe\056" +
    "\ufffe\001\002\000\012\051\uffed\054\023\055\021\056\024" +
    "\001\002\000\004\063\017\001\002\000\006\002\ufffb\010" +
    "\016\001\002\000\004\002\ufffc\001\002\000\016\003\ufff9" +
    "\051\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000" +
    "\016\003\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\001\002\000\004\010\020\001\002\000\016\003\ufff8\051" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\022" +
    "\037\uffee\040\uffee\051\uffee\063\uffee\065\uffee\067\uffee\070" +
    "\uffee\071\uffee\001\002\000\004\051\025\001\002\000\022" +
    "\037\ufff0\040\ufff0\051\ufff0\063\ufff0\065\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\001\002\000\022\037\uffef\040\uffef\051\uffef" +
    "\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef\001\002\000" +
    "\004\063\026\001\002\000\006\006\ufff5\064\ufff5\001\002" +
    "\000\006\006\uffeb\064\030\001\002\000\004\063\u0188\001" +
    "\002\000\004\006\032\001\002\000\034\002\ufff4\003\ufff4" +
    "\007\ufff4\037\ufff4\040\ufff4\054\ufff4\055\ufff4\056\ufff4\063" +
    "\ufff4\065\ufff4\067\ufff4\070\ufff4\071\ufff4\001\002\000\034" +
    "\002\uffe8\003\uffe8\007\uffe8\037\uffe8\040\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\063\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\001\002\000\034\002\ufff1\003\uffea\007\035\037\uffea\040" +
    "\uffea\054\uffea\055\uffea\056\uffea\063\uffea\065\uffea\067\uffea" +
    "\070\uffea\071\uffea\001\002\000\004\002\ufff2\001\002\000" +
    "\030\003\042\037\uffed\040\uffed\054\023\055\021\056\024" +
    "\063\uffed\065\uffed\067\uffed\070\uffed\071\uffed\001\002\000" +
    "\004\002\ufff3\001\002\000\034\002\uffe9\003\uffe9\007\uffe9" +
    "\037\uffe9\040\uffe9\054\uffe9\055\uffe9\056\uffe9\063\uffe9\065" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\001\002\000\034\002\uffe7" +
    "\003\uffe7\007\uffe7\037\uffe7\040\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\063\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\036\002\uffc3\003\uffc3\007\uffc3\010\u0187\037\uffc3\040" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\063\uffc3\065\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\001\002\000\020\037\054\040\046\063" +
    "\045\065\050\067\051\070\052\071\053\001\002\000\034" +
    "\002\uffe6\003\uffe6\007\uffe6\037\uffe6\040\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\063\uffe6\065\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\001\002\000\006\004\u0181\063\uffd5\001\002\000\006\063" +
    "\uffd9\066\uffd9\001\002\000\004\063\u016b\001\002\000\004" +
    "\063\055\001\002\000\006\063\uffd8\066\uffd8\001\002\000" +
    "\006\063\uffd7\066\uffd7\001\002\000\006\063\uffd6\066\uffd6" +
    "\001\002\000\006\063\uffda\066\uffda\001\002\000\004\004" +
    "\056\001\002\000\020\005\uffc9\037\uffc9\040\uffc9\063\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\001\002\000\020\005\uffc1\037" +
    "\054\040\046\063\063\067\051\070\052\071\053\001\002" +
    "\000\004\005\073\001\002\000\006\005\uffc2\023\070\001" +
    "\002\000\006\005\uffbe\023\uffbe\001\002\000\006\063\uffd5" +
    "\066\uffd5\001\002\000\006\063\uffbb\066\066\001\002\000" +
    "\004\063\067\001\002\000\004\063\uffbc\001\002\000\006" +
    "\005\uffbd\023\uffbd\001\002\000\016\037\uffc0\040\uffc0\063" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002\000\016\037\054" +
    "\040\046\063\063\067\051\070\052\071\053\001\002\000" +
    "\006\005\uffbf\023\uffbf\001\002\000\004\006\uffc8\001\002" +
    "\000\004\006\075\001\002\000\052\003\uffba\007\uffba\011" +
    "\uffba\037\uffba\040\uffba\041\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\050\uffba\057\uffba\060\uffba\063\uffba\067\uffba\070" +
    "\uffba\071\uffba\074\uffba\075\uffba\100\uffba\001\002\000\034" +
    "\002\uffc7\003\uffc7\007\uffc7\037\uffc7\040\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\063\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\001\002\000\052\003\uffb3\007\uffb3\011\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3" +
    "\057\uffb3\060\uffb3\063\uffb3\067\uffb3\070\uffb3\071\uffb3\074" +
    "\uffb3\075\uffb3\100\uffb3\001\002\000\052\003\uffb5\007\102" +
    "\011\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\057\uffb5\060\uffb5\063\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\074\uffb5\075\uffb5\100\uffb5\001\002\000" +
    "\050\003\126\011\105\037\054\040\046\041\113\043\104" +
    "\044\117\045\131\046\112\050\123\057\107\060\125\063" +
    "\114\067\051\070\052\071\053\074\124\075\111\100\115" +
    "\001\002\000\072\002\uffb9\003\uffb9\007\uffb9\011\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\063\uffb9\065\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\100\uffb9\001\002\000\004\063" +
    "\u0159\001\002\000\004\004\u0153\001\002\000\042\003\uff75" +
    "\004\uff75\006\uff75\011\uff75\014\uff75\016\uff75\034\uff75\052" +
    "\uff75\061\uff75\062\uff75\063\uff75\072\uff75\074\uff75\075\uff75" +
    "\077\uff75\100\uff75\001\002\000\006\005\u014d\023\u014c\001" +
    "\002\000\042\003\uffa5\004\uffa5\006\uffa5\011\uffa5\014\uffa5" +
    "\016\uffa5\034\uffa5\052\uffa5\061\uffa5\062\uffa5\063\uffa5\072" +
    "\uffa5\074\uffa5\075\uffa5\077\uffa5\100\uffa5\001\002\000\004" +
    "\010\u0148\001\002\000\006\063\uff7b\100\uff7b\001\002\000" +
    "\004\004\u0130\001\002\000\004\004\u0126\001\002\000\026" +
    "\004\uff98\013\342\022\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\063\uffd5\074\uff98\075\uff98\001\002\000\004\013\u0124" +
    "\001\002\000\006\012\u0112\023\u0100\001\002\000\052\003" +
    "\uff22\006\uff22\011\uff22\037\uff22\040\uff22\041\uff22\043\uff22" +
    "\044\uff22\045\uff22\046\uff22\050\uff22\057\uff22\060\uff22\063" +
    "\uff22\067\uff22\070\uff22\071\uff22\074\uff22\075\uff22\100\uff22" +
    "\001\002\000\060\003\uffab\007\uffab\011\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\057\uffab\060\uffab\063\uffab\067\uffab\070" +
    "\uffab\071\uffab\074\uffab\075\uffab\076\uffab\100\uffab\001\002" +
    "\000\060\003\uffaa\007\uffaa\011\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\057\uffaa\060\uffaa\063\uffaa\067\uffaa\070\uffaa\071" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\100\uffaa\001\002\000\022" +
    "\004\u0105\022\351\025\344\026\352\027\347\030\345\074" +
    "\350\075\346\001\002\000\004\010\u0104\001\002\000\006" +
    "\063\uff7d\100\uff7d\001\002\000\004\004\367\001\002\000" +
    "\004\010\366\001\002\000\060\003\uffa8\007\uffa8\011\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\057\uffa8\060\uffa8\063\uffa8" +
    "\067\uffa8\070\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\100" +
    "\uffa8\001\002\000\004\010\365\001\002\000\004\004\134" +
    "\001\002\000\060\003\uffa7\007\uffa7\011\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\057\uffa7\060\uffa7\063\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\074\uffa7\075\uffa7\076\uffa7\100\uffa7\001\002" +
    "\000\056\003\uffb4\007\uffb4\011\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\057\uffb4\060\uffb4\063\uffb4\067\uffb4\070\uffb4\071\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\100\uffb4\001\002\000\016\010\uff1e" +
    "\011\uff1e\063\uff1e\074\uff1e\075\uff1e\100\uff1e\001\002\000" +
    "\016\010\uff18\011\105\063\140\074\124\075\111\100\115" +
    "\001\002\000\020\022\351\025\344\026\352\027\347\030" +
    "\345\074\350\075\346\001\002\000\006\005\uff19\010\uff19" +
    "\001\002\000\112\002\uff98\003\uff98\005\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\342\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\037\uff98" +
    "\040\uff98\054\uff98\055\uff98\056\uff98\063\uff98\065\uff98\067" +
    "\uff98\070\uff98\071\uff98\073\uff98\074\uff98\075\uff98\001\002" +
    "\000\004\010\142\001\002\000\042\003\uff1d\004\uff1d\006" +
    "\uff1d\011\uff1d\014\uff1d\016\uff1d\034\uff1d\052\uff1d\061\uff1d" +
    "\062\uff1d\063\uff1d\072\uff1d\074\uff1d\075\uff1d\077\uff1d\100" +
    "\uff1d\001\002\000\042\003\162\004\146\006\155\011\145" +
    "\014\153\016\144\034\157\052\163\061\167\062\166\063" +
    "\152\072\154\074\161\075\147\077\165\100\115\001\002" +
    "\000\036\004\uff65\011\uff65\014\uff65\016\uff65\034\uff65\052" +
    "\uff65\061\uff65\062\uff65\063\uff65\072\uff65\074\uff65\075\uff65" +
    "\077\uff65\100\uff65\001\002\000\042\003\uff38\004\uff38\006" +
    "\uff38\011\uff38\014\uff38\016\uff38\034\uff38\052\uff38\061\uff38" +
    "\062\uff38\063\uff38\072\uff38\074\uff38\075\uff38\077\uff38\100" +
    "\uff38\001\002\000\050\004\uff63\011\uff63\014\uff63\016\uff63" +
    "\034\uff63\037\uff4e\040\uff4e\052\uff63\061\uff63\062\uff63\063" +
    "\uff63\067\uff4e\070\uff4e\071\uff4e\072\uff63\074\uff63\075\uff63" +
    "\077\uff63\100\uff63\001\002\000\006\063\uff3f\100\uff3f\001" +
    "\002\000\070\002\uff61\003\uff61\005\uff61\007\uff61\010\uff61" +
    "\012\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61\023" +
    "\uff61\024\uff61\031\uff61\032\uff61\033\uff61\037\uff61\040\uff61" +
    "\054\uff61\055\uff61\056\uff61\063\uff61\065\uff61\067\uff61\070" +
    "\uff61\071\uff61\073\uff61\001\002\000\004\010\305\001\002" +
    "\000\100\002\uff98\003\uff98\004\274\005\uff98\007\uff98\010" +
    "\uff98\012\uff98\013\273\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\023\uff98\024\uff98\031\uff98\032\uff98\033\uff98\037" +
    "\uff98\040\uff98\054\uff98\055\uff98\056\uff98\063\uff98\065\uff98" +
    "\067\uff98\070\uff98\071\uff98\073\uff98\074\uff98\075\uff98\001" +
    "\002\000\006\014\271\036\270\001\002\000\070\002\uff52" +
    "\003\uff52\005\uff52\007\uff52\010\uff52\012\uff52\015\uff52\016" +
    "\uff52\017\uff52\020\uff52\021\uff52\023\uff52\024\uff52\031\uff52" +
    "\032\uff52\033\uff52\037\uff52\040\uff52\054\uff52\055\uff52\056" +
    "\uff52\063\uff52\065\uff52\067\uff52\070\uff52\071\uff52\073\uff52" +
    "\001\002\000\042\003\uff72\004\uff72\006\uff72\011\uff72\014" +
    "\uff72\016\uff72\034\uff72\052\uff72\061\uff72\062\uff72\063\uff72" +
    "\072\uff72\074\uff72\075\uff72\077\uff72\100\uff72\001\002\000" +
    "\074\002\uff55\003\uff55\005\uff55\007\uff55\010\uff55\012\uff55" +
    "\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\023\uff55\024" +
    "\uff55\031\uff55\032\uff55\033\uff55\037\uff55\040\uff55\054\uff55" +
    "\055\uff55\056\uff55\063\uff55\065\uff55\067\uff55\070\uff55\071" +
    "\uff55\073\uff55\074\260\075\257\001\002\000\004\035\255" +
    "\001\002\000\006\012\252\023\246\001\002\000\006\063" +
    "\uff41\100\uff41\001\002\000\070\002\uff70\003\uff70\005\uff70" +
    "\007\uff70\010\uff70\012\uff70\015\uff70\016\uff70\017\uff70\020" +
    "\uff70\021\uff70\023\uff70\024\uff70\031\uff70\032\uff70\033\uff70" +
    "\037\uff70\040\uff70\054\uff70\055\uff70\056\uff70\063\uff70\065" +
    "\uff70\067\uff70\070\uff70\071\uff70\073\uff70\001\002\000\004" +
    "\063\230\001\002\000\006\005\225\023\224\001\002\000" +
    "\070\002\uff3d\003\uff3d\005\uff3d\007\uff3d\010\uff3d\012\uff3d" +
    "\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\023\uff3d\024" +
    "\uff3d\031\uff3d\032\uff3d\033\uff3d\037\uff3d\040\uff3d\054\uff3d" +
    "\055\uff3d\056\uff3d\063\uff3d\065\uff3d\067\uff3d\070\uff3d\071" +
    "\uff3d\073\uff3d\001\002\000\070\002\uff54\003\uff54\005\uff54" +
    "\007\uff54\010\uff54\012\uff54\015\uff54\016\uff54\017\uff54\020" +
    "\uff54\021\uff54\023\uff54\024\uff54\031\uff54\032\uff54\033\uff54" +
    "\037\uff54\040\uff54\054\uff54\055\uff54\056\uff54\063\uff54\065" +
    "\uff54\067\uff54\070\uff54\071\uff54\073\uff54\001\002\000\070" +
    "\002\uff53\003\uff53\005\uff53\007\uff53\010\uff53\012\uff53\015" +
    "\uff53\016\uff53\017\uff53\020\uff53\021\uff53\023\uff53\024\uff53" +
    "\031\uff53\032\uff53\033\uff53\037\uff53\040\uff53\054\uff53\055" +
    "\uff53\056\uff53\063\uff53\065\uff53\067\uff53\070\uff53\071\uff53" +
    "\073\uff53\001\002\000\070\002\uff73\003\uff73\005\uff73\007" +
    "\uff73\010\uff73\012\uff73\015\175\016\173\017\200\020\176" +
    "\021\174\023\uff73\024\uff73\031\171\032\172\033\201\037" +
    "\uff73\040\uff73\054\uff73\055\uff73\056\uff73\063\uff73\065\uff73" +
    "\067\uff73\070\uff73\071\uff73\073\177\001\002\000\036\004" +
    "\uff5c\011\uff5c\014\uff5c\016\uff5c\034\uff5c\052\uff5c\061\uff5c" +
    "\062\uff5c\063\uff5c\072\uff5c\074\uff5c\075\uff5c\077\uff5c\100" +
    "\uff5c\001\002\000\036\004\uff5a\011\uff5a\014\uff5a\016\uff5a" +
    "\034\uff5a\052\uff5a\061\uff5a\062\uff5a\063\uff5a\072\uff5a\074" +
    "\uff5a\075\uff5a\077\uff5a\100\uff5a\001\002\000\036\004\uff6d" +
    "\011\uff6d\014\uff6d\016\uff6d\034\uff6d\052\uff6d\061\uff6d\062" +
    "\uff6d\063\uff6d\072\uff6d\074\uff6d\075\uff6d\077\uff6d\100\uff6d" +
    "\001\002\000\036\004\uff67\011\uff67\014\uff67\016\uff67\034" +
    "\uff67\052\uff67\061\uff67\062\uff67\063\uff67\072\uff67\074\uff67" +
    "\075\uff67\077\uff67\100\uff67\001\002\000\036\004\uff6f\011" +
    "\uff6f\014\uff6f\016\uff6f\034\uff6f\052\uff6f\061\uff6f\062\uff6f" +
    "\063\uff6f\072\uff6f\074\uff6f\075\uff6f\077\uff6f\100\uff6f\001" +
    "\002\000\036\004\uff69\011\uff69\014\uff69\016\uff69\034\uff69" +
    "\052\uff69\061\uff69\062\uff69\063\uff69\072\uff69\074\uff69\075" +
    "\uff69\077\uff69\100\uff69\001\002\000\036\004\uff60\011\uff60" +
    "\014\uff60\016\uff60\034\uff60\052\uff60\061\uff60\062\uff60\063" +
    "\uff60\072\uff60\074\uff60\075\uff60\077\uff60\100\uff60\001\002" +
    "\000\036\004\uff6b\011\uff6b\014\uff6b\016\uff6b\034\uff6b\052" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\072\uff6b\074\uff6b\075\uff6b" +
    "\077\uff6b\100\uff6b\001\002\000\036\004\uff5e\011\uff5e\014" +
    "\uff5e\016\uff5e\034\uff5e\052\uff5e\061\uff5e\062\uff5e\063\uff5e" +
    "\072\uff5e\074\uff5e\075\uff5e\077\uff5e\100\uff5e\001\002\000" +
    "\036\004\146\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\070\002\uff5d\003\uff5d\005\uff5d" +
    "\007\uff5d\010\uff5d\012\uff5d\015\uff5d\016\uff5d\017\uff5d\020" +
    "\uff5d\021\uff5d\023\uff5d\024\uff5d\031\uff5d\032\uff5d\033\uff5d" +
    "\037\uff5d\040\uff5d\054\uff5d\055\uff5d\056\uff5d\063\uff5d\065" +
    "\uff5d\067\uff5d\070\uff5d\071\uff5d\073\uff5d\001\002\000\036" +
    "\004\146\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\070\002\uff6a\003\uff6a\005\uff6a\007" +
    "\uff6a\010\uff6a\012\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a" +
    "\021\uff6a\023\uff6a\024\uff6a\031\uff6a\032\uff6a\033\uff6a\037" +
    "\uff6a\040\uff6a\054\uff6a\055\uff6a\056\uff6a\063\uff6a\065\uff6a" +
    "\067\uff6a\070\uff6a\071\uff6a\073\uff6a\001\002\000\036\004" +
    "\146\011\145\014\153\016\144\034\157\052\163\061\167" +
    "\062\166\063\152\072\154\074\161\075\147\077\165\100" +
    "\115\001\002\000\070\002\uff5f\003\uff5f\005\uff5f\007\uff5f" +
    "\010\uff5f\012\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021" +
    "\uff5f\023\uff5f\024\uff5f\031\uff5f\032\uff5f\033\uff5f\037\uff5f" +
    "\040\uff5f\054\uff5f\055\uff5f\056\uff5f\063\uff5f\065\uff5f\067" +
    "\uff5f\070\uff5f\071\uff5f\073\uff5f\001\002\000\036\004\146" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\070\002\uff68\003\uff68\005\uff68\007\uff68\010" +
    "\uff68\012\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68" +
    "\023\uff68\024\uff68\031\uff68\032\uff68\033\uff68\037\uff68\040" +
    "\uff68\054\uff68\055\uff68\056\uff68\063\uff68\065\uff68\067\uff68" +
    "\070\uff68\071\uff68\073\uff68\001\002\000\036\004\146\011" +
    "\145\014\153\016\144\034\157\052\163\061\167\062\166" +
    "\063\152\072\154\074\161\075\147\077\165\100\115\001" +
    "\002\000\070\002\uff6e\003\uff6e\005\uff6e\007\uff6e\010\uff6e" +
    "\012\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\023" +
    "\uff6e\024\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e\040\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\063\uff6e\065\uff6e\067\uff6e\070" +
    "\uff6e\071\uff6e\073\uff6e\001\002\000\036\004\146\011\145" +
    "\014\153\016\144\034\157\052\163\061\167\062\166\063" +
    "\152\072\154\074\161\075\147\077\165\100\115\001\002" +
    "\000\070\002\uff66\003\uff66\005\uff66\007\uff66\010\uff66\012" +
    "\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66\023\uff66" +
    "\024\uff66\031\uff66\032\uff66\033\uff66\037\uff66\040\uff66\054" +
    "\uff66\055\uff66\056\uff66\063\uff66\065\uff66\067\uff66\070\uff66" +
    "\071\uff66\073\uff66\001\002\000\036\004\146\011\145\014" +
    "\153\016\144\034\157\052\163\061\167\062\166\063\152" +
    "\072\154\074\161\075\147\077\165\100\115\001\002\000" +
    "\070\002\uff6c\003\uff6c\005\uff6c\007\uff6c\010\uff6c\012\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\023\uff6c\024" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\037\uff6c\040\uff6c\054\uff6c" +
    "\055\uff6c\056\uff6c\063\uff6c\065\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\073\uff6c\001\002\000\036\004\146\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\070" +
    "\002\uff59\003\uff59\005\uff59\007\uff59\010\uff59\012\uff59\015" +
    "\uff59\016\uff59\017\uff59\020\uff59\021\uff59\023\uff59\024\uff59" +
    "\031\uff59\032\uff59\033\uff59\037\uff59\040\uff59\054\uff59\055" +
    "\uff59\056\uff59\063\uff59\065\uff59\067\uff59\070\uff59\071\uff59" +
    "\073\uff59\001\002\000\036\004\146\011\145\014\153\016" +
    "\144\034\157\052\163\061\167\062\166\063\152\072\154" +
    "\074\161\075\147\077\165\100\115\001\002\000\070\002" +
    "\uff5b\003\uff5b\005\uff5b\007\uff5b\010\uff5b\012\uff5b\015\uff5b" +
    "\016\uff5b\017\uff5b\020\uff5b\021\uff5b\023\uff5b\024\uff5b\031" +
    "\uff5b\032\uff5b\033\uff5b\037\uff5b\040\uff5b\054\uff5b\055\uff5b" +
    "\056\uff5b\063\uff5b\065\uff5b\067\uff5b\070\uff5b\071\uff5b\073" +
    "\uff5b\001\002\000\042\003\uff31\004\uff31\006\uff31\011\uff31" +
    "\014\uff31\016\uff31\034\uff31\052\uff31\061\uff31\062\uff31\063" +
    "\uff31\072\uff31\074\uff31\075\uff31\077\uff31\100\uff31\001\002" +
    "\000\070\002\uff45\003\uff45\005\uff45\007\uff45\010\uff45\012" +
    "\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\023\uff45" +
    "\024\uff45\031\uff45\032\uff45\033\uff45\037\uff45\040\uff45\054" +
    "\uff45\055\uff45\056\uff45\063\uff45\065\uff45\067\uff45\070\uff45" +
    "\071\uff45\073\uff45\001\002\000\042\003\162\004\146\006" +
    "\155\011\145\014\153\016\144\034\157\052\163\061\167" +
    "\062\166\063\152\072\154\074\161\075\147\077\165\100" +
    "\115\001\002\000\006\005\uff30\023\uff30\001\002\000\004" +
    "\004\231\001\002\000\044\003\uff49\004\uff49\005\uff49\006" +
    "\uff49\011\uff49\014\uff49\016\uff49\034\uff49\052\uff49\061\uff49" +
    "\062\uff49\063\uff49\072\uff49\074\uff49\075\uff49\077\uff49\100" +
    "\uff49\001\002\000\044\003\162\004\146\005\uff35\006\155" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\006\005\uff36\023\237\001\002\000\006\005" +
    "\uff32\023\uff32\001\002\000\004\005\236\001\002\000\070" +
    "\002\uff48\003\uff48\005\uff48\007\uff48\010\uff48\012\uff48\015" +
    "\uff48\016\uff48\017\uff48\020\uff48\021\uff48\023\uff48\024\uff48" +
    "\031\uff48\032\uff48\033\uff48\037\uff48\040\uff48\054\uff48\055" +
    "\uff48\056\uff48\063\uff48\065\uff48\067\uff48\070\uff48\071\uff48" +
    "\073\uff48\001\002\000\042\003\uff34\004\uff34\006\uff34\011" +
    "\uff34\014\uff34\016\uff34\034\uff34\052\uff34\061\uff34\062\uff34" +
    "\063\uff34\072\uff34\074\uff34\075\uff34\077\uff34\100\uff34\001" +
    "\002\000\042\003\162\004\146\006\155\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\006" +
    "\005\uff33\023\uff33\001\002\000\006\063\140\100\115\001" +
    "\002\000\072\002\uff3b\003\uff3b\005\uff3b\007\uff3b\010\uff3b" +
    "\011\145\012\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021" +
    "\uff3b\023\uff3b\024\uff3b\031\uff3b\032\uff3b\033\uff3b\037\uff3b" +
    "\040\uff3b\054\uff3b\055\uff3b\056\uff3b\063\uff3b\065\uff3b\067" +
    "\uff3b\070\uff3b\071\uff3b\073\uff3b\001\002\000\006\012\247" +
    "\023\246\001\002\000\070\002\uff40\003\uff40\005\uff40\007" +
    "\uff40\010\uff40\012\uff40\015\uff40\016\uff40\017\uff40\020\uff40" +
    "\021\uff40\023\uff40\024\uff40\031\uff40\032\uff40\033\uff40\037" +
    "\uff40\040\uff40\054\uff40\055\uff40\056\uff40\063\uff40\065\uff40" +
    "\067\uff40\070\uff40\071\uff40\073\uff40\001\002\000\042\003" +
    "\uff3a\004\uff3a\006\uff3a\011\uff3a\014\uff3a\016\uff3a\034\uff3a" +
    "\052\uff3a\061\uff3a\062\uff3a\063\uff3a\072\uff3a\074\uff3a\075" +
    "\uff3a\077\uff3a\100\uff3a\001\002\000\070\002\uff3c\003\uff3c" +
    "\005\uff3c\007\uff3c\010\uff3c\012\uff3c\015\uff3c\016\uff3c\017" +
    "\uff3c\020\uff3c\021\uff3c\023\uff3c\024\uff3c\031\uff3c\032\uff3c" +
    "\033\uff3c\037\uff3c\040\uff3c\054\uff3c\055\uff3c\056\uff3c\063" +
    "\uff3c\065\uff3c\067\uff3c\070\uff3c\071\uff3c\073\uff3c\001\002" +
    "\000\042\003\162\004\146\006\155\011\145\014\153\016" +
    "\144\034\157\052\163\061\167\062\166\063\152\072\154" +
    "\074\161\075\147\077\165\100\115\001\002\000\006\012" +
    "\uff39\023\uff39\001\002\000\074\002\uff44\003\uff44\005\uff44" +
    "\007\uff44\010\uff44\012\uff44\015\uff44\016\uff44\017\uff44\020" +
    "\uff44\021\uff44\023\uff44\024\uff44\031\uff44\032\uff44\033\uff44" +
    "\037\uff44\040\uff44\054\uff44\055\uff44\056\uff44\063\uff44\065" +
    "\uff44\067\uff44\070\uff44\071\uff44\073\uff44\074\254\075\253" +
    "\001\002\000\070\002\uff42\003\uff42\005\uff42\007\uff42\010" +
    "\uff42\012\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42" +
    "\023\uff42\024\uff42\031\uff42\032\uff42\033\uff42\037\uff42\040" +
    "\uff42\054\uff42\055\uff42\056\uff42\063\uff42\065\uff42\067\uff42" +
    "\070\uff42\071\uff42\073\uff42\001\002\000\070\002\uff43\003" +
    "\uff43\005\uff43\007\uff43\010\uff43\012\uff43\015\uff43\016\uff43" +
    "\017\uff43\020\uff43\021\uff43\023\uff43\024\uff43\031\uff43\032" +
    "\uff43\033\uff43\037\uff43\040\uff43\054\uff43\055\uff43\056\uff43" +
    "\063\uff43\065\uff43\067\uff43\070\uff43\071\uff43\073\uff43\001" +
    "\002\000\004\034\256\001\002\000\070\002\uff51\003\uff51" +
    "\005\uff51\007\uff51\010\uff51\012\uff51\015\uff51\016\uff51\017" +
    "\uff51\020\uff51\021\uff51\023\uff51\024\uff51\031\uff51\032\uff51" +
    "\033\uff51\037\uff51\040\uff51\054\uff51\055\uff51\056\uff51\063" +
    "\uff51\065\uff51\067\uff51\070\uff51\071\uff51\073\uff51\001\002" +
    "\000\070\002\uff4a\003\uff4a\005\uff4a\007\uff4a\010\uff4a\012" +
    "\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a\023\uff4a" +
    "\024\uff4a\031\uff4a\032\uff4a\033\uff4a\037\uff4a\040\uff4a\054" +
    "\uff4a\055\uff4a\056\uff4a\063\uff4a\065\uff4a\067\uff4a\070\uff4a" +
    "\071\uff4a\073\uff4a\001\002\000\070\002\uff4b\003\uff4b\005" +
    "\uff4b\007\uff4b\010\uff4b\012\uff4b\015\uff4b\016\uff4b\017\uff4b" +
    "\020\uff4b\021\uff4b\023\uff4b\024\uff4b\031\uff4b\032\uff4b\033" +
    "\uff4b\037\uff4b\040\uff4b\054\uff4b\055\uff4b\056\uff4b\063\uff4b" +
    "\065\uff4b\067\uff4b\070\uff4b\071\uff4b\073\uff4b\001\002\000" +
    "\042\003\162\004\146\006\155\011\145\014\153\016\144" +
    "\034\157\052\163\061\167\062\166\063\152\072\154\074" +
    "\161\075\147\077\165\100\115\001\002\000\006\007\uff56" +
    "\023\uff56\001\002\000\006\007\265\023\264\001\002\000" +
    "\042\003\uff58\004\uff58\006\uff58\011\uff58\014\uff58\016\uff58" +
    "\034\uff58\052\uff58\061\uff58\062\uff58\063\uff58\072\uff58\074" +
    "\uff58\075\uff58\077\uff58\100\uff58\001\002\000\070\002\uff71" +
    "\003\uff71\005\uff71\007\uff71\010\uff71\012\uff71\015\uff71\016" +
    "\uff71\017\uff71\020\uff71\021\uff71\023\uff71\024\uff71\031\uff71" +
    "\032\uff71\033\uff71\037\uff71\040\uff71\054\uff71\055\uff71\056" +
    "\uff71\063\uff71\065\uff71\067\uff71\070\uff71\071\uff71\073\uff71" +
    "\001\002\000\042\003\162\004\146\006\155\011\145\014" +
    "\153\016\144\034\157\052\163\061\167\062\166\063\152" +
    "\072\154\074\161\075\147\077\165\100\115\001\002\000" +
    "\006\007\uff57\023\uff57\001\002\000\004\014\272\001\002" +
    "\000\070\002\uff4f\003\uff4f\005\uff4f\007\uff4f\010\uff4f\012" +
    "\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\023\uff4f" +
    "\024\uff4f\031\uff4f\032\uff4f\033\uff4f\037\uff4f\040\uff4f\054" +
    "\uff4f\055\uff4f\056\uff4f\063\uff4f\065\uff4f\067\uff4f\070\uff4f" +
    "\071\uff4f\073\uff4f\001\002\000\070\002\uff50\003\uff50\005" +
    "\uff50\007\uff50\010\uff50\012\uff50\015\uff50\016\uff50\017\uff50" +
    "\020\uff50\021\uff50\023\uff50\024\uff50\031\uff50\032\uff50\033" +
    "\uff50\037\uff50\040\uff50\054\uff50\055\uff50\056\uff50\063\uff50" +
    "\065\uff50\067\uff50\070\uff50\071\uff50\073\uff50\001\002\000" +
    "\004\063\300\001\002\000\044\003\uff2f\004\uff2f\005\275" +
    "\006\uff2f\011\uff2f\014\uff2f\016\uff2f\034\uff2f\052\uff2f\061" +
    "\uff2f\062\uff2f\063\uff2f\072\uff2f\074\uff2f\075\uff2f\077\uff2f" +
    "\100\uff2f\001\002\000\070\002\uff47\003\uff47\005\uff47\007" +
    "\uff47\010\uff47\012\uff47\015\uff47\016\uff47\017\uff47\020\uff47" +
    "\021\uff47\023\uff47\024\uff47\031\uff47\032\uff47\033\uff47\037" +
    "\uff47\040\uff47\054\uff47\055\uff47\056\uff47\063\uff47\065\uff47" +
    "\067\uff47\070\uff47\071\uff47\073\uff47\001\002\000\042\003" +
    "\162\004\146\006\155\011\145\014\153\016\144\034\157" +
    "\052\163\061\167\062\166\063\152\072\154\074\161\075" +
    "\147\077\165\100\115\001\002\000\006\005\uff2e\023\uff2e" +
    "\001\002\000\076\002\uff97\003\uff97\004\301\005\uff97\007" +
    "\uff97\010\uff97\012\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\023\uff97\024\uff97\031\uff97\032\uff97\033\uff97\037" +
    "\uff97\040\uff97\054\uff97\055\uff97\056\uff97\063\uff97\065\uff97" +
    "\067\uff97\070\uff97\071\uff97\073\uff97\074\uff97\075\uff97\001" +
    "\002\000\044\003\uff2d\004\uff2d\005\303\006\uff2d\011\uff2d" +
    "\014\uff2d\016\uff2d\034\uff2d\052\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\072\uff2d\074\uff2d\075\uff2d\077\uff2d\100\uff2d\001\002" +
    "\000\042\003\162\004\146\006\155\011\145\014\153\016" +
    "\144\034\157\052\163\061\167\062\166\063\152\072\154" +
    "\074\161\075\147\077\165\100\115\001\002\000\070\002" +
    "\uff46\003\uff46\005\uff46\007\uff46\010\uff46\012\uff46\015\uff46" +
    "\016\uff46\017\uff46\020\uff46\021\uff46\023\uff46\024\uff46\031" +
    "\uff46\032\uff46\033\uff46\037\uff46\040\uff46\054\uff46\055\uff46" +
    "\056\uff46\063\uff46\065\uff46\067\uff46\070\uff46\071\uff46\073" +
    "\uff46\001\002\000\006\005\uff2c\023\uff2c\001\002\000\016" +
    "\005\uff1c\011\uff1c\063\uff1c\074\uff1c\075\uff1c\100\uff1c\001" +
    "\002\000\016\005\uff18\011\105\063\140\074\124\075\111" +
    "\100\115\001\002\000\004\005\310\001\002\000\052\003" +
    "\uff1b\006\uff1b\011\uff1b\037\uff1b\040\uff1b\041\uff1b\043\uff1b" +
    "\044\uff1b\045\uff1b\046\uff1b\050\uff1b\057\uff1b\060\uff1b\063" +
    "\uff1b\067\uff1b\070\uff1b\071\uff1b\074\uff1b\075\uff1b\100\uff1b" +
    "\001\002\000\052\003\uffb8\006\075\011\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8" +
    "\057\uffb8\060\uffb8\063\uffb8\067\uffb8\070\uffb8\071\uffb8\074" +
    "\uffb8\075\uffb8\100\uffb8\001\002\000\050\003\126\011\105" +
    "\037\054\040\046\041\113\043\104\044\117\045\131\046" +
    "\112\050\123\057\107\060\125\063\114\067\051\070\052" +
    "\071\053\074\124\075\111\100\115\001\002\000\060\003" +
    "\uff1a\007\uff1a\011\uff1a\037\uff1a\040\uff1a\041\uff1a\042\uff1a" +
    "\043\uff1a\044\uff1a\045\uff1a\046\uff1a\047\uff1a\050\uff1a\057" +
    "\uff1a\060\uff1a\063\uff1a\067\uff1a\070\uff1a\071\uff1a\074\uff1a" +
    "\075\uff1a\076\uff1a\100\uff1a\001\002\000\060\003\uffb6\007" +
    "\uffb6\011\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\057\uffb6\060" +
    "\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\100\uffb6\001\002\000\060\003\uffb7\007\uffb7\011" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\057\uffb7\060\uffb7\063" +
    "\uffb7\067\uffb7\070\uffb7\071\uffb7\074\uffb7\075\uffb7\076\uffb7" +
    "\100\uffb7\001\002\000\006\063\140\100\115\001\002\000" +
    "\072\002\uff3b\003\uff3b\005\uff3b\007\uff3b\010\uff3b\011\145" +
    "\012\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\023" +
    "\uff3b\024\uff3b\031\uff3b\032\uff3b\033\uff3b\037\uff3b\040\uff3b" +
    "\054\uff3b\055\uff3b\056\uff3b\063\uff3b\065\uff3b\067\uff3b\070" +
    "\uff3b\071\uff3b\073\uff3b\001\002\000\070\002\uff3e\003\uff3e" +
    "\005\uff3e\007\uff3e\010\uff3e\012\uff3e\015\uff3e\016\uff3e\017" +
    "\uff3e\020\uff3e\021\uff3e\023\uff3e\024\uff3e\031\uff3e\032\uff3e" +
    "\033\uff3e\037\uff3e\040\uff3e\054\uff3e\055\uff3e\056\uff3e\063" +
    "\uff3e\065\uff3e\067\uff3e\070\uff3e\071\uff3e\073\uff3e\001\002" +
    "\000\014\037\332\040\326\067\327\070\330\071\331\001" +
    "\002\000\036\004\146\011\145\014\153\016\144\034\157" +
    "\052\163\061\167\062\166\063\152\072\154\074\161\075" +
    "\147\077\165\100\115\001\002\000\026\005\324\015\175" +
    "\016\173\017\200\020\176\021\174\031\171\032\172\033" +
    "\201\073\177\001\002\000\070\002\uff62\003\uff62\005\uff62" +
    "\007\uff62\010\uff62\012\uff62\015\uff62\016\uff62\017\uff62\020" +
    "\uff62\021\uff62\023\uff62\024\uff62\031\uff62\032\uff62\033\uff62" +
    "\037\uff62\040\uff62\054\uff62\055\uff62\056\uff62\063\uff62\065" +
    "\uff62\067\uff62\070\uff62\071\uff62\073\uff62\001\002\000\004" +
    "\005\333\001\002\000\004\005\uffd3\001\002\000\004\005" +
    "\uffd2\001\002\000\004\005\uffd1\001\002\000\004\005\uffd0" +
    "\001\002\000\004\005\uffd4\001\002\000\042\003\uff4d\004" +
    "\uff4d\006\uff4d\011\uff4d\014\uff4d\016\uff4d\034\uff4d\052\uff4d" +
    "\061\uff4d\062\uff4d\063\uff4d\072\uff4d\074\uff4d\075\uff4d\077" +
    "\uff4d\100\uff4d\001\002\000\042\003\162\004\146\006\155" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\070\002\uff4c\003\uff4c\005\uff4c\007\uff4c\010" +
    "\uff4c\012\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c" +
    "\023\uff4c\024\uff4c\031\uff4c\032\uff4c\033\uff4c\037\uff4c\040" +
    "\uff4c\054\uff4c\055\uff4c\056\uff4c\063\uff4c\065\uff4c\067\uff4c" +
    "\070\uff4c\071\uff4c\073\uff4c\001\002\000\042\003\162\004" +
    "\146\006\155\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\006\012\uff37\023\uff37\001\002" +
    "\000\036\004\146\011\145\014\153\016\144\034\157\052" +
    "\163\061\167\062\166\063\152\072\154\074\161\075\147" +
    "\077\165\100\115\001\002\000\070\002\uff64\003\uff64\005" +
    "\uff64\007\uff64\010\uff64\012\uff64\015\uff64\016\uff64\017\uff64" +
    "\020\uff64\021\uff64\023\uff64\024\uff64\031\uff64\032\uff64\033" +
    "\uff64\037\uff64\040\uff64\054\uff64\055\uff64\056\uff64\063\uff64" +
    "\065\uff64\067\uff64\070\uff64\071\uff64\073\uff64\001\002\000" +
    "\004\063\343\001\002\000\112\002\uff97\003\uff97\004\uff97" +
    "\005\uff97\007\uff97\010\uff97\011\uff97\012\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\037\uff97\040\uff97\054\uff97\055\uff97\056\uff97\063\uff97" +
    "\065\uff97\067\uff97\070\uff97\071\uff97\073\uff97\074\uff97\075" +
    "\uff97\001\002\000\042\003\uff93\004\uff93\006\uff93\011\uff93" +
    "\014\uff93\016\uff93\034\uff93\052\uff93\061\uff93\062\uff93\063" +
    "\uff93\072\uff93\074\uff93\075\uff93\077\uff93\100\uff93\001\002" +
    "\000\042\003\uff8d\004\uff8d\006\uff8d\011\uff8d\014\uff8d\016" +
    "\uff8d\034\uff8d\052\uff8d\061\uff8d\062\uff8d\063\uff8d\072\uff8d" +
    "\074\uff8d\075\uff8d\077\uff8d\100\uff8d\001\002\000\006\005" +
    "\uff8a\010\uff8a\001\002\000\042\003\uff8f\004\uff8f\006\uff8f" +
    "\011\uff8f\014\uff8f\016\uff8f\034\uff8f\052\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\072\uff8f\074\uff8f\075\uff8f\077\uff8f\100\uff8f" +
    "\001\002\000\006\005\uff8b\010\uff8b\001\002\000\042\003" +
    "\uff95\004\uff95\006\uff95\011\uff95\014\uff95\016\uff95\034\uff95" +
    "\052\uff95\061\uff95\062\uff95\063\uff95\072\uff95\074\uff95\075" +
    "\uff95\077\uff95\100\uff95\001\002\000\042\003\uff91\004\uff91" +
    "\006\uff91\011\uff91\014\uff91\016\uff91\034\uff91\052\uff91\061" +
    "\uff91\062\uff91\063\uff91\072\uff91\074\uff91\075\uff91\077\uff91" +
    "\100\uff91\001\002\000\042\003\162\004\146\006\155\011" +
    "\145\014\153\016\144\034\157\052\163\061\167\062\166" +
    "\063\152\072\154\074\161\075\147\077\165\100\115\001" +
    "\002\000\006\005\uff90\010\uff90\001\002\000\042\003\162" +
    "\004\146\006\155\011\145\014\153\016\144\034\157\052" +
    "\163\061\167\062\166\063\152\072\154\074\161\075\147" +
    "\077\165\100\115\001\002\000\006\005\uff94\010\uff94\001" +
    "\002\000\042\003\162\004\146\006\155\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\006" +
    "\005\uff8e\010\uff8e\001\002\000\042\003\162\004\146\006" +
    "\155\011\145\014\153\016\144\034\157\052\163\061\167" +
    "\062\166\063\152\072\154\074\161\075\147\077\165\100" +
    "\115\001\002\000\006\005\uff8c\010\uff8c\001\002\000\042" +
    "\003\162\004\146\006\155\011\145\014\153\016\144\034" +
    "\157\052\163\061\167\062\166\063\152\072\154\074\161" +
    "\075\147\077\165\100\115\001\002\000\006\005\uff92\010" +
    "\uff92\001\002\000\060\003\uffae\007\uffae\011\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\057\uffae\060\uffae\063\uffae\067\uffae" +
    "\070\uffae\071\uffae\074\uffae\075\uffae\076\uffae\100\uffae\001" +
    "\002\000\060\003\uffa1\007\uffa1\011\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\057\uffa1\060\uffa1\063\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\074\uffa1\075\uffa1\076\uffa1\100\uffa1\001\002\000" +
    "\036\004\uffa3\011\uffa3\014\uffa3\016\uffa3\034\uffa3\052\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\072\uffa3\074\uffa3\075\uffa3\077" +
    "\uffa3\100\uffa3\001\002\000\036\004\146\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\026" +
    "\005\372\015\175\016\173\017\200\020\176\021\174\031" +
    "\171\032\172\033\201\073\177\001\002\000\004\010\373" +
    "\001\002\000\060\003\uffa2\007\uffa2\011\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\057\uffa2\060\uffa2\063\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\074\uffa2\075\uffa2\076\uffa2\100\uffa2\001\002" +
    "\000\006\063\140\100\115\001\002\000\010\005\uff78\010" +
    "\uff78\011\105\001\002\000\006\005\uff7c\010\uff7c\001\002" +
    "\000\006\012\u0101\023\u0100\001\002\000\042\003\uff77\004" +
    "\uff77\006\uff77\011\uff77\014\uff77\016\uff77\034\uff77\052\uff77" +
    "\061\uff77\062\uff77\063\uff77\072\uff77\074\uff77\075\uff77\077" +
    "\uff77\100\uff77\001\002\000\006\005\uff79\010\uff79\001\002" +
    "\000\042\003\162\004\146\006\155\011\145\014\153\016" +
    "\144\034\157\052\163\061\167\062\166\063\152\072\154" +
    "\074\161\075\147\077\165\100\115\001\002\000\006\012" +
    "\uff76\023\uff76\001\002\000\060\003\uffa6\007\uffa6\011\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\057\uffa6\060\uffa6\063\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\074\uffa6\075\uffa6\076\uffa6\100" +
    "\uffa6\001\002\000\044\003\uff9e\004\uff9e\005\u0106\006\uff9e" +
    "\011\uff9e\014\uff9e\016\uff9e\034\uff9e\052\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\072\uff9e\074\uff9e\075\uff9e\077\uff9e\100\uff9e" +
    "\001\002\000\004\010\u0109\001\002\000\042\003\162\004" +
    "\146\006\155\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\006\005\uff9d\023\uff9d\001\002" +
    "\000\060\003\uffad\007\uffad\011\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\057\uffad\060\uffad\063\uffad\067\uffad\070\uffad\071" +
    "\uffad\074\uffad\075\uffad\076\uffad\100\uffad\001\002\000\052" +
    "\003\uffb8\006\075\011\uffb8\037\uffb8\040\uffb8\041\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\057\uffb8\060\uffb8" +
    "\063\uffb8\067\uffb8\070\uffb8\071\uffb8\074\uffb8\075\uffb8\100" +
    "\uffb8\001\002\000\004\043\uff21\001\002\000\004\043\u010d" +
    "\001\002\000\004\004\u010e\001\002\000\042\003\uff20\004" +
    "\uff20\006\uff20\011\uff20\014\uff20\016\uff20\034\uff20\052\uff20" +
    "\061\uff20\062\uff20\063\uff20\072\uff20\074\uff20\075\uff20\077" +
    "\uff20\100\uff20\001\002\000\042\003\162\004\146\006\155" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\004\005\u0111\001\002\000\004\010\uff1f\001" +
    "\002\000\020\022\u0117\025\u0114\026\u0119\027\u0116\030\u0113" +
    "\074\u0118\075\u0115\001\002\000\042\003\uff81\004\uff81\006" +
    "\uff81\011\uff81\014\uff81\016\uff81\034\uff81\052\uff81\061\uff81" +
    "\062\uff81\063\uff81\072\uff81\074\uff81\075\uff81\077\uff81\100" +
    "\uff81\001\002\000\042\003\uff87\004\uff87\006\uff87\011\uff87" +
    "\014\uff87\016\uff87\034\uff87\052\uff87\061\uff87\062\uff87\063" +
    "\uff87\072\uff87\074\uff87\075\uff87\077\uff87\100\uff87\001\002" +
    "\000\006\005\uff7e\010\uff7e\001\002\000\042\003\uff83\004" +
    "\uff83\006\uff83\011\uff83\014\uff83\016\uff83\034\uff83\052\uff83" +
    "\061\uff83\062\uff83\063\uff83\072\uff83\074\uff83\075\uff83\077" +
    "\uff83\100\uff83\001\002\000\042\003\uff89\004\uff89\006\uff89" +
    "\011\uff89\014\uff89\016\uff89\034\uff89\052\uff89\061\uff89\062" +
    "\uff89\063\uff89\072\uff89\074\uff89\075\uff89\077\uff89\100\uff89" +
    "\001\002\000\006\005\uff7f\010\uff7f\001\002\000\042\003" +
    "\uff85\004\uff85\006\uff85\011\uff85\014\uff85\016\uff85\034\uff85" +
    "\052\uff85\061\uff85\062\uff85\063\uff85\072\uff85\074\uff85\075" +
    "\uff85\077\uff85\100\uff85\001\002\000\042\003\162\004\146" +
    "\006\155\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\006\005\uff84\010\uff84\001\002\000" +
    "\042\003\162\004\146\006\155\011\145\014\153\016\144" +
    "\034\157\052\163\061\167\062\166\063\152\072\154\074" +
    "\161\075\147\077\165\100\115\001\002\000\006\005\uff88" +
    "\010\uff88\001\002\000\042\003\162\004\146\006\155\011" +
    "\145\014\153\016\144\034\157\052\163\061\167\062\166" +
    "\063\152\072\154\074\161\075\147\077\165\100\115\001" +
    "\002\000\006\005\uff82\010\uff82\001\002\000\042\003\162" +
    "\004\146\006\155\011\145\014\153\016\144\034\157\052" +
    "\163\061\167\062\166\063\152\072\154\074\161\075\147" +
    "\077\165\100\115\001\002\000\006\005\uff86\010\uff86\001" +
    "\002\000\042\003\162\004\146\006\155\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\006" +
    "\005\uff80\010\uff80\001\002\000\004\063\u0125\001\002\000" +
    "\112\002\uff96\003\uff96\004\uff96\005\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\037\uff96\040\uff96\054" +
    "\uff96\055\uff96\056\uff96\063\uff96\065\uff96\067\uff96\070\uff96" +
    "\071\uff96\073\uff96\074\uff96\075\uff96\001\002\000\042\003" +
    "\uff2b\004\uff2b\006\uff2b\011\uff2b\014\uff2b\016\uff2b\034\uff2b" +
    "\052\uff2b\061\uff2b\062\uff2b\063\uff2b\072\uff2b\074\uff2b\075" +
    "\uff2b\077\uff2b\100\uff2b\001\002\000\042\003\162\004\146" +
    "\006\155\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\004\005\u0129\001\002\000\052\003" +
    "\uff2a\006\uff2a\011\uff2a\037\uff2a\040\uff2a\041\uff2a\043\uff2a" +
    "\044\uff2a\045\uff2a\046\uff2a\050\uff2a\057\uff2a\060\uff2a\063" +
    "\uff2a\067\uff2a\070\uff2a\071\uff2a\074\uff2a\075\uff2a\100\uff2a" +
    "\001\002\000\052\003\uffb8\006\075\011\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8" +
    "\057\uffb8\060\uffb8\063\uffb8\067\uffb8\070\uffb8\071\uffb8\074" +
    "\uffb8\075\uffb8\100\uffb8\001\002\000\060\003\uff26\007\uff26" +
    "\011\uff26\037\uff26\040\uff26\041\uff26\042\uff26\043\uff26\044" +
    "\uff26\045\uff26\046\uff26\047\uff26\050\uff26\057\uff26\060\uff26" +
    "\063\uff26\067\uff26\070\uff26\071\uff26\074\uff26\075\uff26\076" +
    "\uff26\100\uff26\001\002\000\060\003\uff29\007\uff29\011\uff29" +
    "\037\uff29\040\uff29\041\uff29\042\u012d\043\uff29\044\uff29\045" +
    "\uff29\046\uff29\047\uff29\050\uff29\057\uff29\060\uff29\063\uff29" +
    "\067\uff29\070\uff29\071\uff29\074\uff29\075\uff29\076\uff29\100" +
    "\uff29\001\002\000\052\003\uff28\006\uff28\011\uff28\037\uff28" +
    "\040\uff28\041\uff28\043\uff28\044\uff28\045\uff28\046\uff28\050" +
    "\uff28\057\uff28\060\uff28\063\uff28\067\uff28\070\uff28\071\uff28" +
    "\074\uff28\075\uff28\100\uff28\001\002\000\052\003\uffb8\006" +
    "\075\011\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\050\uffb8\057\uffb8\060\uffb8\063\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\074\uffb8\075\uffb8\100\uffb8\001\002" +
    "\000\060\003\uff27\007\uff27\011\uff27\037\uff27\040\uff27\041" +
    "\uff27\042\uff27\043\uff27\044\uff27\045\uff27\046\uff27\047\uff27" +
    "\050\uff27\057\uff27\060\uff27\063\uff27\067\uff27\070\uff27\071" +
    "\uff27\074\uff27\075\uff27\076\uff27\100\uff27\001\002\000\042" +
    "\003\uff17\004\uff17\006\uff17\011\uff17\014\uff17\016\uff17\034" +
    "\uff17\052\uff17\061\uff17\062\uff17\063\uff17\072\uff17\074\uff17" +
    "\075\uff17\077\uff17\100\uff17\001\002\000\042\003\162\004" +
    "\146\006\155\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\004\005\u0133\001\002\000\004" +
    "\006\u0134\001\002\000\004\047\uff16\001\002\000\004\047" +
    "\u0138\001\002\000\010\007\uff13\047\uff13\076\uff13\001\002" +
    "\000\010\007\uff0d\047\u0138\076\u013e\001\002\000\042\003" +
    "\uff12\004\uff12\006\uff12\011\uff12\014\uff12\016\uff12\034\uff12" +
    "\052\uff12\061\uff12\062\uff12\063\uff12\072\uff12\074\uff12\075" +
    "\uff12\077\uff12\100\uff12\001\002\000\042\003\162\004\146" +
    "\006\155\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\004\024\u013b\001\002\000\056\003" +
    "\uff11\007\uff11\011\uff11\037\uff11\040\uff11\041\uff11\043\uff11" +
    "\044\uff11\045\uff11\046\uff11\047\uff11\050\uff11\057\uff11\060" +
    "\uff11\063\uff11\067\uff11\070\uff11\071\uff11\074\uff11\075\uff11" +
    "\076\uff11\100\uff11\001\002\000\056\003\uffb3\007\uffb3\011" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\057\uffb3\060\uffb3\063\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3" +
    "\001\002\000\056\003\uffb5\007\uff10\011\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uff10" +
    "\050\uffb5\057\uffb5\060\uffb5\063\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\074\uffb5\075\uffb5\076\uff10\100\uffb5\001\002\000\004" +
    "\024\u0142\001\002\000\004\007\u0141\001\002\000\010\007" +
    "\uff14\047\uff14\076\uff14\001\002\000\060\003\uff15\007\uff15" +
    "\011\uff15\037\uff15\040\uff15\041\uff15\042\uff15\043\uff15\044" +
    "\uff15\045\uff15\046\uff15\047\uff15\050\uff15\057\uff15\060\uff15" +
    "\063\uff15\067\uff15\070\uff15\071\uff15\074\uff15\075\uff15\076" +
    "\uff15\100\uff15\001\002\000\052\003\uff0f\007\uff0f\011\uff0f" +
    "\037\uff0f\040\uff0f\041\uff0f\043\uff0f\044\uff0f\045\uff0f\046" +
    "\uff0f\050\uff0f\057\uff0f\060\uff0f\063\uff0f\067\uff0f\070\uff0f" +
    "\071\uff0f\074\uff0f\075\uff0f\100\uff0f\001\002\000\052\003" +
    "\uffb3\007\uffb3\011\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\050\uffb3\057\uffb3\060\uffb3\063" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3\075\uffb3\100\uffb3" +
    "\001\002\000\052\003\uffb5\007\uff0e\011\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5" +
    "\057\uffb5\060\uffb5\063\uffb5\067\uffb5\070\uffb5\071\uffb5\074" +
    "\uffb5\075\uffb5\100\uffb5\001\002\000\006\063\140\100\115" +
    "\001\002\000\010\005\uff78\010\uff78\011\105\001\002\000" +
    "\006\005\uff7a\010\uff7a\001\002\000\060\003\uffa9\007\uffa9" +
    "\011\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\057\uffa9\060\uffa9" +
    "\063\uffa9\067\uffa9\070\uffa9\071\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\100\uffa9\001\002\000\042\003\162\004\146\006\155" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\004\010\u014b\001\002\000\060\003\uffa4\007" +
    "\uffa4\011\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\057\uffa4\060" +
    "\uffa4\063\uffa4\067\uffa4\070\uffa4\071\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\100\uffa4\001\002\000\042\003\uffa0\004\uffa0\006" +
    "\uffa0\011\uffa0\014\uffa0\016\uffa0\034\uffa0\052\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\072\uffa0\074\uffa0\075\uffa0\077\uffa0\100" +
    "\uffa0\001\002\000\004\010\u014e\001\002\000\060\003\uffac" +
    "\007\uffac\011\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\057\uffac" +
    "\060\uffac\063\uffac\067\uffac\070\uffac\071\uffac\074\uffac\075" +
    "\uffac\076\uffac\100\uffac\001\002\000\042\003\162\004\146" +
    "\006\155\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\006\005\uff9f\023\uff9f\001\002\000" +
    "\042\003\162\004\146\006\155\011\145\014\153\016\144" +
    "\034\157\052\163\061\167\062\166\063\152\072\154\074" +
    "\161\075\147\077\165\100\115\001\002\000\006\012\uff74" +
    "\023\uff74\001\002\000\042\003\uff25\004\uff25\006\uff25\011" +
    "\uff25\014\uff25\016\uff25\034\uff25\052\uff25\061\uff25\062\uff25" +
    "\063\uff25\072\uff25\074\uff25\075\uff25\077\uff25\100\uff25\001" +
    "\002\000\042\003\162\004\146\006\155\011\145\014\153" +
    "\016\144\034\157\052\163\061\167\062\166\063\152\072" +
    "\154\074\161\075\147\077\165\100\115\001\002\000\004" +
    "\005\u0156\001\002\000\052\003\uff24\006\uff24\011\uff24\037" +
    "\uff24\040\uff24\041\uff24\043\uff24\044\uff24\045\uff24\046\uff24" +
    "\050\uff24\057\uff24\060\uff24\063\uff24\067\uff24\070\uff24\071" +
    "\uff24\074\uff24\075\uff24\100\uff24\001\002\000\052\003\uffb8" +
    "\006\075\011\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\050\uffb8\057\uffb8\060\uffb8\063\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\074\uffb8\075\uffb8\100\uffb8\001" +
    "\002\000\060\003\uff23\007\uff23\011\uff23\037\uff23\040\uff23" +
    "\041\uff23\042\uff23\043\uff23\044\uff23\045\uff23\046\uff23\047" +
    "\uff23\050\uff23\057\uff23\060\uff23\063\uff23\067\uff23\070\uff23" +
    "\071\uff23\074\uff23\075\uff23\076\uff23\100\uff23\001\002\000" +
    "\010\010\uffb2\011\u0166\022\uffb2\001\002\000\006\012\u015c" +
    "\023\u015b\001\002\000\042\003\uff9c\004\uff9c\006\uff9c\011" +
    "\uff9c\014\uff9c\016\uff9c\034\uff9c\052\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\072\uff9c\074\uff9c\075\uff9c\077\uff9c\100\uff9c\001" +
    "\002\000\006\010\uffb0\022\uffb0\001\002\000\006\010\uffcd" +
    "\022\u015f\001\002\000\004\010\u0162\001\002\000\042\003" +
    "\uffcf\004\uffcf\006\uffcf\011\uffcf\014\uffcf\016\uffcf\034\uffcf" +
    "\052\uffcf\061\uffcf\062\uffcf\063\uffcf\072\uffcf\074\uffcf\075" +
    "\uffcf\077\uffcf\100\uffcf\001\002\000\042\003\162\004\146" +
    "\006\155\011\145\014\153\016\144\034\157\052\163\061" +
    "\167\062\166\063\152\072\154\074\161\075\147\077\165" +
    "\100\115\001\002\000\036\002\uffce\003\uffce\007\uffce\010" +
    "\uffce\037\uffce\040\uffce\054\uffce\055\uffce\056\uffce\063\uffce" +
    "\065\uffce\067\uffce\070\uffce\071\uffce\001\002\000\060\003" +
    "\uffaf\007\uffaf\011\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\057" +
    "\uffaf\060\uffaf\063\uffaf\067\uffaf\070\uffaf\071\uffaf\074\uffaf" +
    "\075\uffaf\076\uffaf\100\uffaf\001\002\000\042\003\162\004" +
    "\146\006\155\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\006\012\uff9b\023\uff9b\001\002" +
    "\000\006\010\uffcd\022\u015f\001\002\000\042\003\uff9a\004" +
    "\uff9a\006\uff9a\011\uff9a\014\uff9a\016\uff9a\034\uff9a\052\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\072\uff9a\074\uff9a\075\uff9a\077" +
    "\uff9a\100\uff9a\001\002\000\042\003\162\004\146\006\155" +
    "\011\145\014\153\016\144\034\157\052\163\061\167\062" +
    "\166\063\152\072\154\074\161\075\147\077\165\100\115" +
    "\001\002\000\006\012\uff99\023\uff99\001\002\000\004\010" +
    "\u016a\001\002\000\060\003\uffb1\007\uffb1\011\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\057\uffb1\060\uffb1\063\uffb1\067\uffb1" +
    "\070\uffb1\071\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1\001" +
    "\002\000\044\002\uffe5\003\uffe5\004\u0175\007\uffe5\010\uffe5" +
    "\011\u0176\022\uffe5\037\uffe5\040\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\063\uffe5\065\uffe5\067\uffe5\070\uffe5\071\uffe5\001\002" +
    "\000\006\012\u016e\023\u016d\001\002\000\042\003\uffde\004" +
    "\uffde\006\uffde\011\uffde\014\uffde\016\uffde\034\uffde\052\uffde" +
    "\061\uffde\062\uffde\063\uffde\072\uffde\074\uffde\075\uffde\077" +
    "\uffde\100\uffde\001\002\000\040\002\uffe3\003\uffe3\007\uffe3" +
    "\010\uffe3\022\uffe3\037\uffe3\040\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071\uffe3\001\002" +
    "\000\040\002\uffcd\003\uffcd\007\uffcd\010\uffcd\022\u015f\037" +
    "\uffcd\040\uffcd\054\uffcd\055\uffcd\056\uffcd\063\uffcd\065\uffcd" +
    "\067\uffcd\070\uffcd\071\uffcd\001\002\000\036\002\uffdf\003" +
    "\uffdf\007\uffdf\010\u0172\037\uffdf\040\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\063\uffdf\065\uffdf\067\uffdf\070\uffdf\071\uffdf\001" +
    "\002\000\034\002\uffe2\003\uffe2\007\uffe2\037\uffe2\040\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\063\uffe2\065\uffe2\067\uffe2\070" +
    "\uffe2\071\uffe2\001\002\000\034\002\uffe0\003\uffe0\007\uffe0" +
    "\037\uffe0\040\uffe0\054\uffe0\055\uffe0\056\uffe0\063\uffe0\065" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000\042\003\162" +
    "\004\146\006\155\011\145\014\153\016\144\034\157\052" +
    "\163\061\167\062\166\063\152\072\154\074\161\075\147" +
    "\077\165\100\115\001\002\000\006\012\uffdd\023\uffdd\001" +
    "\002\000\020\005\uffcc\037\uffcc\040\uffcc\063\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\001\002\000\042\003\uffdc\004\uffdc\006" +
    "\uffdc\011\uffdc\014\uffdc\016\uffdc\034\uffdc\052\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\072\uffdc\074\uffdc\075\uffdc\077\uffdc\100" +
    "\uffdc\001\002\000\040\002\uffcd\003\uffcd\007\uffcd\010\uffcd" +
    "\022\u015f\037\uffcd\040\uffcd\054\uffcd\055\uffcd\056\uffcd\063" +
    "\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002\000\036" +
    "\002\uffdf\003\uffdf\007\uffdf\010\u0172\037\uffdf\040\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\063\uffdf\065\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\001\002\000\034\002\uffe4\003\uffe4\007\uffe4\037" +
    "\uffe4\040\uffe4\054\uffe4\055\uffe4\056\uffe4\063\uffe4\065\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\001\002\000\042\003\162\004" +
    "\146\006\155\011\145\014\153\016\144\034\157\052\163" +
    "\061\167\062\166\063\152\072\154\074\161\075\147\077" +
    "\165\100\115\001\002\000\006\012\uffdb\023\uffdb\001\002" +
    "\000\020\005\uffc1\037\054\040\046\063\063\067\051\070" +
    "\052\071\053\001\002\000\004\005\u017e\001\002\000\004" +
    "\006\uffcb\001\002\000\004\006\075\001\002\000\034\002" +
    "\uffca\003\uffca\007\uffca\037\uffca\040\uffca\054\uffca\055\uffca" +
    "\056\uffca\063\uffca\065\uffca\067\uffca\070\uffca\071\uffca\001" +
    "\002\000\020\005\uffc6\037\uffc6\040\uffc6\063\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\001\002\000\020\005\uffc1\037\054\040" +
    "\046\063\063\067\051\070\052\071\053\001\002\000\004" +
    "\005\u0184\001\002\000\004\006\uffc5\001\002\000\004\006" +
    "\075\001\002\000\034\002\uffc4\003\uffc4\007\uffc4\037\uffc4" +
    "\040\uffc4\054\uffc4\055\uffc4\056\uffc4\063\uffc4\065\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\001\002\000\034\002\uffe1\003\uffe1" +
    "\007\uffe1\037\uffe1\040\uffe1\054\uffe1\055\uffe1\056\uffe1\063" +
    "\uffe1\065\uffe1\067\uffe1\070\uffe1\071\uffe1\001\002\000\004" +
    "\006\uffec\001\002\000\012\051\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\001\002\000\004\010\016\001\002\000\016\003\ufffa" +
    "\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\006\002\004\064\003\001\001\000\014\003" +
    "\006\004\007\005\014\006\013\066\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u018a\065\u0188\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\026\001\001" +
    "\000\004\010\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\032\001\001\000\004\011\033\001\001" +
    "\000\006\057\036\071\035\001\001\000\002\001\001\000" +
    "\012\007\042\012\037\013\040\016\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u016b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\056\001\001\000\012\014\063\017\060\020\057\021\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\070\001\001\000\006\014\063\021\071\001\001\000\002" +
    "\001\001\000\004\102\073\001\001\000\004\023\075\001" +
    "\001\000\004\106\076\001\001\000\002\001\001\000\004" +
    "\025\077\001\001\000\004\110\100\001\001\000\030\014" +
    "\102\026\132\036\127\040\117\042\120\043\107\044\126" +
    "\047\115\050\131\054\121\055\105\001\001\000\002\001" +
    "\001\000\004\046\u0159\001\001\000\002\001\001\000\004" +
    "\136\u0150\001\001\000\002\001\001\000\004\113\u0148\001" +
    "\001\000\002\001\001\000\004\134\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\174\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\177\134" +
    "\001\001\000\012\036\136\045\140\047\115\054\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\200\142\001\001\000\016\024" +
    "\150\030\147\032\157\034\163\035\167\054\155\001\001" +
    "\000\004\145\337\001\001\000\004\162\335\001\001\000" +
    "\006\146\321\154\320\001\001\000\004\160\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\137\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\157\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\221\001\001" +
    "\000\004\152\217\001\001\000\004\141\215\001\001\000" +
    "\004\144\213\001\001\000\004\140\211\001\001\000\004" +
    "\143\207\001\001\000\004\147\205\001\001\000\004\142" +
    "\203\001\001\000\004\150\201\001\001\000\014\030\147" +
    "\032\157\034\163\035\202\054\155\001\001\000\002\001" +
    "\001\000\014\030\147\032\157\034\163\035\204\054\155" +
    "\001\001\000\002\001\001\000\014\030\147\032\157\034" +
    "\163\035\206\054\155\001\001\000\002\001\001\000\014" +
    "\030\147\032\157\034\163\035\210\054\155\001\001\000" +
    "\002\001\001\000\014\030\147\032\157\034\163\035\212" +
    "\054\155\001\001\000\002\001\001\000\014\030\147\032" +
    "\157\034\163\035\214\054\155\001\001\000\002\001\001" +
    "\000\014\030\147\032\157\034\163\035\216\054\155\001" +
    "\001\000\002\001\001\000\014\030\147\032\157\034\163" +
    "\035\220\054\155\001\001\000\002\001\001\000\014\030" +
    "\147\032\157\034\163\035\222\054\155\001\001\000\002" +
    "\001\001\000\004\164\225\001\001\000\002\001\001\000" +
    "\016\024\226\030\147\032\157\034\163\035\167\054\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\156" +
    "\231\001\001\000\022\024\233\027\232\030\147\032\157" +
    "\034\163\035\167\054\155\062\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\163\237\001\001\000\016\024\240\030\147\032" +
    "\157\034\163\035\167\054\155\001\001\000\002\001\001" +
    "\000\004\054\242\001\001\000\006\032\243\063\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\161\247" +
    "\001\001\000\002\001\001\000\016\024\250\030\147\032" +
    "\157\034\163\035\167\054\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\024\261\030\147\032\157\033\262\034" +
    "\163\035\167\054\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\265\001\001\000\002\001\001\000" +
    "\016\024\266\030\147\032\157\034\163\035\167\054\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\165\275" +
    "\001\001\000\002\001\001\000\016\024\276\030\147\032" +
    "\157\034\163\035\167\054\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\166\301\001\001\000\016\024" +
    "\303\030\147\032\157\034\163\035\167\054\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\201\305\001" +
    "\001\000\012\036\136\045\306\047\115\054\135\001\001" +
    "\000\002\001\001\000\004\202\310\001\001\000\010\023" +
    "\313\037\312\107\311\001\001\000\030\014\102\026\314" +
    "\036\127\040\117\042\120\043\107\044\126\047\115\050" +
    "\131\054\121\055\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\316\001\001\000" +
    "\006\032\243\063\317\001\001\000\002\001\001\000\004" +
    "\056\324\001\001\000\014\030\147\032\157\034\163\035" +
    "\322\054\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\333\001\001\000\016\024\334\030\147\032\157\034" +
    "\163\035\167\054\155\001\001\000\002\001\001\000\016" +
    "\024\336\030\147\032\157\034\163\035\167\054\155\001" +
    "\001\000\002\001\001\000\014\030\147\032\157\034\163" +
    "\035\340\054\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\122\362\001\001\000\004" +
    "\125\360\001\001\000\002\001\001\000\004\124\356\001" +
    "\001\000\002\001\001\000\004\121\354\001\001\000\004" +
    "\123\352\001\001\000\016\024\353\030\147\032\157\034" +
    "\163\035\167\054\155\001\001\000\002\001\001\000\016" +
    "\024\355\030\147\032\157\034\163\035\167\054\155\001" +
    "\001\000\002\001\001\000\016\024\357\030\147\032\157" +
    "\034\163\035\167\054\155\001\001\000\002\001\001\000" +
    "\016\024\361\030\147\032\157\034\163\035\167\054\155" +
    "\001\001\000\002\001\001\000\016\024\363\030\147\032" +
    "\157\034\163\035\167\054\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\367\001" +
    "\001\000\014\030\147\032\157\034\163\035\370\054\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\374\001\001\000\006\047\376\061\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\u0101\001\001\000\002\001\001\000\016\024\u0102\030\147" +
    "\032\157\034\163\035\167\054\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u0106\001\001\000\002" +
    "\001\001\000\016\024\u0107\030\147\032\157\034\163\035" +
    "\167\054\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\313\037\u010a\107\311\001\001\000\004\175" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\176\u010e\001\001\000\016\024\u010f\030\147\032\157\034" +
    "\163\035\167\054\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\u0121\001\001\000" +
    "\004\127\u011f\001\001\000\002\001\001\000\004\131\u011d" +
    "\001\001\000\004\126\u011b\001\001\000\002\001\001\000" +
    "\004\130\u0119\001\001\000\016\024\u011a\030\147\032\157" +
    "\034\163\035\167\054\155\001\001\000\002\001\001\000" +
    "\016\024\u011c\030\147\032\157\034\163\035\167\054\155" +
    "\001\001\000\002\001\001\000\016\024\u011e\030\147\032" +
    "\157\034\163\035\167\054\155\001\001\000\002\001\001" +
    "\000\016\024\u0120\030\147\032\157\034\163\035\167\054" +
    "\155\001\001\000\002\001\001\000\016\024\u0122\030\147" +
    "\032\157\034\163\035\167\054\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\167\u0126" +
    "\001\001\000\016\024\u0127\030\147\032\157\034\163\035" +
    "\167\054\155\001\001\000\002\001\001\000\004\170\u0129" +
    "\001\001\000\012\023\313\037\u012a\041\u012b\107\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\171\u012d" +
    "\001\001\000\010\023\313\037\u012e\107\311\001\001\000" +
    "\002\001\001\000\004\203\u0130\001\001\000\016\024\u0131" +
    "\030\147\032\157\034\163\035\167\054\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\204\u0134\001\001" +
    "\000\006\051\u0136\052\u0135\001\001\000\002\001\001\000" +
    "\006\052\u013f\053\u013e\001\001\000\004\205\u0138\001\001" +
    "\000\016\024\u0139\030\147\032\157\034\163\035\167\054" +
    "\155\001\001\000\002\001\001\000\004\206\u013b\001\001" +
    "\000\004\025\u013c\001\001\000\004\110\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\207\u0142\001\001\000\004\025\u0143\001" +
    "\001\000\004\110\100\001\001\000\004\054\u0145\001\001" +
    "\000\006\047\376\061\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\u0149\030\147\032\157\034\163" +
    "\035\167\054\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\u014f\030\147\032\157\034\163\035" +
    "\167\054\155\001\001\000\002\001\001\000\016\024\u0151" +
    "\030\147\032\157\034\163\035\167\054\155\001\001\000" +
    "\002\001\001\000\004\172\u0153\001\001\000\016\024\u0154" +
    "\030\147\032\157\034\163\035\167\054\155\001\001\000" +
    "\002\001\001\000\004\173\u0156\001\001\000\010\023\313" +
    "\037\u0157\107\311\001\001\000\002\001\001\000\004\111" +
    "\u0164\001\001\000\002\001\001\000\004\117\u0162\001\001" +
    "\000\004\112\u015c\001\001\000\004\015\u015d\001\001\000" +
    "\002\001\001\000\004\076\u015f\001\001\000\016\024\u0160" +
    "\030\147\032\157\034\163\035\167\054\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\u0163\030\147" +
    "\032\157\034\163\035\167\054\155\001\001\000\002\001" +
    "\001\000\004\015\u0168\001\001\000\004\120\u0166\001\001" +
    "\000\016\024\u0167\030\147\032\157\034\163\035\167\054" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\u0176\001\001\000\002\001\001\000" +
    "\004\074\u0172\001\001\000\004\073\u016e\001\001\000\004" +
    "\015\u016f\001\001\000\004\060\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\u0173\030\147\032\157" +
    "\034\163\035\167\054\155\001\001\000\002\001\001\000" +
    "\004\077\u017b\001\001\000\004\075\u0179\001\001\000\004" +
    "\015\u0177\001\001\000\004\060\u0178\001\001\000\002\001" +
    "\001\000\016\024\u017a\030\147\032\157\034\163\035\167" +
    "\054\155\001\001\000\002\001\001\000\012\014\063\017" +
    "\060\020\u017c\021\061\001\001\000\002\001\001\000\004" +
    "\100\u017e\001\001\000\004\023\u017f\001\001\000\002\001" +
    "\001\000\004\103\u0181\001\001\000\012\014\063\017\060" +
    "\020\u0182\021\061\001\001\000\002\001\001\000\004\104" +
    "\u0184\001\001\000\004\023\u0185\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\u018b\066" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbolActual() { 
        return this.cur_token;
    }

	@Override
	public void syntax_error(Symbol s) { 
		java.error("Símbolo '" + s.value + "' fuera de contexto", archivo, s.left + 1);
//		report_error("ERR Sintaxis. Archivo: " + archivo + " Linea: " + (s.left + 1) + 
//				". Texto: \"" + s.value + "\"", null);
	}

	@Override
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("La Cadena: \"" + s.value + "\" en la linea: " + 
				(s.left+1) + ", columna: " + s.right + " esta fuera de contexto!!!!!" );
	}

	public ParserCup(File file, Formador java) throws Exception {
		super(new LexicoLex(file, java));
		this.archivo = file.getName();
		this.java = java;
	}
	
	protected String archivo;	
	protected Formador java;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


	protected static int num = 0;
	protected static String tabs(){
		String ret = "";
		for(int i = 0; i < num; i++){
			ret += "\t";
		}
		return ret;
	}
	
	private void error(){
		parser.syntax_error(parser.symbolActual());
	}

	private void error(String error, int linea){
		java().error(error, parser.archivo, linea);
	}
	
	private void error(String symbol){
		parser.syntax_error(new Symbol(ParserSym.error, 
				parser.symbolActual().left, 0, symbol));
	}
	
	protected void add(String txt){
		java().add(txt);
	}
	
	protected Formador java (){ return parser.java; }


  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // default ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("default",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // default ::= DEFAULT DOSPUNTOS NT$83 sents 
            {
              String RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 num--; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("default",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$83 ::= 
            {
              String RESULT =null;
 add("default :"); num++; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$83",133, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // case ::= CASE NT$81 valor DOSPUNTOS NT$82 sents 
            {
              String RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 num--; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // NT$82 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add(":"); add("\n"); num++; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$82",132, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$81 ::= 
            {
              String RESULT =null;
 add(tabs()); add("case "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$81",131, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cases ::= case 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cases ::= cases case 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cases",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // switchcase ::= SWITCH PAREN NT$79 valor TESIS LLA NT$80 cases default VES 
            {
              String RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 add(tabs() + "}\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switchcase",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$80 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
 add(") {\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$80",130, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$79 ::= 
            {
              String RESULT =null;
 add("switch ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$79",129, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // _asigna ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_asigna",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // _asigna ::= asigna 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_asigna",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // for ::= FOR PAREN NT$75 _asigna PUNTOCOMA NT$76 valor PUNTOCOMA NT$77 _asigna TESIS NT$78 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(s != null) add("\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$78 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$78",128, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$77 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add("; "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$77",127, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$76 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add("; "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$76",126, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$75 ::= 
            {
              String RESULT =null;
 add("for ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$75",125, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // dowhile ::= DO NT$72 sentencias NT$73 WHILE PAREN NT$74 valor TESIS 
            {
              String RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dowhile",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$74 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
 add("while ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$74",124, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$73 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 add(s == null ? tabs() : " "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$73",123, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$72 ::= 
            {
              String RESULT =null;
 add("do "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$72",122, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // while ::= WHILE PAREN NT$70 valor TESIS NT$71 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(s != null) add("\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$71 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add(") "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$71",121, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$70 ::= 
            {
              String RESULT =null;
 add("while ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$70",120, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // else ::= sentencias 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // else ::= else ELSE NT$69 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(s != null) add("\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$69 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 RESULT = "else"; add(e == null ? tabs() : " "); add("else "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$69",119, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ifelse ::= IF PAREN NT$67 valor TESIS NT$68 else 
            {
              String RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(e == null || !e.toString().equals("else")) add("\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ifelse",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$68 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add(") "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$68",118, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$67 ::= 
            {
              String RESULT =null;
 add("if ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$67",117, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // lfuncion ::= ID PUNTO ID PAREN NT$66 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lfuncion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$66 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i1 + "." + i2 + " ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$66",116, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // lfuncion ::= ID PAREN NT$65 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lfuncion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$65 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$65",115, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // lfuncion ::= lfuncion COMA NT$64 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lfuncion",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$64 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$64",114, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // lclase ::= valor 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lclase",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // lclase ::= lclase COMA NT$63 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lclase",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$63 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$63",113, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // _lclase ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_lclase",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // _lclase ::= lclase 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_lclase",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // _lmatriz ::= COR NT$62 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_lmatriz",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$62 ::= 
            {
              String RESULT =null;
 add("["); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$62",112, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // _lmatriz ::= _lmatriz COMA NT$61 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_lmatriz",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$61 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$61",111, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // __lmatriz ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("__lmatriz",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // __lmatriz ::= _lmatriz CHETE 
            {
              String RESULT =null;
		 add("]"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("__lmatriz",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // exp ::= NULL 
            {
              String RESULT =null;
		 add("null"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // exp ::= MINUSMINUS NT$60 id __lmatriz 
            {
              String RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$60 ::= 
            {
              String RESULT =null;
 add("-- "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$60",110, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // exp ::= PLUSPLUS NT$59 id __lmatriz 
            {
              String RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$59 ::= 
            {
              String RESULT =null;
 add("++ "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$59",109, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // exp ::= _lmatriz CHETE MINUSMINUS 
            {
              String RESULT =null;
		 add("] --"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // exp ::= _lmatriz CHETE PLUSPLUS 
            {
              String RESULT =null;
		 add("] ++"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // exp ::= _lmatriz CHETE 
            {
              String RESULT =null;
		 add("]"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // exp ::= lfuncion TESIS 
            {
              String RESULT =null;
		 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // exp ::= ID PUNTO ID PAREN TESIS 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add(i1 + "." + i2 + " ()"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // exp ::= ID PAREN TESIS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add(i + " ()"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // exp ::= NEW ID PAREN NT$58 _lclase TESIS 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$58 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add("new " + i + "("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$58",108, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // exp ::= id MINUSMINUS 
            {
              String RESULT =null;
		 add(" --"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // exp ::= id PLUSPLUS 
            {
              String RESULT =null;
		 add(" ++"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // exp ::= PAREN NT$56 tipoc TESIS NT$57 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$57 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$57",107, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$56 ::= 
            {
              String RESULT =null;
 add("("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$56",106, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // exp ::= COMILLAS COMILLAS 
            {
              String RESULT =null;
		 add("\"\""); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // exp ::= COMILLAS VSTRING COMILLAS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 add("\"" + v + "\""); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // exp ::= COMILLA VCHAR COMILLA 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 add("'" + v + "'"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // exp ::= VBOOLEAN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exp ::= VFLOAT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exp ::= VINT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exp ::= id 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tupla ::= valor 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tupla",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // tupla ::= tupla COMA NT$55 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tupla",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$55 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$55",105, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // val ::= val XOR NT$54 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$54 ::= 
            {
              String RESULT =null;
 add(" ^ "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$54",104, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // val ::= val AND NT$53 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$53 ::= 
            {
              String RESULT =null;
 add(" && "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$53",103, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // val ::= val OR NT$52 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$52 ::= 
            {
              String RESULT =null;
 add(" || "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$52",102, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // val ::= val COMPARA NT$51 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$51 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 add(" " + c + " "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$51",101, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // val ::= exp 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // val ::= PAREN NT$50 val TESIS 
            {
              String RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add(")"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$50 ::= 
            {
              String RESULT =null;
 add("("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$50",100, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // val ::= MENOS NT$49 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$49 ::= 
            {
              String RESULT =null;
 add("- "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$49",99, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // val ::= val MOD NT$48 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$48 ::= 
            {
              String RESULT =null;
 add(" % "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$48",98, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // val ::= val DIV NT$47 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$47 ::= 
            {
              String RESULT =null;
 add(" / "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$47",97, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // val ::= val MUL NT$46 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$46 ::= 
            {
              String RESULT =null;
 add(" * "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$46",96, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // val ::= val MENOS NT$45 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$45 ::= 
            {
              String RESULT =null;
 add(" - "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$45",95, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // val ::= val MAS NT$44 val 
            {
              String RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("val",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$44 ::= 
            {
              String RESULT =null;
 add(" + "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$44",94, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valor ::= error 
            {
              String RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valor ::= LLA NT$43 tupla VES 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add("}"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$43 ::= 
            {
              String RESULT =null;
 add("{"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$43",93, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valor ::= val 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // matriz_ ::= COR NT$42 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz_",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$42 ::= 
            {
              String RESULT =null;
 add("["); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$42",92, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // matriz_ ::= matriz_ COMA NT$41 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz_",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$41 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$41",91, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // matriz__ ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz__",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // matriz__ ::= matriz_ CHETE 
            {
              String RESULT =null;
		 add("]"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz__",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // asigna ::= MINUSMINUS NT$40 id matriz__ 
            {
              String RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$40 ::= 
            {
              String RESULT =null;
 add("-- "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$40",90, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asigna ::= PLUSPLUS NT$39 id matriz__ 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$39 ::= 
            {
              String RESULT =null;
 add("++ "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$39",89, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // asigna ::= matriz_ CHETE MINUSMINUS 
            {
              String RESULT =null;
		 add("] --"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asigna ::= matriz_ CHETE PLUSPLUS 
            {
              String RESULT =null;
		 add("] ++"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asigna ::= matriz_ CHETE MODIGUAL NT$38 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$38 ::= 
            {
              String RESULT =null;
 add("] %= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$38",88, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asigna ::= matriz_ CHETE MULIGUAL NT$37 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$37 ::= 
            {
              String RESULT =null;
 add("] *= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$37",87, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asigna ::= matriz_ CHETE MENOSIGUAL NT$36 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$36 ::= 
            {
              String RESULT =null;
 add("] -= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$36",86, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asigna ::= matriz_ CHETE MASIGUAL NT$35 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$35 ::= 
            {
              String RESULT =null;
 add("] += "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$35",85, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asigna ::= matriz_ CHETE ASIGNA NT$34 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$34 ::= 
            {
              String RESULT =null;
 add("] = "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$34",84, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asigna ::= id MINUSMINUS 
            {
              String RESULT =null;
		 add(" --"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asigna ::= id PLUSPLUS 
            {
              String RESULT =null;
		 add(" ++"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asigna ::= id MODIGUAL NT$33 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$33 ::= 
            {
              String RESULT =null;
 add(" %= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$33",83, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asigna ::= id MULIGUAL NT$32 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$32 ::= 
            {
              String RESULT =null;
 add(" *= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$32",82, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asigna ::= id MENOSIGUAL NT$31 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$31 ::= 
            {
              String RESULT =null;
 add(" -= "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$31",81, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asigna ::= id MASIGUAL NT$30 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$30 ::= 
            {
              String RESULT =null;
 add(" += "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$30",80, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asigna ::= id ASIGNA NT$29 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$29 ::= 
            {
              String RESULT =null;
 add(" = "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$29",79, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // id ::= THIS PUNTO ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add("this." + i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // id ::= ID PUNTO ID 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(id1 + "." + id2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // matriz ::= ID COR NT$28 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$28 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ["); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$28",78, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // matriz ::= matriz COMA NT$27 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("matriz",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$27 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$27",77, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // func ::= id PAREN NT$26 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$26 ::= 
            {
              String RESULT =null;
 add("("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$26",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func ::= func COMA NT$25 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("func",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$25 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$25",75, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sent ::= error PUNTOCOMA 
            {
              String RESULT =null;
		 error(); add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sent ::= PRINT PAREN NT$24 val TESIS PUNTOCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 add(");\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$24 ::= 
            {
              String RESULT =null;
 add("print ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$24",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sent ::= RETURN NT$23 valor PUNTOCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$23 ::= 
            {
              String RESULT =null;
 add("return "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$23",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sent ::= BREAK PUNTOCOMA 
            {
              String RESULT =null;
		 add("break;\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sent ::= switchcase 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sent ::= for 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sent ::= dowhile PUNTOCOMA 
            {
              String RESULT =null;
		 add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sent ::= while 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sent ::= ifelse 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sent ::= func TESIS PUNTOCOMA 
            {
              String RESULT =null;
		 add(");\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sent ::= id PAREN TESIS PUNTOCOMA 
            {
              String RESULT =null;
		 add("();\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sent ::= asigna PUNTOCOMA 
            {
              String RESULT =null;
		 add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sent ::= tipo matriz CHETE NT$22 atrasigna PUNTOCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$22 ::= 
            {
              String RESULT =null;
 add("]"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$22",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sent ::= tipo ID NT$21 atrasigna PUNTOCOMA 
            {
              String RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$21 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 add(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$21",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sents ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sents",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sents ::= sents NT$20 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sents",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$20 ::= 
            {
              String RESULT =null;
 add(tabs()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$20",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencias ::= bloque 
            {
              String RESULT =null;
		 RESULT = "ola q ase"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= NT$19 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 num--; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentencias",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$19 ::= 
            {
              String RESULT =null;
 num++; add("\n" + tabs()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$19",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloque ::= LLA NT$18 sents VES 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 num--; add(tabs() + "}"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$18 ::= 
            {
              String RESULT =null;
 add("{\n"); num++; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$18",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // apunt ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("apunt",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // apunt ::= APUNTADOR 
            {
              String RESULT =null;
		 add("&"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("apunt",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decparam ::= tipo apunt ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparam",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decparams ::= decparam 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparams",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decparams ::= decparams COMA NT$17 decparam 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparams",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$17 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$17",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _decparams ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_decparams",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _decparams ::= decparams 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_decparams",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcion ::= error 
            {
              String RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcion ::= acceso ID PAREN NT$15 _decparams TESIS NT$16 bloque 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 add("\n\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
 add(") "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$16",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$15 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$15",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion ::= acceso VOID ID PAREN NT$13 _decparams TESIS NT$14 bloque 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 add("\n\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
 add(") "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$14",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$13 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$13",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= acceso tipo ID PAREN NT$11 _decparams TESIS NT$12 bloque 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		 add("\n\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
 add(") "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$12",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$11",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atrasigna ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atrasigna",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atrasigna ::= ASIGNA NT$10 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atrasigna",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              String RESULT =null;
 add(" = "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$10",60, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoc ::= FLOAT 
            {
              String RESULT =null;
		 add("float "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoc ::= BOOLEAN 
            {
              String RESULT =null;
		 add("boolean "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoc ::= CHAR 
            {
              String RESULT =null;
		 add("char "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoc ::= STRING 
            {
              String RESULT =null;
		 add("String "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoc ::= INT 
            {
              String RESULT =null;
		 add("int "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(id + " "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 add("float "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		 add("boolean "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= CHAR 
            {
              String RESULT =null;
		 add("char "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= STRING 
            {
              String RESULT =null;
		 add("String "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo ::= INT 
            {
              String RESULT =null;
		 add("int "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lmatriz ::= ID COR NT$9 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lmatriz",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 add(i + " ["); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$9",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lmatriz ::= lmatriz COMA NT$8 valor 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lmatriz",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              String RESULT =null;
 add(", "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$8",58, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // puntocoma ::= 
            {
              String RESULT =null;
		 RESULT = "ola q ase"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("puntocoma",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // puntocoma ::= PUNTOCOMA 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("puntocoma",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atributo ::= error PUNTOCOMA 
            {
              String RESULT =null;
		 error(); add(";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atributo ::= acceso tipo lmatriz CHETE NT$7 atrasigna puntocoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(";\n"); if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              String RESULT =null;
 add("]"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atributo ::= acceso tipo ID NT$6 atrasigna puntocoma 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add(";\n"); if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 add(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentc ::= funcion 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentc ::= atributo 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentsc ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentsc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentsc ::= sentsc NT$5 sentc 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentsc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              String RESULT =null;
 add(tabs()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _extends ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_extends",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _extends ::= EXTENDS ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 add("extends " + i + " "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_extends",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // acceso ::= 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // acceso ::= PROTECTED 
            {
              String RESULT =null;
		 add("protected "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // acceso ::= PRIVATE 
            {
              String RESULT =null;
		 add("private "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // acceso ::= PUBLIC 
            {
              String RESULT =null;
		 add("public "); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ves ::= 
            {
              String RESULT =null;
		 RESULT = "ola q ase"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ves",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ves ::= VES 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ves",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // defclase ::= NT$2 acceso CLASS ID NT$3 _extends LLA NT$4 sentsc ves 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
			num -- ;
			add("}");
	 		if(v != null) error("Se esperaba '}'", vleft + 1); 
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defclase",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
 add(" {\n"); num++; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 add(c + " " + i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              String RESULT =null;
 add(tabs()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _import ::= error PUNTOCOMA 
            {
              String RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _import ::= IMPORT ID PUNTOCOMA 
            {
              String RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 add("import " + j + ";\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // imports ::= _import 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // imports ::= imports _import 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L ::= error 
            {
              String RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= defclase 
            {
              String RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= imports NT$1 defclase 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              String RESULT =null;
 add("\n"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= NT$0 L 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
 num = 0; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


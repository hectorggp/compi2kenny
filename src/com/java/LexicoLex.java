/* The following code was generated by JFlex 1.4.3 on 24/05/13 0:00 */


package com.java;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/05/13 0:00 from the specification file
 * <tt>/home/hectorggp/workspace/Compi2Proyecto02/src/com/java/Lex.lex</tt>
 */
class LexicoLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMENTM = 8;
  public static final int STRING = 2;
  public static final int COMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\1\1\2\1\0\1\1\1\2\16\4\4\0\1\1\1\31"+
    "\1\34\1\0\1\3\1\22\1\26\1\33\1\6\1\7\1\20\1\16"+
    "\1\23\1\17\1\15\1\21\12\5\1\24\1\12\1\32\1\25\1\32"+
    "\2\0\22\3\1\40\7\3\1\13\1\0\1\14\1\27\1\3\1\0"+
    "\1\45\1\46\1\43\1\56\1\51\1\52\1\42\1\44\1\35\1\3"+
    "\1\57\1\50\1\60\1\36\1\47\1\61\1\3\1\41\1\54\1\37"+
    "\1\53\1\63\1\55\1\62\2\3\1\10\1\30\1\11\1\0\41\4"+
    "\2\0\4\3\4\0\1\3\2\0\1\4\7\0\1\3\4\0\1\3"+
    "\5\0\27\3\1\0\37\3\1\0\u01ca\3\4\0\14\3\16\0\5\3"+
    "\7\0\1\3\1\0\1\3\21\0\160\4\5\3\1\0\2\3\2\0"+
    "\4\3\10\0\1\3\1\0\3\3\1\0\1\3\1\0\24\3\1\0"+
    "\123\3\1\0\213\3\1\0\5\4\2\0\236\3\11\0\46\3\2\0"+
    "\1\3\7\0\47\3\11\0\55\4\1\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\10\0\33\3\5\0\3\3\15\0\4\4\7\0"+
    "\1\3\4\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4\143\3"+
    "\1\0\1\3\10\4\1\0\6\4\2\3\2\4\1\0\4\4\2\3"+
    "\12\4\3\3\2\0\1\3\17\0\1\4\1\3\1\4\36\3\33\4"+
    "\2\0\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0"+
    "\1\3\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4"+
    "\22\0\31\3\3\4\244\0\4\4\66\3\3\4\1\3\22\4\1\3"+
    "\7\4\12\3\2\4\2\0\12\4\1\0\7\3\1\0\7\3\1\0"+
    "\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\1\3\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0"+
    "\3\4\1\3\10\0\1\4\4\0\2\3\1\0\3\3\2\4\2\0"+
    "\12\4\4\3\7\0\1\3\5\0\3\4\1\0\6\3\4\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0\1\4"+
    "\7\0\4\3\1\0\1\3\7\0\14\4\3\3\1\4\13\0\3\4"+
    "\1\0\11\3\1\0\3\3\1\0\26\3\1\0\7\3\1\0\2\3"+
    "\1\0\5\3\2\0\1\4\1\3\10\4\1\0\3\4\1\0\3\4"+
    "\2\0\1\3\17\0\2\3\2\4\2\0\12\4\1\0\1\3\17\0"+
    "\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\5\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0"+
    "\3\4\10\0\2\4\4\0\2\3\1\0\3\3\2\4\2\0\12\4"+
    "\1\0\1\3\20\0\1\4\1\3\1\0\6\3\3\0\3\3\1\0"+
    "\4\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0"+
    "\3\3\3\0\14\3\4\0\5\4\3\0\3\4\1\0\4\4\2\0"+
    "\1\3\6\0\1\4\16\0\12\4\11\0\1\3\7\0\3\4\1\0"+
    "\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0\2\3"+
    "\6\0\2\3\2\4\2\0\12\4\22\0\2\4\1\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4\1\3"+
    "\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3\1\0"+
    "\2\3\2\4\2\0\12\4\1\0\2\3\17\0\2\4\1\0\10\3"+
    "\1\0\3\3\1\0\51\3\2\0\1\3\7\4\1\0\3\4\1\0"+
    "\4\4\1\3\10\0\1\4\10\0\2\3\2\4\2\0\12\4\12\0"+
    "\6\3\2\0\2\4\1\0\22\3\3\0\30\3\1\0\11\3\1\0"+
    "\1\3\2\0\7\3\3\0\1\4\4\0\6\4\1\0\1\4\1\0"+
    "\10\4\22\0\2\4\15\0\60\3\1\4\2\3\7\4\4\0\10\3"+
    "\10\4\1\0\12\4\47\0\2\3\1\0\1\3\2\0\2\3\1\0"+
    "\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1\4\2\3\6\4"+
    "\1\0\2\4\1\3\2\0\5\3\1\0\1\3\1\0\6\4\2\0"+
    "\12\4\2\0\2\3\42\0\1\3\27\0\2\4\6\0\12\4\13\0"+
    "\1\4\1\0\1\4\1\0\1\4\4\0\2\4\10\3\1\0\44\3"+
    "\4\0\24\4\1\0\2\4\5\3\13\4\1\0\44\4\11\0\1\4"+
    "\71\0\53\3\24\4\1\3\12\4\6\0\6\3\4\4\4\3\3\4"+
    "\1\3\3\4\2\3\7\4\3\3\4\4\15\3\14\4\1\3\17\4"+
    "\2\0\46\3\12\0\53\3\1\0\1\3\3\0\u0149\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\51\3\1\0\4\3"+
    "\2\0\41\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\17\3\1\0\71\3\1\0\4\3\2\0\103\3\2\0\3\4"+
    "\40\0\20\3\20\0\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3"+
    "\5\0\113\3\3\0\3\3\17\0\15\3\1\0\4\3\3\4\13\0"+
    "\22\3\3\4\13\0\22\3\2\4\14\0\15\3\1\0\3\3\1\0"+
    "\2\4\14\0\64\3\40\4\3\0\1\3\3\0\2\3\1\4\2\0"+
    "\12\4\41\0\3\4\2\0\12\4\6\0\130\3\10\0\51\3\1\4"+
    "\1\3\5\0\106\3\12\0\35\3\3\0\14\4\4\0\14\4\12\0"+
    "\12\4\36\3\2\0\5\3\13\0\54\3\4\0\21\4\7\3\2\4"+
    "\6\0\12\4\46\0\27\3\5\4\4\0\65\3\12\4\1\0\35\4"+
    "\2\0\13\4\6\0\12\4\15\0\1\3\130\0\5\4\57\3\21\4"+
    "\7\3\4\0\12\4\21\0\11\4\14\0\3\4\36\3\12\4\3\0"+
    "\2\3\12\4\6\0\46\3\16\4\14\0\44\3\24\4\10\0\12\4"+
    "\3\0\3\3\12\4\44\3\122\0\3\4\1\0\25\4\4\3\1\4"+
    "\4\3\1\4\15\0\300\3\47\4\25\0\4\4\u0116\3\2\0\6\3"+
    "\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3"+
    "\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\16\0\5\4\32\0\5\4\20\0\2\3"+
    "\23\0\1\3\13\0\5\4\5\0\6\4\1\0\1\3\15\0\1\3"+
    "\20\0\15\3\3\0\32\3\26\0\15\4\4\0\1\4\3\0\14\4"+
    "\21\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3"+
    "\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\13\3"+
    "\2\0\4\3\5\0\5\3\4\0\1\3\21\0\51\3\u0a77\0\57\3"+
    "\1\0\57\3\1\0\205\3\6\0\4\3\3\4\16\0\46\3\12\0"+
    "\66\3\11\0\1\3\17\0\1\4\27\3\11\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3"+
    "\1\0\7\3\1\0\40\4\57\0\1\3\u01d5\0\3\3\31\0\11\3"+
    "\6\4\1\0\5\3\2\0\5\3\4\0\126\3\2\0\2\4\2\0"+
    "\3\3\1\0\132\3\1\0\4\3\5\0\51\3\3\0\136\3\21\0"+
    "\33\3\65\0\20\3\u0200\0\u19b6\3\112\0\u51cc\3\64\0\u048d\3\103\0"+
    "\56\3\2\0\u010d\3\3\0\20\3\12\4\2\3\24\0\57\3\1\4"+
    "\14\0\2\4\1\0\31\3\10\0\120\3\2\4\45\0\11\3\2\0"+
    "\147\3\2\0\4\3\1\0\2\3\16\0\12\3\120\0\10\3\1\4"+
    "\3\3\1\4\4\3\1\4\27\3\5\4\20\0\1\3\7\0\64\3"+
    "\14\0\2\4\62\3\21\4\13\0\12\4\6\0\22\4\6\3\3\0"+
    "\1\3\4\0\12\4\34\3\10\4\2\0\27\3\15\4\14\0\35\3"+
    "\3\0\4\4\57\3\16\4\16\0\1\3\12\4\46\0\51\3\16\4"+
    "\11\0\3\3\1\4\10\3\2\4\2\0\12\4\6\0\27\3\3\0"+
    "\1\3\1\4\4\0\60\3\1\4\1\3\3\4\2\3\2\4\5\3"+
    "\2\4\1\3\1\4\1\3\30\0\3\3\43\0\6\3\2\0\6\3"+
    "\2\0\6\3\11\0\7\3\1\0\7\3\221\0\43\3\10\4\1\0"+
    "\2\4\2\0\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0"+
    "\u012e\3\2\0\76\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0"+
    "\1\3\1\4\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0"+
    "\66\3\50\0\15\3\3\0\20\4\20\0\7\4\14\0\2\3\30\0"+
    "\3\3\31\0\1\3\6\0\5\3\1\0\207\3\2\0\1\4\4\0"+
    "\1\3\13\0\12\4\7\0\32\3\4\0\1\3\1\0\32\3\13\0"+
    "\131\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0"+
    "\2\3\3\0\2\3\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\2"+
    "\1\1\1\27\1\30\1\31\16\3\1\32\1\33\1\34"+
    "\1\35\1\36\1\2\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\27\1\47\1\50\1\3"+
    "\1\51\23\3\1\52\4\3\1\36\1\53\1\54\1\3"+
    "\1\55\15\3\1\56\11\3\1\57\1\60\1\61\2\3"+
    "\1\62\1\63\3\3\1\64\11\3\1\65\3\3\1\66"+
    "\1\67\2\3\1\70\1\3\1\71\1\3\1\72\3\3"+
    "\1\73\1\74\1\75\2\3\1\76\3\3\1\77\1\100"+
    "\1\101\1\102\1\103\2\3\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u0104"+
    "\0\u0104\0\u02d8\0\u030c\0\u0104\0\u0340\0\u02d8\0\u02d8\0\u0104"+
    "\0\u0104\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0104\0\u0104\0\u0104\0\u0680\0\u06b4\0\u06e8\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104"+
    "\0\u0138\0\u071c\0\u016c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u016c\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0104\0\u06e8\0\u016c\0\u0bfc\0\u016c"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u016c\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u016c"+
    "\0\u016c\0\u016c\0\u10a8\0\u10dc\0\u016c\0\u016c\0\u1110\0\u1144"+
    "\0\u1178\0\u016c\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u016c\0\u1380\0\u13b4\0\u13e8\0\u016c"+
    "\0\u016c\0\u141c\0\u1450\0\u016c\0\u1484\0\u016c\0\u14b8\0\u016c"+
    "\0\u14ec\0\u1520\0\u1554\0\u016c\0\u016c\0\u016c\0\u1588\0\u15bc"+
    "\0\u016c\0\u15f0\0\u1624\0\u1658\0\u016c\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u168c\0\u16c0\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\11\1\47\2\11\1\50\2\11\1\51"+
    "\1\52\1\11\1\53\1\54\1\55\2\11\1\56\1\11"+
    "\1\57\34\60\1\61\27\60\33\62\1\63\30\62\2\7"+
    "\1\64\25\7\1\64\53\7\1\65\43\7\66\0\1\10"+
    "\25\0\1\10\36\0\3\11\27\0\27\11\5\0\1\12"+
    "\7\0\1\66\64\0\1\67\6\0\1\70\55\0\1\71"+
    "\5\0\1\72\63\0\1\73\56\0\1\74\1\75\67\0"+
    "\1\76\63\0\1\77\64\0\1\100\37\0\1\10\25\0"+
    "\1\101\36\0\3\11\27\0\1\11\1\102\13\11\1\103"+
    "\5\11\1\104\3\11\3\0\3\11\27\0\14\11\1\105"+
    "\1\11\1\106\10\11\3\0\3\11\27\0\4\11\1\107"+
    "\2\11\1\110\17\11\3\0\3\11\27\0\2\11\1\111"+
    "\24\11\3\0\3\11\27\0\14\11\1\112\12\11\3\0"+
    "\3\11\27\0\7\11\1\113\1\114\2\11\1\115\13\11"+
    "\3\0\3\11\27\0\4\11\1\116\5\11\1\117\14\11"+
    "\3\0\3\11\27\0\13\11\1\120\11\11\1\121\1\11"+
    "\3\0\3\11\27\0\10\11\1\122\1\11\1\123\1\124"+
    "\13\11\3\0\3\11\27\0\20\11\1\125\6\11\3\0"+
    "\3\11\27\0\7\11\1\126\17\11\3\0\3\11\27\0"+
    "\12\11\1\127\1\11\1\130\12\11\3\0\3\11\27\0"+
    "\4\11\1\131\11\11\1\132\10\11\3\0\3\11\27\0"+
    "\12\11\1\133\14\11\34\60\1\0\27\60\2\0\1\64"+
    "\25\0\1\64\54\0\1\134\47\0\1\135\61\0\3\11"+
    "\27\0\2\11\1\136\24\11\3\0\3\11\27\0\24\11"+
    "\1\137\2\11\3\0\3\11\27\0\20\11\1\140\6\11"+
    "\3\0\3\11\27\0\13\11\1\141\13\11\3\0\3\11"+
    "\27\0\16\11\1\142\10\11\3\0\3\11\27\0\1\143"+
    "\26\11\3\0\3\11\27\0\4\11\1\144\22\11\3\0"+
    "\3\11\27\0\2\11\1\145\24\11\3\0\3\11\27\0"+
    "\10\11\1\146\16\11\3\0\3\11\27\0\17\11\1\147"+
    "\7\11\3\0\3\11\27\0\10\11\1\150\16\11\3\0"+
    "\3\11\27\0\14\11\1\151\12\11\3\0\3\11\27\0"+
    "\12\11\1\152\14\11\3\0\3\11\27\0\17\11\1\153"+
    "\7\11\3\0\3\11\27\0\2\11\1\154\24\11\3\0"+
    "\3\11\27\0\13\11\1\155\13\11\3\0\3\11\27\0"+
    "\4\11\1\156\22\11\3\0\3\11\27\0\12\11\1\157"+
    "\14\11\3\0\3\11\27\0\1\160\26\11\3\0\3\11"+
    "\27\0\1\161\26\11\3\0\3\11\27\0\15\11\1\162"+
    "\11\11\3\0\3\11\27\0\1\163\11\11\1\164\14\11"+
    "\3\0\3\11\27\0\11\11\1\165\15\11\3\0\3\11"+
    "\27\0\1\166\26\11\3\0\3\11\27\0\12\11\1\167"+
    "\14\11\3\0\3\11\27\0\13\11\1\170\13\11\3\0"+
    "\3\11\27\0\14\11\1\171\12\11\3\0\3\11\27\0"+
    "\17\11\1\172\7\11\3\0\3\11\27\0\1\173\26\11"+
    "\3\0\3\11\27\0\16\11\1\174\10\11\3\0\3\11"+
    "\27\0\4\11\1\175\22\11\3\0\3\11\27\0\14\11"+
    "\1\176\12\11\3\0\3\11\27\0\17\11\1\177\7\11"+
    "\3\0\3\11\27\0\10\11\1\200\16\11\3\0\3\11"+
    "\27\0\13\11\1\201\13\11\3\0\3\11\27\0\14\11"+
    "\1\202\12\11\3\0\3\11\27\0\14\11\1\203\12\11"+
    "\3\0\3\11\27\0\17\11\1\142\7\11\3\0\3\11"+
    "\27\0\10\11\1\204\16\11\3\0\3\11\27\0\2\11"+
    "\1\205\24\11\3\0\3\11\27\0\13\11\1\206\13\11"+
    "\3\0\3\11\27\0\10\11\1\207\16\11\3\0\3\11"+
    "\27\0\1\11\1\210\24\11\1\211\3\0\3\11\27\0"+
    "\2\11\1\212\24\11\3\0\3\11\27\0\13\11\1\213"+
    "\13\11\3\0\3\11\27\0\21\11\1\214\5\11\3\0"+
    "\3\11\27\0\4\11\1\215\22\11\3\0\3\11\27\0"+
    "\1\11\1\216\25\11\3\0\3\11\27\0\4\11\1\217"+
    "\22\11\3\0\3\11\27\0\17\11\1\220\7\11\3\0"+
    "\3\11\27\0\22\11\1\221\4\11\3\0\3\11\27\0"+
    "\14\11\1\222\12\11\3\0\3\11\27\0\1\11\1\223"+
    "\25\11\3\0\3\11\27\0\2\11\1\224\24\11\3\0"+
    "\3\11\27\0\6\11\1\225\20\11\3\0\3\11\27\0"+
    "\14\11\1\226\12\11\3\0\3\11\27\0\16\11\1\227"+
    "\10\11\3\0\3\11\27\0\2\11\1\230\24\11\3\0"+
    "\3\11\27\0\10\11\1\231\16\11\3\0\3\11\27\0"+
    "\14\11\1\232\12\11\3\0\3\11\27\0\1\233\26\11"+
    "\3\0\3\11\27\0\2\11\1\234\24\11\3\0\3\11"+
    "\27\0\5\11\1\235\21\11\3\0\3\11\27\0\1\11"+
    "\1\236\25\11\3\0\3\11\27\0\10\11\1\237\16\11"+
    "\3\0\3\11\27\0\21\11\1\240\5\11\3\0\3\11"+
    "\27\0\7\11\1\241\17\11\3\0\3\11\27\0\13\11"+
    "\1\242\13\11\3\0\3\11\27\0\2\11\1\243\24\11"+
    "\3\0\3\11\27\0\6\11\1\244\20\11\3\0\3\11"+
    "\27\0\6\11\1\245\20\11\3\0\3\11\27\0\1\11"+
    "\1\246\25\11\3\0\3\11\27\0\17\11\1\247\7\11"+
    "\3\0\3\11\27\0\2\11\1\250\24\11\3\0\3\11"+
    "\27\0\14\11\1\251\12\11\3\0\3\11\27\0\2\11"+
    "\1\252\24\11\3\0\3\11\27\0\14\11\1\253\12\11"+
    "\3\0\3\11\27\0\21\11\1\254\5\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5876];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\3\1\10\11\5\1\2\11\2\1\1\11"+
    "\3\1\2\11\17\1\3\11\2\1\1\0\12\11\33\1"+
    "\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	String file;
	Java java;
	
	LexicoLex(java.io.Reader reader, String archivo) {
		this(reader);
		this.file = archivo;
	}
	
	LexicoLex(java.io.File file, Java java) throws java.io.FileNotFoundException {
		this(new java.io.InputStreamReader(new java.io.FileInputStream(file)));
		this.java = java;
		this.file = file.getName();
	}
	
	private Symbol sym(int type) {
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yychar, value);
	}

	private void error() {
		// System.err.println("Símbolo ilegal: '" + yytext() + "' en archivo " + file + ". Linea " + (yyline + 1));
		java.error("Error, símbolo '" + yytext() + "' inválido", file, yyline + 1);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoLex(java.io.Reader in) {
  
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicoLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return sym(ParserSym.CLASS);
          }
        case 69: break;
        case 38: 
          { return sym(ParserSym.MODIGUAL);
          }
        case 70: break;
        case 65: 
          { return sym(ParserSym.EXTENDS);
          }
        case 71: break;
        case 44: 
          { return sym(ParserSym.INT);
          }
        case 72: break;
        case 4: 
          { return sym(ParserSym.VINT);
          }
        case 73: break;
        case 39: 
          { return sym(ParserSym.AND);
          }
        case 74: break;
        case 33: 
          { return sym(ParserSym.MINUSMINUS);
          }
        case 75: break;
        case 36: 
          { yybegin(COMENTM);
          }
        case 76: break;
        case 16: 
          { return sym(ParserSym.DIV);
          }
        case 77: break;
        case 35: 
          { return sym(ParserSym.MULIGUAL);
          }
        case 78: break;
        case 60: 
          { return sym(ParserSym.STRING);
          }
        case 79: break;
        case 51: 
          { return sym(ParserSym.CASE);
          }
        case 80: break;
        case 28: 
          { return sym(ParserSym.VCHAR);
          }
        case 81: break;
        case 53: 
          { return sym(ParserSym.VOID);
          }
        case 82: break;
        case 31: 
          { return sym(ParserSym.PLUSPLUS);
          }
        case 83: break;
        case 52: 
          { return sym(ParserSym.ELSE);
          }
        case 84: break;
        case 14: 
          { return sym(ParserSym.MENOS);
          }
        case 85: break;
        case 17: 
          { return sym(ParserSym.MOD);
          }
        case 86: break;
        case 27: 
          { yybegin(YYINITIAL); return sym(ParserSym.COMILLAS);
          }
        case 87: break;
        case 32: 
          { return sym(ParserSym.MASIGUAL);
          }
        case 88: break;
        case 21: 
          { return sym(ParserSym.APUNTADOR);
          }
        case 89: break;
        case 68: 
          { return sym(ParserSym.PROTECTED);
          }
        case 90: break;
        case 63: 
          { return sym(ParserSym.PUBLIC);
          }
        case 91: break;
        case 66: 
          { return sym(ParserSym.DEFAULT);
          }
        case 92: break;
        case 2: 
          { /* ignorar */
          }
        case 93: break;
        case 10: 
          { return sym(ParserSym.COR);
          }
        case 94: break;
        case 37: 
          { yybegin(COMENT);
          }
        case 95: break;
        case 30: 
          { yybegin(YYINITIAL);
          }
        case 96: break;
        case 49: 
          { return sym(ParserSym.THIS);
          }
        case 97: break;
        case 20: 
          { return sym(ParserSym.ASIGNA);
          }
        case 98: break;
        case 18: 
          { return sym(ParserSym.COMA);
          }
        case 99: break;
        case 6: 
          { return sym(ParserSym.TESIS);
          }
        case 100: break;
        case 50: 
          { return sym(ParserSym.CHAR);
          }
        case 101: break;
        case 34: 
          { return sym(ParserSym.MENOSIGUAL);
          }
        case 102: break;
        case 64: 
          { return sym(ParserSym.BOOLEAN);
          }
        case 103: break;
        case 24: 
          { yybegin(CHAR); return sym(ParserSym.COMILLA);
          }
        case 104: break;
        case 26: 
          { return sym(ParserSym.VSTRING);
          }
        case 105: break;
        case 9: 
          { return sym(ParserSym.PUNTOCOMA);
          }
        case 106: break;
        case 25: 
          { yybegin(STRING); return sym(ParserSym.COMILLAS);
          }
        case 107: break;
        case 46: 
          { return sym(ParserSym.FOR);
          }
        case 108: break;
        case 55: 
          { return sym(ParserSym.BREAK);
          }
        case 109: break;
        case 5: 
          { return sym(ParserSym.PAREN);
          }
        case 110: break;
        case 23: 
          { return sym(ParserSym.COMPARA);
          }
        case 111: break;
        case 57: 
          { return sym(ParserSym.WHILE);
          }
        case 112: break;
        case 22: 
          { return sym(ParserSym.XOR);
          }
        case 113: break;
        case 29: 
          { yybegin(YYINITIAL); return sym(ParserSym.COMILLA);
          }
        case 114: break;
        case 7: 
          { return sym(ParserSym.LLA);
          }
        case 115: break;
        case 42: 
          { return sym(ParserSym.DO);
          }
        case 116: break;
        case 45: 
          { return sym(ParserSym.NEW);
          }
        case 117: break;
        case 61: 
          { return sym(ParserSym.RETURN);
          }
        case 118: break;
        case 56: 
          { return sym(ParserSym.FLOAT);
          }
        case 119: break;
        case 47: 
          { return sym(ParserSym.NULL);
          }
        case 120: break;
        case 41: 
          { return sym(ParserSym.IF);
          }
        case 121: break;
        case 13: 
          { return sym(ParserSym.MAS);
          }
        case 122: break;
        case 67: 
          { return sym(ParserSym.PRIVATE);
          }
        case 123: break;
        case 15: 
          { return sym(ParserSym.MUL);
          }
        case 124: break;
        case 58: 
          { return sym(ParserSym.PRINT);
          }
        case 125: break;
        case 43: 
          { return sym(ParserSym.VFLOAT);
          }
        case 126: break;
        case 40: 
          { return sym(ParserSym.OR);
          }
        case 127: break;
        case 1: 
          { error();
          }
        case 128: break;
        case 11: 
          { return sym(ParserSym.CHETE);
          }
        case 129: break;
        case 59: 
          { return sym(ParserSym.IMPORT);
          }
        case 130: break;
        case 19: 
          { return sym(ParserSym.DOSPUNTOS);
          }
        case 131: break;
        case 62: 
          { return sym(ParserSym.SWITCH);
          }
        case 132: break;
        case 8: 
          { return sym(ParserSym.VES);
          }
        case 133: break;
        case 48: 
          { return sym(ParserSym.VBOOLEAN);
          }
        case 134: break;
        case 3: 
          { return sym(ParserSym.ID);
          }
        case 135: break;
        case 12: 
          { return sym(ParserSym.PUNTO);
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	System.out.println("Fin del archivo");
	return new Symbol(ParserSym.EOF, "Fin de archivo");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

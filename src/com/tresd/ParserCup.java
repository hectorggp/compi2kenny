
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 02 21:19:18 CST 2014
//----------------------------------------------------

package com.tresd;

import java_cup.runtime.Symbol;
import java.io.File;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 02 21:19:18 CST 2014
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\264\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\067\002\000\002\005\006\000" +
    "\002\005\004\000\002\070\002\000\002\006\011\000\002" +
    "\035\003\000\002\035\002\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\002\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\022\006\000\002" +
    "\022\004\000\002\022\004\000\002\012\005\000\002\012" +
    "\006\000\002\021\003\000\002\021\002\000\002\040\006" +
    "\000\002\040\005\000\002\037\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\037" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\071\002\000\002\072" +
    "\002\000\002\013\013\000\002\073\002\000\002\074\002" +
    "\000\002\013\013\000\002\075\002\000\002\076\002\000" +
    "\002\013\012\000\002\013\003\000\002\045\003\000\002" +
    "\045\002\000\002\043\005\000\002\043\003\000\002\042" +
    "\005\000\002\044\003\000\002\044\002\000\002\077\002" +
    "\000\002\036\006\000\002\100\002\000\002\015\006\000" +
    "\002\025\003\000\002\025\003\000\002\016\004\000\002" +
    "\016\002\000\002\014\005\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\064\005\000\002\064\007" +
    "\000\002\053\004\000\002\056\006\000\002\056\006\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\003\000" +
    "\002\017\004\000\002\017\003\000\002\017\007\000\002" +
    "\017\004\000\002\024\005\000\002\024\003\000\002\057" +
    "\007\000\002\057\010\000\002\057\006\000\002\057\010" +
    "\000\002\057\005\000\002\057\003\000\002\057\005\000" +
    "\002\057\010\000\002\057\006\000\002\057\010\000\002" +
    "\054\006\000\002\054\003\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\060\004\000\002\066\003" +
    "\000\002\066\002\000\002\065\005\000\002\065\003\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\004\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\004\000\002\061\005\000\002\061\006\000" +
    "\002\061\003\000\002\061\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\063" +
    "\005\000\002\063\005\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\101\002\000\002\026\006\000" +
    "\002\026\003\000\002\102\002\000\002\041\010\000\002" +
    "\103\002\000\002\104\002\000\002\027\011\000\002\105" +
    "\002\000\002\106\002\000\002\030\012\000\002\107\002" +
    "\000\002\110\002\000\002\111\002\000\002\031\016\000" +
    "\002\023\003\000\002\023\003\000\002\032\003\000\002" +
    "\032\002\000\002\112\002\000\002\113\002\000\002\033" +
    "\014\000\002\052\004\000\002\052\003\000\002\114\002" +
    "\000\002\115\002\000\002\050\010\000\002\116\002\000" +
    "\002\051\006\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\010\003\007\052\013\054\006\001\002\000" +
    "\004\002\000\001\002\000\010\003\u013c\052\013\054\006" +
    "\001\002\000\004\064\u0139\001\002\000\006\002\ufffd\010" +
    "\u0138\001\002\000\004\002\ufffe\001\002\000\004\002\u0137" +
    "\001\002\000\010\003\ufffb\052\ufffb\054\ufffb\001\002\000" +
    "\004\064\014\001\002\000\006\006\ufff7\065\ufff7\001\002" +
    "\000\006\006\uffee\065\016\001\002\000\004\064\u0136\001" +
    "\002\000\004\006\020\001\002\000\034\002\uffec\003\uffec" +
    "\007\uffec\037\uffec\040\uffec\055\uffec\056\uffec\057\uffec\064" +
    "\uffec\066\uffec\070\uffec\071\uffec\072\uffec\001\002\000\034" +
    "\002\ufff4\003\031\007\022\037\ufff0\040\ufff0\055\024\056" +
    "\026\057\032\064\ufff0\066\ufff0\070\ufff0\071\ufff0\072\ufff0" +
    "\001\002\000\004\002\ufff5\001\002\000\040\002\uffe3\003" +
    "\uffe3\007\uffe3\010\u0132\022\u0133\037\uffe3\040\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\064\uffe3\066\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\001\002\000\020\037\ufff3\040\ufff3\064\ufff3\066\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\001\002\000\034\002\uffea\003" +
    "\uffea\007\uffea\037\uffea\040\uffea\055\uffea\056\uffea\057\uffea" +
    "\064\uffea\066\uffea\070\uffea\071\uffea\072\uffea\001\002\000" +
    "\020\037\ufff1\040\ufff1\064\ufff1\066\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\001\002\000\020\037\045\040\037\064\036\066" +
    "\042\070\043\071\044\072\041\001\002\000\004\002\ufff6" +
    "\001\002\000\036\002\uffc3\003\uffc3\007\uffc3\010\035\037" +
    "\uffc3\040\uffc3\055\uffc3\056\uffc3\057\uffc3\064\uffc3\066\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\001\002\000\020\037\ufff2\040" +
    "\ufff2\064\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002" +
    "\000\034\002\uffed\003\uffed\007\uffed\037\uffed\040\uffed\055" +
    "\uffed\056\uffed\057\uffed\064\uffed\066\uffed\070\uffed\071\uffed" +
    "\072\uffed\001\002\000\034\002\uffeb\003\uffeb\007\uffeb\037" +
    "\uffeb\040\uffeb\055\uffeb\056\uffeb\057\uffeb\064\uffeb\066\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\001\002\000\034\002\uffe7\003" +
    "\uffe7\007\uffe7\037\uffe7\040\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\064\uffe7\066\uffe7\070\uffe7\071\uffe7\072\uffe7\001\002\000" +
    "\006\004\u012b\064\uffd2\001\002\000\006\064\uffd6\067\uffd6" +
    "\001\002\000\004\064\u011e\001\002\000\006\064\uffd3\067" +
    "\uffd3\001\002\000\004\064\046\001\002\000\006\064\uffd5" +
    "\067\uffd5\001\002\000\006\064\uffd4\067\uffd4\001\002\000" +
    "\006\064\uffd7\067\uffd7\001\002\000\004\004\047\001\002" +
    "\000\020\005\uffc9\037\uffc9\040\uffc9\064\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\001\002\000\020\005\uffc1\037\045\040\037" +
    "\064\054\070\043\071\044\072\041\001\002\000\004\005" +
    "\uffc8\001\002\000\006\005\uffc2\023\061\001\002\000\006" +
    "\005\uffbf\023\uffbf\001\002\000\006\064\uffd2\067\uffd2\001" +
    "\002\000\006\064\uffbc\067\057\001\002\000\004\064\060" +
    "\001\002\000\004\064\uffbd\001\002\000\006\005\uffbe\023" +
    "\uffbe\001\002\000\016\037\045\040\037\064\054\070\043" +
    "\071\044\072\041\001\002\000\006\005\uffc0\023\uffc0\001" +
    "\002\000\004\005\064\001\002\000\004\006\065\001\002" +
    "\000\052\003\uffbb\007\uffbb\037\uffbb\040\uffbb\041\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\053\uffbb\060\uffbb" +
    "\061\uffbb\064\uffbb\070\uffbb\071\uffbb\072\uffbb\075\uffbb\076" +
    "\uffbb\101\uffbb\001\002\000\034\002\uffc7\003\uffc7\007\uffc7" +
    "\037\uffc7\040\uffc7\055\uffc7\056\uffc7\057\uffc7\064\uffc7\066" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\001\002\000\052\003\uffb4" +
    "\007\uffb4\037\uffb4\040\uffb4\041\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\051\uffb4\053\uffb4\060\uffb4\061\uffb4\064\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\075\uffb4\076\uffb4\101\uffb4\001" +
    "\002\000\052\003\116\007\100\037\045\040\037\041\104" +
    "\044\074\045\110\046\124\047\103\051\114\053\122\060" +
    "\076\061\117\064\106\070\043\071\044\072\041\075\115" +
    "\076\101\101\107\001\002\000\004\064\u011b\001\002\000" +
    "\004\012\u0104\001\002\000\006\010\uffb2\022\u0102\001\002" +
    "\000\004\004\374\001\002\000\004\010\373\001\002\000" +
    "\040\003\162\004\150\014\157\016\147\034\161\053\122" +
    "\062\166\063\165\064\156\073\160\075\115\076\101\100" +
    "\164\101\107\102\151\001\002\000\004\010\370\001\002" +
    "\000\034\002\uffba\003\uffba\007\uffba\037\uffba\040\uffba\055" +
    "\uffba\056\uffba\057\uffba\064\uffba\066\uffba\070\uffba\071\uffba" +
    "\072\uffba\001\002\000\010\053\122\064\156\101\107\001" +
    "\002\000\006\005\uff98\010\uff98\001\002\000\004\004\342" +
    "\001\002\000\004\004\335\001\002\000\006\007\333\023" +
    "\332\001\002\000\032\004\174\010\uff92\011\173\013\uff92" +
    "\022\uff92\025\uff92\026\uff92\027\uff92\030\uff92\064\uffd2\075" +
    "\uff92\076\uff92\001\002\000\004\013\322\001\002\000\052" +
    "\003\uff63\006\uff63\037\uff63\040\uff63\041\uff63\044\uff63\045" +
    "\uff63\046\uff63\047\uff63\051\uff63\053\uff63\060\uff63\061\uff63" +
    "\064\uff63\070\uff63\071\uff63\072\uff63\075\uff63\076\uff63\101" +
    "\uff63\001\002\000\060\003\uff69\007\uff69\037\uff69\040\uff69" +
    "\041\uff69\042\310\044\uff69\045\uff69\046\uff69\047\uff69\050" +
    "\uff69\051\uff69\053\uff69\060\uff69\061\uff69\064\uff69\070\uff69" +
    "\071\uff69\072\uff69\075\uff69\076\uff69\077\uff69\101\uff69\001" +
    "\002\000\060\003\uffa1\007\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\053\uffa1\060\uffa1\061\uffa1\064\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1\001\002\000" +
    "\060\003\uffa0\007\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\060\uffa0\061\uffa0\064\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\101\uffa0\001\002\000\004\010" +
    "\307\001\002\000\010\053\122\064\156\101\107\001\002" +
    "\000\004\010\305\001\002\000\004\004\301\001\002\000" +
    "\024\010\300\013\137\022\146\025\143\026\142\027\140" +
    "\030\144\075\136\076\145\001\002\000\004\010\277\001" +
    "\002\000\004\064\273\001\002\000\060\003\uff9c\007\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\053\uff9c\060\uff9c\061\uff9c" +
    "\064\uff9c\070\uff9c\071\uff9c\072\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\101\uff9c\001\002\000\004\004\127\001\002\000\060" +
    "\003\uff9e\007\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\uff9e" +
    "\060\uff9e\061\uff9e\064\uff9e\070\uff9e\071\uff9e\072\uff9e\075" +
    "\uff9e\076\uff9e\077\uff9e\101\uff9e\001\002\000\056\003\uffb5" +
    "\007\uffb5\037\uffb5\040\uffb5\041\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\060\uffb5\061\uffb5" +
    "\064\uffb5\070\uffb5\071\uffb5\072\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\101\uffb5\001\002\000\030\010\uff60\037\uff60\040\uff60" +
    "\053\uff60\064\uff60\070\uff60\071\uff60\072\uff60\075\uff60\076" +
    "\uff60\101\uff60\001\002\000\030\010\uff59\037\045\040\037" +
    "\053\122\064\106\070\043\071\044\072\041\075\115\076" +
    "\101\101\107\001\002\000\004\010\uff5c\001\002\000\004" +
    "\010\uff5b\001\002\000\004\010\255\001\002\000\022\013" +
    "\137\022\146\025\143\026\142\027\140\030\144\075\136" +
    "\076\145\001\002\000\006\005\uff5a\010\uff5a\001\002\000" +
    "\070\002\uff8b\003\uff8b\005\uff8b\007\uff8b\010\uff8b\012\uff8b" +
    "\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\023\uff8b\024" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\037\uff8b\040\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\064\uff8b\066\uff8b\070\uff8b\071\uff8b\072" +
    "\uff8b\074\uff8b\001\002\000\004\064\246\001\002\000\040" +
    "\003\uffa7\004\uffa7\014\uffa7\016\uffa7\034\uffa7\053\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\073\uffa7\075\uffa7\076\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\001\002\000\040\003\162\004\150\014" +
    "\157\016\147\034\161\053\122\062\166\063\165\064\156" +
    "\073\160\075\115\076\101\100\164\101\107\102\151\001" +
    "\002\000\040\003\uffa8\004\uffa8\014\uffa8\016\uffa8\034\uffa8" +
    "\053\uffa8\062\uffa8\063\uffa8\064\uffa8\073\uffa8\075\uffa8\076" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\001\002\000\040\003\uffa9" +
    "\004\uffa9\014\uffa9\016\uffa9\034\uffa9\053\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\073\uffa9\075\uffa9\076\uffa9\100\uffa9\101\uffa9" +
    "\102\uffa9\001\002\000\040\003\uffa6\004\uffa6\014\uffa6\016" +
    "\uffa6\034\uffa6\053\uffa6\062\uffa6\063\uffa6\064\uffa6\073\uffa6" +
    "\075\uffa6\076\uffa6\100\uffa6\101\uffa6\102\uffa6\001\002\000" +
    "\070\002\uff8a\003\uff8a\005\uff8a\007\uff8a\010\uff8a\012\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\023\uff8a\024" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\037\uff8a\040\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\064\uff8a\066\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\074\uff8a\001\002\000\040\003\uffaa\004\uffaa\014\uffaa" +
    "\016\uffaa\034\uffaa\053\uffaa\062\uffaa\063\uffaa\064\uffaa\073" +
    "\uffaa\075\uffaa\076\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002" +
    "\000\040\003\162\004\150\014\157\016\147\034\161\053" +
    "\122\062\166\063\165\064\156\073\160\075\115\076\101" +
    "\100\164\101\107\102\151\001\002\000\052\003\162\004" +
    "\150\014\157\016\147\034\161\037\233\040\237\053\122" +
    "\062\166\063\165\064\156\070\234\071\236\072\240\073" +
    "\160\075\115\076\101\100\164\101\107\102\151\001\002" +
    "\000\040\003\162\004\150\014\157\016\147\034\161\053" +
    "\122\062\166\063\165\064\156\073\160\075\115\076\101" +
    "\100\164\101\107\102\151\001\002\000\070\002\uff71\003" +
    "\uff71\005\uff71\007\uff71\010\uff71\012\uff71\015\uff71\016\uff71" +
    "\017\uff71\020\uff71\021\uff71\023\uff71\024\uff71\031\uff71\032" +
    "\uff71\033\uff71\037\uff71\040\uff71\055\uff71\056\uff71\057\uff71" +
    "\064\uff71\066\uff71\070\uff71\071\uff71\072\uff71\074\uff71\001" +
    "\002\000\070\002\uff74\003\uff74\005\uff74\007\uff74\010\uff74" +
    "\012\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\023" +
    "\uff74\024\uff74\031\uff74\032\uff74\033\uff74\037\uff74\040\uff74" +
    "\055\uff74\056\uff74\057\uff74\064\uff74\066\uff74\070\uff74\071" +
    "\uff74\072\uff74\074\uff74\001\002\000\070\002\uff76\003\uff76" +
    "\005\uff76\007\uff76\010\uff76\012\uff76\015\uff76\016\uff76\017" +
    "\uff76\020\uff76\021\uff76\023\uff76\024\uff76\031\uff76\032\uff76" +
    "\033\uff76\037\uff76\040\uff76\055\uff76\056\uff76\057\uff76\064" +
    "\uff76\066\uff76\070\uff76\071\uff76\072\uff76\074\uff76\001\002" +
    "\000\030\005\uff99\010\uff99\015\206\016\204\017\211\020" +
    "\207\021\205\031\202\032\203\033\212\074\210\001\002" +
    "\000\114\002\uff92\003\uff92\004\174\005\uff92\007\uff92\010" +
    "\uff92\011\173\012\uff92\013\uff92\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\037\uff92" +
    "\040\uff92\055\uff92\056\uff92\057\uff92\064\uff92\066\uff92\070" +
    "\uff92\071\uff92\072\uff92\074\uff92\075\uff92\076\uff92\001\002" +
    "\000\004\036\171\001\002\000\070\002\uff6c\003\uff6c\005" +
    "\uff6c\007\uff6c\010\uff6c\012\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\020\uff6c\021\uff6c\023\uff6c\024\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\037\uff6c\040\uff6c\055\uff6c\056\uff6c\057\uff6c\064\uff6c" +
    "\066\uff6c\070\uff6c\071\uff6c\072\uff6c\074\uff6c\001\002\000" +
    "\004\035\167\001\002\000\070\002\uff75\003\uff75\005\uff75" +
    "\007\uff75\010\uff75\012\uff75\015\uff75\016\uff75\017\uff75\020" +
    "\uff75\021\uff75\023\uff75\024\uff75\031\uff75\032\uff75\033\uff75" +
    "\037\uff75\040\uff75\055\uff75\056\uff75\057\uff75\064\uff75\066" +
    "\uff75\070\uff75\071\uff75\072\uff75\074\uff75\001\002\000\076" +
    "\002\uff72\003\uff72\005\uff72\007\uff72\010\uff72\012\uff72\013" +
    "\137\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\023\uff72" +
    "\024\uff72\031\uff72\032\uff72\033\uff72\037\uff72\040\uff72\055" +
    "\uff72\056\uff72\057\uff72\064\uff72\066\uff72\070\uff72\071\uff72" +
    "\072\uff72\074\uff72\075\136\076\145\001\002\000\070\002" +
    "\uff73\003\uff73\005\uff73\007\uff73\010\uff73\012\uff73\015\uff73" +
    "\016\uff73\017\uff73\020\uff73\021\uff73\023\uff73\024\uff73\031" +
    "\uff73\032\uff73\033\uff73\037\uff73\040\uff73\055\uff73\056\uff73" +
    "\057\uff73\064\uff73\066\uff73\070\uff73\071\uff73\072\uff73\074" +
    "\uff73\001\002\000\070\002\uff6e\003\uff6e\005\uff6e\007\uff6e" +
    "\010\uff6e\012\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021" +
    "\uff6e\023\uff6e\024\uff6e\031\uff6e\032\uff6e\033\uff6e\037\uff6e" +
    "\040\uff6e\055\uff6e\056\uff6e\057\uff6e\064\uff6e\066\uff6e\070" +
    "\uff6e\071\uff6e\072\uff6e\074\uff6e\001\002\000\070\002\uff6d" +
    "\003\uff6d\005\uff6d\007\uff6d\010\uff6d\012\uff6d\015\uff6d\016" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\023\uff6d\024\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\037\uff6d\040\uff6d\055\uff6d\056\uff6d\057" +
    "\uff6d\064\uff6d\066\uff6d\070\uff6d\071\uff6d\072\uff6d\074\uff6d" +
    "\001\002\000\004\034\170\001\002\000\070\002\uff6f\003" +
    "\uff6f\005\uff6f\007\uff6f\010\uff6f\012\uff6f\015\uff6f\016\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\023\uff6f\024\uff6f\031\uff6f\032" +
    "\uff6f\033\uff6f\037\uff6f\040\uff6f\055\uff6f\056\uff6f\057\uff6f" +
    "\064\uff6f\066\uff6f\070\uff6f\071\uff6f\072\uff6f\074\uff6f\001" +
    "\002\000\004\014\172\001\002\000\070\002\uff70\003\uff70" +
    "\005\uff70\007\uff70\010\uff70\012\uff70\015\uff70\016\uff70\017" +
    "\uff70\020\uff70\021\uff70\023\uff70\024\uff70\031\uff70\032\uff70" +
    "\033\uff70\037\uff70\040\uff70\055\uff70\056\uff70\057\uff70\064" +
    "\uff70\066\uff70\070\uff70\071\uff70\072\uff70\074\uff70\001\002" +
    "\000\040\003\162\004\150\014\157\016\147\034\161\053" +
    "\122\062\166\063\165\064\156\073\160\075\115\076\101" +
    "\100\164\101\107\102\151\001\002\000\042\003\162\004" +
    "\150\005\uff86\014\157\016\147\034\161\053\122\062\166" +
    "\063\165\064\156\073\160\075\115\076\101\100\164\101" +
    "\107\102\151\001\002\000\030\005\uff84\015\206\016\204" +
    "\017\211\020\207\021\205\023\uff84\031\202\032\203\033" +
    "\212\074\210\001\002\000\004\005\224\001\002\000\006" +
    "\005\uff87\023\200\001\002\000\040\003\162\004\150\014" +
    "\157\016\147\034\161\053\122\062\166\063\165\064\156" +
    "\073\160\075\115\076\101\100\164\101\107\102\151\001" +
    "\002\000\030\005\uff85\015\206\016\204\017\211\020\207" +
    "\021\205\023\uff85\031\202\032\203\033\212\074\210\001" +
    "\002\000\040\003\162\004\150\014\157\016\147\034\161" +
    "\053\122\062\166\063\165\064\156\073\160\075\115\076" +
    "\101\100\164\101\107\102\151\001\002\000\040\003\162" +
    "\004\150\014\157\016\147\034\161\053\122\062\166\063" +
    "\165\064\156\073\160\075\115\076\101\100\164\101\107" +
    "\102\151\001\002\000\040\003\162\004\150\014\157\016" +
    "\147\034\161\053\122\062\166\063\165\064\156\073\160" +
    "\075\115\076\101\100\164\101\107\102\151\001\002\000" +
    "\040\003\162\004\150\014\157\016\147\034\161\053\122" +
    "\062\166\063\165\064\156\073\160\075\115\076\101\100" +
    "\164\101\107\102\151\001\002\000\040\003\162\004\150" +
    "\014\157\016\147\034\161\053\122\062\166\063\165\064" +
    "\156\073\160\075\115\076\101\100\164\101\107\102\151" +
    "\001\002\000\040\003\162\004\150\014\157\016\147\034" +
    "\161\053\122\062\166\063\165\064\156\073\160\075\115" +
    "\076\101\100\164\101\107\102\151\001\002\000\040\003" +
    "\162\004\150\014\157\016\147\034\161\053\122\062\166" +
    "\063\165\064\156\073\160\075\115\076\101\100\164\101" +
    "\107\102\151\001\002\000\040\003\162\004\150\014\157" +
    "\016\147\034\161\053\122\062\166\063\165\064\156\073" +
    "\160\075\115\076\101\100\164\101\107\102\151\001\002" +
    "\000\040\003\162\004\150\014\157\016\147\034\161\053" +
    "\122\062\166\063\165\064\156\073\160\075\115\076\101" +
    "\100\164\101\107\102\151\001\002\000\070\002\uff7c\003" +
    "\uff7c\005\uff7c\007\uff7c\010\uff7c\012\uff7c\015\206\016\204" +
    "\017\211\020\207\021\205\023\uff7c\024\uff7c\031\202\032" +
    "\203\033\uff7c\037\uff7c\040\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\064\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\074\210\001" +
    "\002\000\070\002\uff81\003\uff81\005\uff81\007\uff81\010\uff81" +
    "\012\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023" +
    "\uff81\024\uff81\031\uff81\032\uff81\033\uff81\037\uff81\040\uff81" +
    "\055\uff81\056\uff81\057\uff81\064\uff81\066\uff81\070\uff81\071" +
    "\uff81\072\uff81\074\uff81\001\002\000\070\002\uff7d\003\uff7d" +
    "\005\uff7d\007\uff7d\010\uff7d\012\uff7d\015\206\016\204\017" +
    "\211\020\207\021\205\023\uff7d\024\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\037\uff7d\040\uff7d\055\uff7d\056\uff7d\057\uff7d\064" +
    "\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d\074\uff7d\001\002" +
    "\000\070\002\uff80\003\uff80\005\uff80\007\uff80\010\uff80\012" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\023\uff80" +
    "\024\uff80\031\uff80\032\uff80\033\uff80\037\uff80\040\uff80\055" +
    "\uff80\056\uff80\057\uff80\064\uff80\066\uff80\070\uff80\071\uff80" +
    "\072\uff80\074\uff80\001\002\000\070\002\uff83\003\uff83\005" +
    "\uff83\007\uff83\010\uff83\012\uff83\015\uff83\016\uff83\017\211" +
    "\020\207\021\205\023\uff83\024\uff83\031\uff83\032\uff83\033" +
    "\uff83\037\uff83\040\uff83\055\uff83\056\uff83\057\uff83\064\uff83" +
    "\066\uff83\070\uff83\071\uff83\072\uff83\074\uff83\001\002\000" +
    "\070\002\uff7f\003\uff7f\005\uff7f\007\uff7f\010\uff7f\012\uff7f" +
    "\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\023\uff7f\024" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\037\uff7f\040\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\064\uff7f\066\uff7f\070\uff7f\071\uff7f\072" +
    "\uff7f\074\uff7f\001\002\000\070\002\uff82\003\uff82\005\uff82" +
    "\007\uff82\010\uff82\012\uff82\015\uff82\016\uff82\017\211\020" +
    "\207\021\205\023\uff82\024\uff82\031\uff82\032\uff82\033\uff82" +
    "\037\uff82\040\uff82\055\uff82\056\uff82\057\uff82\064\uff82\066" +
    "\uff82\070\uff82\071\uff82\072\uff82\074\uff82\001\002\000\070" +
    "\002\uff7a\003\uff7a\005\uff7a\007\uff7a\010\uff7a\012\uff7a\015" +
    "\206\016\204\017\211\020\207\021\205\023\uff7a\024\uff7a" +
    "\031\202\032\uff7a\033\uff7a\037\uff7a\040\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\064\uff7a\066\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\074\210\001\002\000\070\002\uff7b\003\uff7b\005\uff7b\007" +
    "\uff7b\010\uff7b\012\uff7b\015\206\016\204\017\211\020\207" +
    "\021\205\023\uff7b\024\uff7b\031\uff7b\032\uff7b\033\uff7b\037" +
    "\uff7b\040\uff7b\055\uff7b\056\uff7b\057\uff7b\064\uff7b\066\uff7b" +
    "\070\uff7b\071\uff7b\072\uff7b\074\210\001\002\000\110\002" +
    "\uff8f\003\uff8f\005\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\037\uff8f\040\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\064\uff8f\066\uff8f\070\uff8f\071\uff8f\072\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\001\002\000\026\012\uff8c\015\206\016" +
    "\204\017\211\020\207\021\205\031\202\032\203\033\212" +
    "\074\210\001\002\000\004\012\227\001\002\000\112\002" +
    "\uff95\003\uff95\005\uff95\007\uff95\010\uff95\011\230\012\uff95" +
    "\013\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\037\uff95\040\uff95\055\uff95\056" +
    "\uff95\057\uff95\064\uff95\066\uff95\070\uff95\071\uff95\072\uff95" +
    "\074\uff95\075\uff95\076\uff95\001\002\000\040\003\162\004" +
    "\150\014\157\016\147\034\161\053\122\062\166\063\165" +
    "\064\156\073\160\075\115\076\101\100\164\101\107\102" +
    "\151\001\002\000\026\012\uff8d\015\206\016\204\017\211" +
    "\020\207\021\205\031\202\032\203\033\212\074\210\001" +
    "\002\000\070\002\uff79\003\uff79\005\uff79\007\uff79\010\uff79" +
    "\012\uff79\015\206\016\204\017\211\020\207\021\205\023" +
    "\uff79\024\uff79\031\uff79\032\uff79\033\uff79\037\uff79\040\uff79" +
    "\055\uff79\056\uff79\057\uff79\064\uff79\066\uff79\070\uff79\071" +
    "\uff79\072\uff79\074\210\001\002\000\004\005\uffd1\001\002" +
    "\000\004\005\uffcf\001\002\000\026\005\244\015\206\016" +
    "\204\017\211\020\207\021\205\031\202\032\203\033\212" +
    "\074\210\001\002\000\004\005\uffce\001\002\000\004\005" +
    "\uffd0\001\002\000\004\005\uffcd\001\002\000\004\005\242" +
    "\001\002\000\040\003\162\004\150\014\157\016\147\034" +
    "\161\053\122\062\166\063\165\064\156\073\160\075\115" +
    "\076\101\100\164\101\107\102\151\001\002\000\070\002" +
    "\uff77\003\uff77\005\uff77\007\uff77\010\uff77\012\uff77\015\206" +
    "\016\204\017\211\020\207\021\205\023\uff77\024\uff77\031" +
    "\202\032\203\033\212\037\uff77\040\uff77\055\uff77\056\uff77" +
    "\057\uff77\064\uff77\066\uff77\070\uff77\071\uff77\072\uff77\074" +
    "\210\001\002\000\070\002\uff78\003\uff78\005\uff78\007\uff78" +
    "\010\uff78\012\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021" +
    "\uff78\023\uff78\024\uff78\031\uff78\032\uff78\033\uff78\037\uff78" +
    "\040\uff78\055\uff78\056\uff78\057\uff78\064\uff78\066\uff78\070" +
    "\uff78\071\uff78\072\uff78\074\uff78\001\002\000\070\002\uff7e" +
    "\003\uff7e\005\uff7e\007\uff7e\010\uff7e\012\uff7e\015\uff7e\016" +
    "\uff7e\017\uff7e\020\uff7e\021\uff7e\023\uff7e\024\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\037\uff7e\040\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\064\uff7e\066\uff7e\070\uff7e\071\uff7e\072\uff7e\074\uff7e" +
    "\001\002\000\114\002\uff91\003\uff91\004\247\005\uff91\007" +
    "\uff91\010\uff91\011\250\012\uff91\013\uff91\015\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\037\uff91\040\uff91\055\uff91\056\uff91\057\uff91\064\uff91\066" +
    "\uff91\070\uff91\071\uff91\072\uff91\074\uff91\075\uff91\076\uff91" +
    "\001\002\000\042\003\162\004\150\005\uff86\014\157\016" +
    "\147\034\161\053\122\062\166\063\165\064\156\073\160" +
    "\075\115\076\101\100\164\101\107\102\151\001\002\000" +
    "\040\003\162\004\150\014\157\016\147\034\161\053\122" +
    "\062\166\063\165\064\156\073\160\075\115\076\101\100" +
    "\164\101\107\102\151\001\002\000\004\012\252\001\002" +
    "\000\112\002\uff94\003\uff94\005\uff94\007\uff94\010\uff94\011" +
    "\230\012\uff94\013\uff94\015\uff94\016\uff94\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\033\uff94\037\uff94\040\uff94" +
    "\055\uff94\056\uff94\057\uff94\064\uff94\066\uff94\070\uff94\071" +
    "\uff94\072\uff94\074\uff94\075\uff94\076\uff94\001\002\000\004" +
    "\005\254\001\002\000\110\002\uff8e\003\uff8e\005\uff8e\007" +
    "\uff8e\010\uff8e\012\uff8e\013\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\037\uff8e" +
    "\040\uff8e\055\uff8e\056\uff8e\057\uff8e\064\uff8e\066\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\074\uff8e\075\uff8e\076\uff8e\001\002" +
    "\000\040\003\uff5f\004\uff5f\014\uff5f\016\uff5f\034\uff5f\053" +
    "\uff5f\062\uff5f\063\uff5f\064\uff5f\073\uff5f\075\uff5f\076\uff5f" +
    "\100\uff5f\101\uff5f\102\uff5f\001\002\000\040\003\162\004" +
    "\150\014\157\016\147\034\161\053\122\062\166\063\165" +
    "\064\156\073\160\075\115\076\101\100\164\101\107\102" +
    "\151\001\002\000\026\010\uff5e\015\206\016\204\017\211" +
    "\020\207\021\205\031\202\032\203\033\212\074\210\001" +
    "\002\000\004\010\261\001\002\000\016\005\uff59\053\122" +
    "\064\156\075\115\076\101\101\107\001\002\000\004\005" +
    "\263\001\002\000\052\003\116\006\267\037\045\040\037" +
    "\041\104\044\074\045\110\046\124\047\103\051\114\053" +
    "\122\060\076\061\117\064\106\070\043\071\044\072\041" +
    "\075\115\076\101\101\107\001\002\000\060\003\uffb6\007" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\060\uffb6\061" +
    "\uffb6\064\uffb6\070\uffb6\071\uffb6\072\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\101\uffb6\001\002\000\060\003\uffb7\007\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\053\uffb7\060\uffb7\061\uffb7\064" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\101\uffb7\001\002\000\060\003\uff5d\007\uff5d\037\uff5d\040" +
    "\uff5d\041\uff5d\042\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d" +
    "\050\uff5d\051\uff5d\053\uff5d\060\uff5d\061\uff5d\064\uff5d\070" +
    "\uff5d\071\uff5d\072\uff5d\075\uff5d\076\uff5d\077\uff5d\101\uff5d" +
    "\001\002\000\052\003\uffb9\007\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\053\uffb9" +
    "\060\uffb9\061\uffb9\064\uffb9\070\uffb9\071\uffb9\072\uffb9\075" +
    "\uffb9\076\uffb9\101\uffb9\001\002\000\052\003\uffb4\007\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\051\uffb4\053\uffb4\060\uffb4\061\uffb4\064\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\075\uffb4\076\uffb4\101\uffb4\001\002\000" +
    "\052\003\116\007\272\037\045\040\037\041\104\044\074" +
    "\045\110\046\124\047\103\051\114\053\122\060\076\061" +
    "\117\064\106\070\043\071\044\072\041\075\115\076\101" +
    "\101\107\001\002\000\060\003\uffb8\007\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\053\uffb8\060\uffb8\061\uffb8\064\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8" +
    "\001\002\000\004\004\274\001\002\000\042\003\162\004" +
    "\150\005\uff86\014\157\016\147\034\161\053\122\062\166" +
    "\063\165\064\156\073\160\075\115\076\101\100\164\101" +
    "\107\102\151\001\002\000\004\005\276\001\002\000\110" +
    "\002\uff97\003\uff97\005\uff97\007\uff97\010\uff97\012\uff97\013" +
    "\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\037\uff97\040\uff97\055\uff97\056\uff97" +
    "\057\uff97\064\uff97\066\uff97\070\uff97\071\uff97\072\uff97\074" +
    "\uff97\075\uff97\076\uff97\001\002\000\060\003\uffa4\007\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\053\uffa4\060\uffa4\061\uffa4" +
    "\064\uffa4\070\uffa4\071\uffa4\072\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\101\uffa4\001\002\000\060\003\uffa3\007\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\053\uffa3\060\uffa3\061\uffa3\064\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\075\uffa3\076\uffa3\077\uffa3\101" +
    "\uffa3\001\002\000\040\003\162\004\150\014\157\016\147" +
    "\034\161\053\122\062\166\063\165\064\156\073\160\075" +
    "\115\076\101\100\164\101\107\102\151\001\002\000\026" +
    "\005\303\015\206\016\204\017\211\020\207\021\205\031" +
    "\202\032\203\033\212\074\210\001\002\000\004\010\304" +
    "\001\002\000\060\003\uff9b\007\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\053\uff9b\060\uff9b\061\uff9b\064\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\075\uff9b\076\uff9b\077\uff9b\101\uff9b\001\002" +
    "\000\060\003\uff9a\007\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\053\uff9a\060\uff9a\061\uff9a\064\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\075\uff9a\076\uff9a\077\uff9a\101\uff9a\001\002\000\072" +
    "\002\uff89\003\uff89\005\uff89\007\uff89\010\uff89\012\uff89\013" +
    "\137\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\023\uff89" +
    "\024\uff89\031\uff89\032\uff89\033\uff89\037\uff89\040\uff89\055" +
    "\uff89\056\uff89\057\uff89\064\uff89\066\uff89\070\uff89\071\uff89" +
    "\072\uff89\074\uff89\001\002\000\060\003\uff9d\007\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\053\uff9d\060\uff9d\061\uff9d\064" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\101\uff9d\001\002\000\052\003\uff6b\006\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\051\uff6b" +
    "\053\uff6b\060\uff6b\061\uff6b\064\uff6b\070\uff6b\071\uff6b\072" +
    "\uff6b\075\uff6b\076\uff6b\101\uff6b\001\002\000\052\003\116" +
    "\006\267\037\045\040\037\041\104\044\074\045\110\046" +
    "\124\047\103\051\114\053\122\060\076\061\117\064\106" +
    "\070\043\071\044\072\041\075\115\076\101\101\107\001" +
    "\002\000\060\003\uff6a\007\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\053\uff6a\060\uff6a\061\uff6a\064\uff6a\070\uff6a\071\uff6a" +
    "\072\uff6a\075\uff6a\076\uff6a\077\uff6a\101\uff6a\001\002\000" +
    "\052\003\116\006\267\037\045\040\037\041\104\044\074" +
    "\045\110\046\124\047\103\051\114\053\122\060\076\061" +
    "\117\064\106\070\043\071\044\072\041\075\115\076\101" +
    "\101\107\001\002\000\004\044\315\001\002\000\004\004" +
    "\316\001\002\000\040\003\162\004\150\014\157\016\147" +
    "\034\161\053\122\062\166\063\165\064\156\073\160\075" +
    "\115\076\101\100\164\101\107\102\151\001\002\000\026" +
    "\005\uff62\015\206\016\204\017\211\020\207\021\205\031" +
    "\202\032\203\033\212\074\210\001\002\000\004\005\321" +
    "\001\002\000\004\010\uff61\001\002\000\004\064\323\001" +
    "\002\000\114\002\uff93\003\uff93\004\325\005\uff93\007\uff93" +
    "\010\uff93\011\324\012\uff93\013\uff93\015\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\037" +
    "\uff93\040\uff93\055\uff93\056\uff93\057\uff93\064\uff93\066\uff93" +
    "\070\uff93\071\uff93\072\uff93\074\uff93\075\uff93\076\uff93\001" +
    "\002\000\040\003\162\004\150\014\157\016\147\034\161" +
    "\053\122\062\166\063\165\064\156\073\160\075\115\076" +
    "\101\100\164\101\107\102\151\001\002\000\042\003\162" +
    "\004\150\005\uff86\014\157\016\147\034\161\053\122\062" +
    "\166\063\165\064\156\073\160\075\115\076\101\100\164" +
    "\101\107\102\151\001\002\000\004\005\327\001\002\000" +
    "\110\002\uff90\003\uff90\005\uff90\007\uff90\010\uff90\012\uff90" +
    "\013\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\037\uff90\040\uff90\055\uff90\056" +
    "\uff90\057\uff90\064\uff90\066\uff90\070\uff90\071\uff90\072\uff90" +
    "\074\uff90\075\uff90\076\uff90\001\002\000\004\012\331\001" +
    "\002\000\112\002\uff96\003\uff96\005\uff96\007\uff96\010\uff96" +
    "\011\230\012\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\037\uff96\040" +
    "\uff96\055\uff96\056\uff96\057\uff96\064\uff96\066\uff96\070\uff96" +
    "\071\uff96\072\uff96\074\uff96\075\uff96\076\uff96\001\002\000" +
    "\040\003\162\004\150\014\157\016\147\034\161\053\122" +
    "\062\166\063\165\064\156\073\160\075\115\076\101\100" +
    "\164\101\107\102\151\001\002\000\004\010\uffb1\001\002" +
    "\000\030\007\uffaf\015\206\016\204\017\211\020\207\021" +
    "\205\023\uffaf\031\202\032\203\033\212\074\210\001\002" +
    "\000\040\003\162\004\150\014\157\016\147\034\161\053" +
    "\122\062\166\063\165\064\156\073\160\075\115\076\101" +
    "\100\164\101\107\102\151\001\002\000\026\005\337\015" +
    "\206\016\204\017\211\020\207\021\205\031\202\032\203" +
    "\033\212\074\210\001\002\000\052\003\uff68\006\uff68\037" +
    "\uff68\040\uff68\041\uff68\044\uff68\045\uff68\046\uff68\047\uff68" +
    "\051\uff68\053\uff68\060\uff68\061\uff68\064\uff68\070\uff68\071" +
    "\uff68\072\uff68\075\uff68\076\uff68\101\uff68\001\002\000\052" +
    "\003\116\006\267\037\045\040\037\041\104\044\074\045" +
    "\110\046\124\047\103\051\114\053\122\060\076\061\117" +
    "\064\106\070\043\071\044\072\041\075\115\076\101\101" +
    "\107\001\002\000\060\003\uff67\007\uff67\037\uff67\040\uff67" +
    "\041\uff67\042\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\053\uff67\060\uff67\061\uff67\064\uff67\070\uff67" +
    "\071\uff67\072\uff67\075\uff67\076\uff67\077\uff67\101\uff67\001" +
    "\002\000\040\003\162\004\150\014\157\016\147\034\161" +
    "\053\122\062\166\063\165\064\156\073\160\075\115\076" +
    "\101\100\164\101\107\102\151\001\002\000\026\005\uff58" +
    "\015\206\016\204\017\211\020\207\021\205\031\202\032" +
    "\203\033\212\074\210\001\002\000\004\005\345\001\002" +
    "\000\004\006\346\001\002\000\004\050\351\001\002\000" +
    "\010\007\uff54\050\uff54\077\uff54\001\002\000\010\007\uff4e" +
    "\050\351\077\357\001\002\000\040\003\uff53\004\uff53\014" +
    "\uff53\016\uff53\034\uff53\053\uff53\062\uff53\063\uff53\064\uff53" +
    "\073\uff53\075\uff53\076\uff53\100\uff53\101\uff53\102\uff53\001" +
    "\002\000\040\003\162\004\150\014\157\016\147\034\161" +
    "\053\122\062\166\063\165\064\156\073\160\075\115\076" +
    "\101\100\164\101\107\102\151\001\002\000\026\015\206" +
    "\016\204\017\211\020\207\021\205\024\354\031\202\032" +
    "\203\033\212\074\210\001\002\000\056\003\uff52\007\uff52" +
    "\037\uff52\040\uff52\041\uff52\044\uff52\045\uff52\046\uff52\047" +
    "\uff52\050\uff52\051\uff52\053\uff52\060\uff52\061\uff52\064\uff52" +
    "\070\uff52\071\uff52\072\uff52\075\uff52\076\uff52\077\uff52\101" +
    "\uff52\001\002\000\056\003\uffb4\007\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\053\uffb4\060\uffb4\061\uffb4\064\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4\001\002\000" +
    "\056\003\116\007\uff51\037\045\040\037\041\104\044\074" +
    "\045\110\046\124\047\103\050\uff51\051\114\053\122\060" +
    "\076\061\117\064\106\070\043\071\044\072\041\075\115" +
    "\076\101\077\uff51\101\107\001\002\000\004\024\364\001" +
    "\002\000\004\007\uff57\001\002\000\010\007\uff55\050\uff55" +
    "\077\uff55\001\002\000\004\007\363\001\002\000\060\003" +
    "\uff56\007\uff56\037\uff56\040\uff56\041\uff56\042\uff56\044\uff56" +
    "\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\053\uff56\060" +
    "\uff56\061\uff56\064\uff56\070\uff56\071\uff56\072\uff56\075\uff56" +
    "\076\uff56\077\uff56\101\uff56\001\002\000\052\003\uff50\007" +
    "\uff50\037\uff50\040\uff50\041\uff50\044\uff50\045\uff50\046\uff50" +
    "\047\uff50\051\uff50\053\uff50\060\uff50\061\uff50\064\uff50\070" +
    "\uff50\071\uff50\072\uff50\075\uff50\076\uff50\101\uff50\001\002" +
    "\000\052\003\uffb4\007\uffb4\037\uffb4\040\uffb4\041\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\053\uffb4\060\uffb4" +
    "\061\uffb4\064\uffb4\070\uffb4\071\uffb4\072\uffb4\075\uffb4\076" +
    "\uffb4\101\uffb4\001\002\000\052\003\116\007\uff4f\037\045" +
    "\040\037\041\104\044\074\045\110\046\124\047\103\051" +
    "\114\053\122\060\076\061\117\064\106\070\043\071\044" +
    "\072\041\075\115\076\101\101\107\001\002\000\072\002" +
    "\uff88\003\uff88\005\uff88\007\uff88\010\uff88\012\uff88\013\137" +
    "\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\023\uff88\024" +
    "\uff88\031\uff88\032\uff88\033\uff88\037\uff88\040\uff88\055\uff88" +
    "\056\uff88\057\uff88\064\uff88\066\uff88\070\uff88\071\uff88\072" +
    "\uff88\074\uff88\001\002\000\060\003\uff9f\007\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\053\uff9f\060\uff9f\061\uff9f\064\uff9f" +
    "\070\uff9f\071\uff9f\072\uff9f\075\uff9f\076\uff9f\077\uff9f\101" +
    "\uff9f\001\002\000\026\010\372\015\206\016\204\017\211" +
    "\020\207\021\205\031\202\032\203\033\212\074\210\001" +
    "\002\000\060\003\uffa2\007\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\053\uffa2\060\uffa2\061\uffa2\064\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2\001\002\000" +
    "\060\003\uffa5\007\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053" +
    "\uffa5\060\uffa5\061\uffa5\064\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\101\uffa5\001\002\000\040\003" +
    "\uff66\004\uff66\014\uff66\016\uff66\034\uff66\053\uff66\062\uff66" +
    "\063\uff66\064\uff66\073\uff66\075\uff66\076\uff66\100\uff66\101" +
    "\uff66\102\uff66\001\002\000\040\003\162\004\150\014\157" +
    "\016\147\034\161\053\122\062\166\063\165\064\156\073" +
    "\160\075\115\076\101\100\164\101\107\102\151\001\002" +
    "\000\026\005\uff65\015\206\016\204\017\211\020\207\021" +
    "\205\031\202\032\203\033\212\074\210\001\002\000\004" +
    "\005\u0100\001\002\000\052\003\116\006\267\037\045\040" +
    "\037\041\104\044\074\045\110\046\124\047\103\051\114" +
    "\053\122\060\076\061\117\064\106\070\043\071\044\072" +
    "\041\075\115\076\101\101\107\001\002\000\060\003\uff64" +
    "\007\uff64\037\uff64\040\uff64\041\uff64\042\uff64\044\uff64\045" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\053\uff64\060\uff64" +
    "\061\uff64\064\uff64\070\uff64\071\uff64\072\uff64\075\uff64\076" +
    "\uff64\077\uff64\101\uff64\001\002\000\040\003\162\004\150" +
    "\014\157\016\147\034\161\053\122\062\166\063\165\064" +
    "\156\073\160\075\115\076\101\100\164\101\107\102\151" +
    "\001\002\000\026\010\uffb3\015\206\016\204\017\211\020" +
    "\207\021\205\031\202\032\203\033\212\074\210\001\002" +
    "\000\010\010\uffb0\011\u0105\022\u0106\001\002\000\012\003" +
    "\u010a\004\u010c\016\u010d\063\u010b\001\002\000\004\006\u0107" +
    "\001\002\000\040\003\162\004\150\014\157\016\147\034" +
    "\161\053\122\062\166\063\165\064\156\073\160\075\115" +
    "\076\101\100\164\101\107\102\151\001\002\000\030\007" +
    "\uffae\015\206\016\204\017\211\020\207\021\205\023\uffae" +
    "\031\202\032\203\033\212\074\210\001\002\000\016\012" +
    "\uffac\015\u0110\016\u0112\017\u0111\020\u0113\021\u010f\001\002" +
    "\000\020\005\uffd8\012\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\001\002\000\020\005\uffe0\012\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\001\002\000\012\003" +
    "\u010a\004\u010c\016\u010d\063\u010b\001\002\000\012\003\u010a" +
    "\004\u010c\016\u010d\063\u010b\001\002\000\020\005\uffd9\012" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\001\002" +
    "\000\012\003\u010a\004\u010c\016\u010d\063\u010b\001\002\000" +
    "\012\003\u010a\004\u010c\016\u010d\063\u010b\001\002\000\012" +
    "\003\u010a\004\u010c\016\u010d\063\u010b\001\002\000\012\003" +
    "\u010a\004\u010c\016\u010d\063\u010b\001\002\000\012\003\u010a" +
    "\004\u010c\016\u010d\063\u010b\001\002\000\020\005\uffdc\012" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\001\002" +
    "\000\020\005\uffde\012\uffde\015\uffde\016\uffde\017\u0111\020" +
    "\u0113\021\u010f\001\002\000\020\005\uffdd\012\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\001\002\000\020\005" +
    "\uffdf\012\uffdf\015\uffdf\016\uffdf\017\u0111\020\u0113\021\u010f" +
    "\001\002\000\020\005\uffdb\012\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\001\002\000\016\005\u011a\015\u0110" +
    "\016\u0112\017\u0111\020\u0113\021\u010f\001\002\000\020\005" +
    "\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\001\002\000\010\010\uffad\011\u011c\022\uffad\001\002\000" +
    "\012\003\u010a\004\u010c\016\u010d\063\u010b\001\002\000\016" +
    "\012\uffab\015\u0110\016\u0112\017\u0111\020\u0113\021\u010f\001" +
    "\002\000\044\002\uffe6\003\uffe6\004\u0123\007\uffe6\010\uffe6" +
    "\011\u0124\022\uffe6\037\uffe6\040\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\064\uffe6\066\uffe6\070\uffe6\071\uffe6\072\uffe6\001\002" +
    "\000\004\012\u0120\001\002\000\042\002\uffe5\003\uffe5\007" +
    "\uffe5\010\uffe5\011\u0121\022\uffe5\037\uffe5\040\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\064\uffe5\066\uffe5\070\uffe5\071\uffe5\072" +
    "\uffe5\001\002\000\012\003\u010a\004\u010c\016\u010d\063\u010b" +
    "\001\002\000\016\012\uffe2\015\u0110\016\u0112\017\u0111\020" +
    "\u0113\021\u010f\001\002\000\020\005\uffcc\037\uffcc\040\uffcc" +
    "\064\uffcc\070\uffcc\071\uffcc\072\uffcc\001\002\000\012\003" +
    "\u010a\004\u010c\016\u010d\063\u010b\001\002\000\016\012\uffe1" +
    "\015\u0110\016\u0112\017\u0111\020\u0113\021\u010f\001\002\000" +
    "\020\005\uffc1\037\045\040\037\064\054\070\043\071\044" +
    "\072\041\001\002\000\004\005\uffcb\001\002\000\004\005" +
    "\u0129\001\002\000\004\006\065\001\002\000\034\002\uffca" +
    "\003\uffca\007\uffca\037\uffca\040\uffca\055\uffca\056\uffca\057" +
    "\uffca\064\uffca\066\uffca\070\uffca\071\uffca\072\uffca\001\002" +
    "\000\020\005\uffc6\037\uffc6\040\uffc6\064\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\001\002\000\020\005\uffc1\037\045\040\037" +
    "\064\054\070\043\071\044\072\041\001\002\000\004\005" +
    "\uffc5\001\002\000\004\005\u012f\001\002\000\004\006\065" +
    "\001\002\000\034\002\uffc4\003\uffc4\007\uffc4\037\uffc4\040" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\064\uffc4\066\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\001\002\000\034\002\uffe8\003\uffe8\007" +
    "\uffe8\037\uffe8\040\uffe8\055\uffe8\056\uffe8\057\uffe8\064\uffe8" +
    "\066\uffe8\070\uffe8\071\uffe8\072\uffe8\001\002\000\034\002" +
    "\uffe4\003\uffe4\007\uffe4\037\uffe4\040\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\064\uffe4\066\uffe4\070\uffe4\071\uffe4\072\uffe4\001" +
    "\002\000\040\003\162\004\150\014\157\016\147\034\161" +
    "\053\122\062\166\063\165\064\156\073\160\075\115\076" +
    "\101\100\164\101\107\102\151\001\002\000\060\002\uffe3" +
    "\003\uffe3\007\uffe3\010\u0132\015\206\016\204\017\211\020" +
    "\207\021\205\031\202\032\203\033\212\037\uffe3\040\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\064\uffe3\066\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\074\210\001\002\000\034\002\uffe9\003\uffe9" +
    "\007\uffe9\037\uffe9\040\uffe9\055\uffe9\056\uffe9\057\uffe9\064" +
    "\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\004" +
    "\006\uffef\001\002\000\004\002\001\001\002\000\010\003" +
    "\ufff8\052\ufff8\054\ufff8\001\002\000\004\010\ufffa\001\002" +
    "\000\004\010\u013b\001\002\000\010\003\ufff9\052\ufff9\054" +
    "\ufff9\001\002\000\004\010\u0138\001\002\000\004\002\uffff" +
    "\001\002\000\010\003\ufffc\052\ufffc\054\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\014\002\010\003\003\004\004\005\011\006" +
    "\007\001\001\000\002\001\001\000\006\005\u013d\006\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\014\001\001\000\004\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\020\001\001" +
    "\000\016\011\032\012\022\013\024\022\033\035\027\055" +
    "\026\001\001\000\002\001\001\000\004\021\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\047\001\001\000\012\042\052\043" +
    "\051\045\050\046\054\001\001\000\004\074\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\061\046\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\065\001\001" +
    "\000\004\077\066\001\001\000\002\001\001\000\004\016" +
    "\067\001\001\000\040\014\074\017\125\024\120\026\111" +
    "\027\112\030\076\031\122\033\124\041\110\046\070\053" +
    "\072\056\071\057\117\060\101\064\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\057\162\060\151\061\370" +
    "\062\153\063\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\105\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\127\001\001\000" +
    "\026\014\131\023\132\024\134\032\130\046\070\053\072" +
    "\056\071\057\133\060\101\064\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\057\162\060\151\061\154" +
    "\062\153\063\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\057\162\060\151\061\244\062\153\063\152\001" +
    "\001\000\016\034\240\057\162\060\151\061\234\062\153" +
    "\063\152\001\001\000\014\057\162\060\151\061\231\062" +
    "\153\063\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\054\225\057" +
    "\162\060\151\061\224\062\153\063\152\001\001\000\020" +
    "\057\162\060\151\061\174\062\153\063\152\065\176\066" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\057\162\060\151\061\200\062\153\063" +
    "\152\001\001\000\002\001\001\000\014\057\162\060\151" +
    "\061\222\062\153\063\152\001\001\000\014\057\162\060" +
    "\151\061\221\062\153\063\152\001\001\000\014\057\162" +
    "\060\151\061\220\062\153\063\152\001\001\000\014\057" +
    "\162\060\151\061\217\062\153\063\152\001\001\000\014" +
    "\057\162\060\151\061\216\062\153\063\152\001\001\000" +
    "\014\057\162\060\151\061\215\062\153\063\152\001\001" +
    "\000\014\057\162\060\151\061\214\062\153\063\152\001" +
    "\001\000\014\057\162\060\151\061\213\062\153\063\152" +
    "\001\001\000\014\057\162\060\151\061\212\062\153\063" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\057\162\060\151\061\230\062\153" +
    "\063\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\057\162\060\151\061\242\062\153\063\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\057\162\060\151\061\174" +
    "\062\153\063\152\065\176\066\252\001\001\000\016\054" +
    "\250\057\162\060\151\061\224\062\153\063\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\255\001\001\000\014\057\162" +
    "\060\151\061\256\062\153\063\152\001\001\000\004\111" +
    "\257\001\001\000\002\001\001\000\012\024\134\032\261" +
    "\057\133\060\101\001\001\000\002\001\001\000\044\014" +
    "\074\015\263\017\264\024\120\025\265\026\111\027\112" +
    "\030\076\031\122\033\124\041\110\046\070\053\072\056" +
    "\071\057\117\060\101\064\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\267\001" +
    "\001\000\004\016\270\001\001\000\040\014\074\017\125" +
    "\024\120\026\111\027\112\030\076\031\122\033\124\041" +
    "\110\046\070\053\072\056\071\057\117\060\101\064\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\057" +
    "\162\060\151\061\174\062\153\063\152\065\176\066\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\057\162\060\151\061\301" +
    "\062\153\063\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\310\001\001\000\044\014" +
    "\074\015\263\017\264\024\120\025\311\026\111\027\112" +
    "\030\076\031\122\033\124\041\110\046\070\053\072\056" +
    "\071\057\117\060\101\064\104\001\001\000\002\001\001" +
    "\000\044\014\074\015\263\017\264\024\120\025\313\026" +
    "\111\027\112\030\076\031\122\033\124\041\110\046\070" +
    "\053\072\056\071\057\117\060\101\064\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\057\162\060\151" +
    "\061\316\062\153\063\152\001\001\000\004\106\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\054\327\057\162\060\151\061" +
    "\224\062\153\063\152\001\001\000\020\057\162\060\151" +
    "\061\174\062\153\063\152\065\176\066\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\057\162\060\151\061\333\062\153\063" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\057\162\060\151\061\335\062\153\063\152\001\001\000" +
    "\002\001\001\000\004\102\337\001\001\000\044\014\074" +
    "\015\263\017\264\024\120\025\340\026\111\027\112\030" +
    "\076\031\122\033\124\041\110\046\070\053\072\056\071" +
    "\057\117\060\101\064\104\001\001\000\002\001\001\000" +
    "\014\057\162\060\151\061\342\062\153\063\152\001\001" +
    "\000\004\112\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\346\052\347\001\001\000\002\001\001" +
    "\000\006\050\360\051\357\001\001\000\004\114\351\001" +
    "\001\000\014\057\162\060\151\061\352\062\153\063\152" +
    "\001\001\000\002\001\001\000\004\115\354\001\001\000" +
    "\004\016\355\001\001\000\040\014\074\017\125\024\120" +
    "\026\111\027\112\030\076\031\122\033\124\041\110\046" +
    "\070\053\072\056\071\057\117\060\101\064\104\001\001" +
    "\000\002\001\001\000\004\113\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\364" +
    "\001\001\000\004\016\365\001\001\000\040\014\074\017" +
    "\125\024\120\026\111\027\112\030\076\031\122\033\124" +
    "\041\110\046\070\053\072\056\071\057\117\060\101\064" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\374\001\001\000\014\057\162\060\151\061\375\062\153" +
    "\063\152\001\001\000\004\104\376\001\001\000\002\001" +
    "\001\000\044\014\074\015\263\017\264\024\120\025\u0100" +
    "\026\111\027\112\030\076\031\122\033\124\041\110\046" +
    "\070\053\072\056\071\057\117\060\101\064\104\001\001" +
    "\000\002\001\001\000\014\057\162\060\151\061\u0102\062" +
    "\153\063\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0108\001\001\000\002\001\001\000\014\057" +
    "\162\060\151\061\u0107\062\153\063\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u0118\001\001\000\004\037\u010d\001\001" +
    "\000\002\001\001\000\004\037\u0117\001\001\000\004\037" +
    "\u0116\001\001\000\004\037\u0115\001\001\000\004\037\u0114" +
    "\001\001\000\004\037\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0121\001\001\000\002\001\001\000\004\071\u0125\001\001" +
    "\000\004\037\u0124\001\001\000\002\001\001\000\012\042" +
    "\052\043\051\045\u0126\046\054\001\001\000\004\072\u0127" +
    "\001\001\000\002\001\001\000\004\036\u0129\001\001\000" +
    "\002\001\001\000\004\075\u012b\001\001\000\012\042\052" +
    "\043\051\045\u012c\046\054\001\001\000\004\076\u012d\001" +
    "\001\000\002\001\001\000\004\036\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\057" +
    "\162\060\151\061\u0133\062\153\063\152\001\001\000\004" +
    "\021\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbolActual() { 
        return this.cur_token;
    }

	@Override
	public void syntax_error(Symbol s) { 
		clase.error("Símbolo '" + s.value + "' fuera de contexto", archivo, s.left + 1);
//		report_error("ERR Sintaxis. Archivo: " + archivo + " Linea: " + (s.left + 1) + 
//				". Texto: \"" + s.value + "\"", null);
	}

	@Override
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("La Cadena: \"" + s.value + "\" en la linea: " + 
				(s.left+1) + ", columna: " + s.right + " esta fuera de contexto!!!!!" );
	}

	public ParserCup(File file, Clase clase, int pasada) throws Exception {
		super(new LexicoLex(file, clase));
		this.archivo = file.getName();
		this.clase = clase;
		this.nclase = this.archivo.split("\\.")[0];
		this.pasada = pasada;
	}
	
	protected String archivo;	
	protected Clase clase;
	protected String nclase;
	protected int pasada;
	protected Funcion funcion;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


	private void error(){
		parser.syntax_error(parser.symbolActual());
	}

	private void error(String error, int linea){
		clase().error(error, parser.archivo, linea);
	}
	
	private void error(String symbol){
		parser.syntax_error(new Symbol(ParserSym.error, 
				parser.symbolActual().left, 0, symbol));
	}
	
	private Variable [] cases = new Variable [50];
	private int icases = -1;
	private String [] display = new String [50];
	private int idisplay = -1;
	private String [] pila = new String [50];		// para push
	private int ipila = -1;							// y pop
	private String tempPorGuardar = "";
	private String etSalidaMetodo;
	
	private void addtif(String val, String bool, String et){
		addt("if (" + val + " == " + bool + ") goto " + et);
	}
	
	private void push(String val){
		pila[++ ipila] = val;
	}
	
	private String pop(){
		return pila[ipila --];
	}
	
	private Clase clase(){ return parser.clase; }
	private String nclase(){ return parser.nclase; }
	private int pasada(){ return parser.pasada; }
	private Funcion funcion(){ return parser.funcion; }
	private void funcion(Funcion f) { parser.funcion = f; }
	private void add(String txt) { clase().add(txt); }
	private void addt(String txt) { add("\t" + txt + ";\n"); }
	private String genTemp(boolean guardar){
		String ret = Clase.genTemp();
		if(guardar)
			tempPorGuardar += tempPorGuardar.equals("") ? ret : ":" + ret;
		return ret;
	}
	private String genTemp(){ return genTemp(true); }
	private void resetTempPorGuardar(){ tempPorGuardar = ""; }
	private String genEtiq(){ return Clase.genEtiq(); }
	private void resetcTemp() { Clase.resetcTemp(); }
	private String apheap(){ return Clase.apHeap; }
	private String apstack(){ return Clase.apStack; }
	private String heap(){ return Clase.Heap; }
	private String stack(){ return Clase.Stack; }
	private String escape(){ return String.valueOf(Variable.escapeString); }

	/**
	 * Realiza el protocolo de llamada a función. Retorna null 
	 * si es un procedimiento sin retorno. Si no, genera variable  
	 * @param clase clase de la instancia a la que pertenece el método
	 * @param metodo método al que se llama
	 * @param pars lista de instancias de Variable puestos como parámetros
	 * @param posInstancia temporal que posee la posición de la instancia
	 * @param linea linea por posible error
	 * @return
	 */
	private Variable llamarFuncion(String clase, String metodo, 
			ArrayList<Variable> pars, String posInstancia, int linea){
		Variable ret = null;
		/**
		 * 1) verificar que metodo existe y que es accesible
		 * 2) guardar temps en stack
		 * 3) setear parametros por valor o referencia
		 * 4) actualizar punteros de stack y heap
		 * 5) llamar procedimiento
		 * 6) tomar valor de retorno
		 * 7) restablecer temporales
		 * 8) retornar valor 
		 */
		String def = clase().definicionDeClaseSiPuede(clase, metodo, pars, linea);
		if (def != null) { // ya se trató el error
							// def de la forma tipoRetorno-nombre[-[&| ]t1:[&| ]t2: ... :[&| ]tn]
			String [] vdef = def.split("-");
			int ind_ = vdef[0].indexOf('_');
			String clasep = vdef[0].substring(0, ind_);
			String retorno = vdef[0].substring(ind_ + 1);
			String [] vpars = vdef.length == 3 ? vdef[2].split(":") : null;
			String temp = genTemp(false);
			int tamAmbito = funcion().getTamaño();
			String [] vtempPorGuardar = tempPorGuardar.split(":");
			
			addt("// guardar temps en stack");
			// 2) guardar temps en stack
			if(!tempPorGuardar.equals("")){
				for(int i = 0; i < vtempPorGuardar.length; i++){
					addt(temp + " = " + apstack() + " + " + tamAmbito ++);
					addt(stack() + "[(int) " + temp + "] = " + vtempPorGuardar[i]);
				}
			}
			
			addt("// setear parametros por valor o referencia");
			// 3) setear parametros por valor o referencia
			int posStack = tamAmbito;
			if(!retorno.equals(Funcion.rconstructor) && !retorno.equals(Funcion.rvoid))
				posStack ++;
			String defin = "";
			for(int i = 0; i < pars.size(); i++){
				addt(temp + " = " + apstack() + " + " + ++ posStack);
				Variable par = pars.get(i);
				defin += "_" + par.tipo;
				if(vpars[i].charAt(0) == ' ' && Variable.esPrimitiva(par.tipo)){
					if(par.lugar == null){// valores float simples 
						addt(stack() + "[(int) " + temp + "] = " + par.temp);
					} else { // su 'temp' está apuntando a 'lugar'
						if(!par.referencia){ // sólo primitivos
							addt(par.temp + " = " + par.lugar + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						} else { // solo primitivos en stack
							addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
							addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						}
					}
				} else { // espera referencia de primitivo en stack o es instancia de clase
					if(par.lugar == null){
						error("Se espera variable", linea);
					} else {
						if(Variable.esPrimitiva(par.tipo)){
							if(!par.referencia) {
								addt(stack() + "[(int) " + temp + "] = " + par.temp);
							} else {
								addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
								addt(stack() + "[(int) " + temp + "] = " + par.temp);
							}
						} else { // es instancia de clase o String
							if(par.lugar.equals(stack()))
								add(par.temp + " = " + par.lugar + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						}
					}
				} 
			}
			
			addt("// actualizar punteros en stack y heap");
			// 4) actualizar punteros de stack y heap
			addt(temp + " = " + apstack() + " + " + tamAmbito);
			addt(stack() + "[(int) " + temp + "] = " + posInstancia);
			addt(apstack() + " = " + apstack() + " + " + tamAmbito);
			
			addt("// llamar al procedimiento");
			// 5) llamar al procedimiento
			metodo = clasep + "_" + (retorno.equals(Funcion.rconstructor) ? 
					"void" : retorno) + "_" + metodo + defin;
			addt(metodo + "()");
			addt("// restablecer valor de apstack");
			// 5.1) restablecer valor de apstack
			addt(apstack() + " = " + apstack() + " - " + tamAmbito);
			
			addt("// tomar valor retorno");
			// 6) tomar valor retorno
			if(!retorno.equals(Funcion.rconstructor) && !retorno.equals(Funcion.rvoid)){
				String tret = genTemp();
				addt(tret + " = " + apstack() + " + " + (tamAmbito + 1));
				ret = new Variable(tret, Variable.esPrimitiva(retorno) ?
						stack() : heap(), retorno, !Variable.esPrimitiva(retorno), false);
			}
			
			addt("// restablecer temporales");
			// 7) restablecer temporales
			if(!tempPorGuardar.equals("")){
				for(int i = vtempPorGuardar.length - 1; i >= 0; i --){
					addt(temp + " = " + apstack() + " + " + -- tamAmbito);
					addt(vtempPorGuardar[i] + " = " + stack() + "[(int) " + temp + "]");
				}
			}
		}
		// 8) retornar valor
		return ret;
	}

	/**
	 * retorna temporal con el valor de la posición en heap de la nueva instancia
	 * Actualiza el aputador al heap
	 * @param sclase clase a instanciar
	 * @param nulo si la nueva clase está inicializada como null
	 * @param linea liea por posible error
	 * @return temporal generado o null si no existe clase
	 */
	private String tnuevaInstancia(String sclase, boolean nulo, int linea){
		int tamClase = sclase.equals(Variable.tString) ? 
				Variable.tamString : clase().tamClase(sclase);
		if(tamClase > 0){
			String temp = genTemp();
			addt(temp + " = " + apheap());
			if(!nulo)
				addt(heap() + "[(int) " + temp + "] = " + temp);
			else
				addt(heap() + "[(int) " + temp + "] = -1");
			addt(apheap() + " = " + apheap() + " + " + tamClase);
			return temp;
		}
		error("No se encuentra clase '" + sclase + "'", linea);
		return null;
	}
	
	/**
	 * retorna temporal con el valor de la posición en heap de la nueva instancia
	 * Actualiza el aputador al heap
	 * @param sclase clase a instanciar
	 * @param linea liea por posible error
	 * @return temporal generado o null si no existe clase
	 */
	private String tnuevaInstancia(String sclase, int linea){
		return tnuevaInstancia(sclase, false, linea);
	}
	
	/**
	 * Retorna un temporal con el valor de la posición en heap donde empieza 
	 * el string
	 * @param valor la cadena String
	 * @param linea la linea por posible error
	 * @return el temporal 
	 */
	private String tnuevaInstanciaString(String valor, int linea){
		String tstring = tnuevaInstancia(Variable.tString, linea);
		String temp = genTemp(false);
		int i = 0;
		for(char c : valor.toCharArray()){
			addt(temp + " = " + tstring + " + " + ++ i);
			// addt(heap() + "[(int) " + temp + "] = " + (int) c);
			addt(heap() + "[(int) " + temp + "] = " + (int)c);
		}
		addt(temp + " = " + tstring + " + " + ++ i);
		addt(heap() + "[(int) " + temp + "] = " + escape());
		return tstring;
	}

	/**
	 * Retorna Variable, el temporal tiene el valor correspondiente al resultado de la operación
	 * de tipo ++ o --
	 * Retorna null si la Variable es inválida
	 * @param antes Si el operador está antes de la variable
	 * @param op el operador, " + " o " - "
	 * @param v la Variable debe ser variable
	 * @param linea linea por posible error
	 * @return Variable cuyo temporal tiene el resultado de la operación
	 */
	private Variable cvariable(boolean antes, String op, Variable v, int linea){
		Variable ret = null;
		String temp1 = genTemp(!antes);
		String temp2 = genTemp(antes);
		if(!v.referencia){ // es un valor en 'lugar' apuntado por 'temp'
			addt(temp1 + " = " + v.lugar + "[(int) " + v.temp + "]");
			addt(temp2 + " = " + temp1 + op + 1);
			addt(v.lugar + "[(int) " + v.temp + "] = " + temp2);
			ret = new Variable(antes ? temp2 : temp1, null, v.tipo, false, false);
		} else { // es una referencia en stack apuntada por 'temp'
			if(v.lugar.equals(stack())){
				addt(temp1 + " = " + stack() + "[(int) " + v.temp + "]");
				addt(temp1 + " = " + stack() + "[(int) " + temp1 + "]");
				addt(temp2 + " = " + temp1 + op + 1);
				addt(stack() + "[(int) " + v.temp + "] = " + temp2);
				ret = new Variable(antes ? temp2 : temp1, null, v.tipo, false, false);
			} else
				error("Se esperaba variable numérica de ámbito", linea + 1);
		}
		return ret;
	}
	
	/**
	* Busca en los ámtibos actuales la variable etiquetada con 'id'
	* Si no se encuentra, devuelve null
	* @param id Etiqueta de la variable a buscar
	* @return Variable con los datos de la variable buscada o null si no se encuentra
	*/
	private Variable buscaEnAmbito(String id){
		Variable ret = null;
		Variable var = funcion().getPosicionVariable(id);
		if(var != null){
			String [] vatr = var.definición.split("-");
			String def = vatr.length > 1 ? "-" + vatr[1] : "";
			String temp = genTemp();
			addt(temp + " = " + apstack() + " + " + var.getPosición());
			ret = new Variable(temp + def, stack(), var.tipo, var.referencia, true);
		}
		return ret;
	}
	
	/**
	 * Busca el atributo de la instancia 'clasePoseedora' a partir de una instancia 
	 * 'claseDeOrigen'. Valida que se encuentre y visibilidad. Si es inválido, devuelve null
	 * @param id etiqueta del atributo 
	 * @param clasePoseedora clase que posee el atributo
	 * @param temp temporal que posee el valor de la posición del heap donde está la instancia 'clasePoseedora'
	 * @param linea linea por posible error
	 * @return Variable si se encuentra, o null si hay error
	 */
	private Variable buscaEnInstancia(String id, String clasePoseedora, String temp, int linea){
		Variable ret = null;
		Variable atr = clase().buscarEnClase(id, clasePoseedora, linea);
		if(atr != null){
			String [] vatr = atr.definición.split("-");
			String def = vatr.length > 1 ? "-" + vatr[1] : "";
			addt(temp + " = " + temp + " + " + atr.getPosición());
			ret = new Variable(temp + def, heap(), atr.tipo, !Variable.esPrimitiva(atr.tipo), true);
		}
		return ret;
	}

	/**
	 * Asigna al lugar apuntado por var.temp, en el lugar var.lugar, el valor o apuntador del lugar en
	 * val.lugar apuntado por  val.temp
	 * @param var Variable donde será asignado el nuevo valor
	 * @param val Variable que posee el valor a asignar
	 */
	private void asigna(Variable var, Variable val, String op, int linea){
		if(var.esPrimitiva()){
			if(val.temp != null && var.tipo.equals(val.tipo)){
				if(val.lugar == null){
				} else if(!val.referencia){
					addt(val.temp + " = " + val.lugar + "[(int) " + val.temp + "]");
				} else {
					addt(val.temp + " = " + stack() + "[(int) " + val.temp + "]");
					addt(val.temp + " = " + stack() + "[(int) " + val.temp + "]");
				}
				if(!var.referencia){
					if(!op.equals("")){
						String temp = genTemp();
						addt(temp + " = " + var.lugar + "[(int) " + var.temp + "]");
						addt(val.temp + " = " + temp + op + val.temp);
					}
					addt(var.lugar + "[(int) " + var.temp + "] = " + val.temp);
				} else {
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
					if(!op.equals("")){
						String temp = genTemp();
						addt(temp + " = " + stack() + "[(int) " + var.temp + "]");
						addt(val.temp + " = " + temp + op + val.temp);
					}
					addt(stack() + "[(int) " + var.temp + "] = " + val.temp);					
				}
			} else 
				error("Se esperaba valor de tipo '" + var.tipo + "'", linea);
		} else {
			if(val.temp == null){
				String tinstancia = tnuevaInstancia(var.tipo, true, linea);
				addt(var.lugar + "[(int) " + var.temp + "] = " + tinstancia);
			} else if(var.tipo.equals(val.tipo)){
				if(val.variable)
					addt(val.temp + " = " + val.lugar + "[(int) " + val.temp + "]");
				addt(var.lugar + "[(int) " + var.temp + "] = " + val.temp);
			} else
				error("Se esperaba valor de tipo '" + var.tipo + "'", linea);
		}
	}
	
	/**
	* Realiza operación aritmética y retorna Variable con el temporal que tiene ese valor 
	* val1 valor 1
	* val2 valor 2
	* op operación aritmética a realizar
	* linea linea por posible error
	*/
	private Variable aritmética(Variable val1, Variable val2, String op, int linea) {
		Variable ret = null;
		if(val1.esNumerica() && val2.esNumerica()){
			if(val1.tipo.equals(val2.tipo)){
				String temp = val1.temp;
				if(val1.lugar == null){
					temp = genTemp();
				} else if(!val1.referencia){
					addt(val1.temp + " = " + val1.lugar + "[(int) " + val1.temp + "]");
				} else {
					addt(val1.temp + " = " + stack() + "[(int) " + val1.temp + "]");
					addt(val1.temp = " = " + stack() + "[(int) " + val1.temp + "]");
				}
				if(val2.lugar == null){
				} else if(!val2.referencia){
					addt(val2.temp + " = " + val2.lugar + "[(int) " + val2.temp + "]");
				} else {
					addt(val2.temp + " = " + stack() + "[(int) " + val2.temp + "]");
					addt(val2.temp = " = " + stack() + "[(int) " + val2.temp + "]");
				}
				addt(temp + " = " + val1.temp + op + val2.temp);
				ret = new Variable(temp, null, val1.tipo, false, false);
			} else
				error("Se debe realizar casteo", linea);
		} else 
			error("Variable no numérica, no se puede operar", linea);
		return ret;
	}
	
	/**
	* Realiza protocolo de retorno de variable. Por valor o referencia
	* var variable que tiene el temporal de valor o el temporal que apunta a lugar del valor 
	* linea por posible error
	*/
	private void retorna(Variable var, int linea){
		if((!Variable.esPrimitiva(funcion().getRetorno()) && var.tipo == null) ||
				funcion().getRetorno().equals(var.tipo)){
			String ltemp = genTemp(false);
			addt(ltemp + " = " + apstack() + " + 1");
			if(var.temp != null && var.esPrimitiva()){
				if(var.lugar == null){
				} else if(!var.referencia){
					addt(var.temp + " = " + var.lugar + "[(int) " + var.temp + "]");
				} else {
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
				}
				addt(stack() + "[(int) " + ltemp + "] = " + var.temp);
			} else {
				if(var.temp != null){
					addt(var.temp + " = " + var.lugar + "[(int) " + var.temp + "]");
					addt(stack() + "[(int) " + ltemp + "] = " + var.temp);					
				} else {
					String tinstancia = tnuevaInstancia(funcion().getRetorno(), true, linea);
					addt(stack() + "[(int) " + ltemp + "] = " + tinstancia);
				}
			}
		} else 
			error("La función debe retornar tipo '" + funcion().getRetorno() + "'", linea);
	}

	/**
	 * Genera una Variable con el resultado de la comparación booleana 
	 * de las variables.
	 * Realiza validaciones
	 * @param v1 primer valor 
	 * @param v2 segundo valor 
	 * @param op operador lógico
	 * @param linea linea por posible error
	 * @return Variable en forma de booleana resultado de aplicar la operación lógica
	 */
	private Variable lógica(Variable v1, Variable v2, String op, int linea) {
		Variable ret = null;
		if(v1.tipo.equals(v2.tipo) && v1.tipo.equals(Variable.tboolean)){
			if(op.equals(Variable.or)){
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else{
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				addt(temp + " = 1");
				String ev = genEtiq();
				addtif(v1.temp, "1", ev);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				addtif(v2.temp, "1", ev);
				addt(temp + " = 0");
				
				add(ev + ":\n");
				return new Variable(temp, null, Variable.tboolean, false, false);
			} else if(op.equals(Variable.and)){
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else {
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				addt(temp + " = 0");
				String ev = genEtiq();
				addt("if (" + v1.temp + " == 0) goto " + ev);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				addt("if (" + v2.temp + " == 0) goto " + ev);
				addt(temp + " = 1");
				
				add(ev + ":\n");
				return new Variable(temp, null, Variable.tboolean, false, false);
			} else {
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else {
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				String et1 = genEtiq();
				String et2 = genEtiq();
				String ev = genEtiq();
				String ef = genEtiq();
				String es = genEtiq();
				addt("if (" + v1.temp + " == 1) goto " + et1);
				addt("goto " + et2);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				add(et1 + ":\n");
				addt("if (" + v2.temp + " == 1) goto " + ef);
				addt("goto " + ev);
				add(et2 + ":\n");
				addt("if (" + v2.temp + " == 1) goto " + ev);
				addt("goto " + ef);

				add(ev + ":\n");
				addt(temp + " = 1");
				addt("goto " + es);
				add(ef + ":\n");
				addt(temp + " = 0");
				add(es + ":\n");
				
				return new Variable(temp, null, Variable.tboolean, false, false);
			}
		} else 
			error("Los operandos deben ser booleanos", linea);
		return ret;
	}

	/**
	 * Retorna una instancia tipo Variable con el temporal de la posición en 'lugar'
	 * de posición calculada de matriz
	 * @param mat variable con 'temp' definica de la forma tn-dim1[:dimm]* 
	 * @param dims string con temporales con las dimensiones separadas por ":"
	 * @param idleft linea por posible error
	 * @return Variable o null si detecta error
	 */
	private Variable variableMatriz(Variable mat, String dims, int idleft){
		Variable ret = null;
		if(mat.temp.contains(":")){
			String [] vdims = dims.split(":");
			String mattemp = mat.temp.split("-")[0];
			String [] vmax = mat.temp.split("-")[1].split(":");
			if(vmax.length == vdims.length){
				String ttemp = genTemp(false);
				addt(ttemp + " = " + vdims[0]);
				String taux = genTemp(false);
				for(int i = 1; i < vdims.length; i++){
					addt(taux + " = " + ttemp + " * " + vmax[i]);
					addt(ttemp + " = " + taux + " + " + vdims[i]);
				}
				addt(mattemp + " = " + ttemp + " + " + mattemp);
				ret = new Variable(mattemp, mat.lugar, mat.tipo, false, true);
			} else 
				error("Se requieren " + vmax.length + " dimensiones", idleft + 1);
		} else 
			error("El atributo no es matriz", idleft + 1);
		return ret;
	}

	/**
	* Realiza impresión en pantalla de dato primitivo
	* @param v2 Variable a imprimir
	*/
	private void printf(Variable v2){
		if(v2.lugar == null){
		} else if(!v2.referencia){
			addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
		} else {
			addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
			addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
		}		
		
		if(v2.tipo.equals(Variable.tchar)){
			addt("printf(\"%c\", (char)((int) " + v2.temp + "))");
		} else if(v2.tipo.equals(Variable.tint)){
			addt("printf(\"%d\", (int)" + v2.temp + ")");
		} else if(v2.tipo.equals(Variable.tfloat)){
			addt("printf(\"%lf\", " + v2.temp + ")");
		} else if(v2.tipo.equals(Variable.tboolean)){
			String lf = genEtiq();
			String ls = genEtiq();
			addtif(v2.temp, "0", lf);
			addt("printf(\"%c\", (char)((int) 116))");
			addt("printf(\"%c\", (char)((int) 114))");
			addt("printf(\"%c\", (char)((int) 117))");
			addt("printf(\"%c\", (char)((int) 101))");
			addt("goto " + ls);
			add(lf + ":\n");
			addt("printf(\"%c\", (char)((int) 102))");
			addt("printf(\"%c\", (char)((int) 97))");
			addt("printf(\"%c\", (char)((int) 108))");
			addt("printf(\"%c\", (char)((int) 115))");
			addt("printf(\"%c\", (char)((int) 101))");			
			add(ls + ":\n");
		}
		addt("printf(\"%c\", (char)((int) 10))");
	}

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // default ::= 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("default",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // default ::= DEFAULT DOSPUNTOS NT$23 sents 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("default",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$23 ::= 
            {
              String RESULT =null;

		if(pasada() == 2){
			String et = genEtiq();
			RESULT = "\tgoto " + et + "\n";
			add(et + ":\n");
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$23",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // case ::= CASE NT$21 valor DOSPUNTOS NT$22 sents 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		
		if(pasada() == 2)
			funcion(funcion().ambitoSuperior());
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("case",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(v != null)
			if(v.lugar == null){
				Variable sw = cases[icases];
				if(sw.tipo.equals(v.tipo)){
					String et = genEtiq();
					RESULT = "\tif(" + sw.temp + " == " + v.temp + ") goto " + et + "\n";
					add(et + ":\n");
				} else
					error("Tipo colocado en caso no es válido", vleft + 1);
			} else 
				error("El valor debe ser constante", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$22",75, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$21 ::= 
            {
              String RESULT =null;

		if(pasada() == 2)
			funcion(funcion().agregarAmbito());
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$21",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cases ::= case 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cases",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // cases ::= cases case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) if(cs != null && c != null) RESULT = cs + c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cases",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // switchcase ::= SWITCH PAREN valor NT$19 TESIS LLA cases default NT$20 VES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switchcase",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 
		if(pasada() == 2 && c != null && d != null){
			add(pop() + ":\n");
			add(c + d);
			add(display[idisplay --] + ":\n");
			icases --;
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$20",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$19 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tboolean)
						|| v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint))){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String et = genEtiq();
					push(et);
					addt("goto " + et);
					String ls = genEtiq();
					display[++ idisplay] = ls;
					cases[++ icases] = v;
				} else
					error("Tipo inválido en SWITCH CASE");
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$19",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // _asigna ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_asigna",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // _asigna ::= asigna 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_asigna",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // __asigna ::= declasig 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("__asigna",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // __asigna ::= _asigna 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("__asigna",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // for ::= FOR PAREN NT$16 __asigna PUNTOCOMA NT$17 valor NT$18 PUNTOCOMA _asigna TESIS sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		
		if(pasada() == 2){
			String li = pop();
			addt("goto " + li);
			funcion(funcion().ambitoSuperior());
			add(display[idisplay --] + ":\n");
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if (!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else{
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					
					String ls = genEtiq();
					display[++ idisplay] = ls;
					addtif(v.temp, "0", ls);
				} else
					error("Se esperaba expresión booleana", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$18",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

		if(pasada() == 2){
			String li = genEtiq();
			push(li);
			add(li + ":\n");
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$17",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$16 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2)
			funcion(funcion().agregarAmbito());
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$16",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dowhile ::= DO NT$14 sentencias WHILE PAREN valor NT$15 TESIS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dowhile",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 2){
			if(v != null){
				if(v.temp != null & v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String li = pop();
					String ls = display[idisplay --];
					addtif(v.temp, "1", li);
					add(ls + ":\n");
				} else
					error("Se espera expresión booleana", vleft + 1);
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$15",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$14 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2){
			String li = genEtiq();
			push(li);
			add(li + ":\n");
			String ls = genEtiq();
			display[++ idisplay] = ls;
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$14",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // while ::= WHILE PAREN NT$12 valor NT$13 TESIS sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 
		if(pasada() == 2){
			String li = pop();
			addt("goto " + li);
			add(display[idisplay] + ":\n");
			idisplay --; 
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String ls = genEtiq();
					display[idisplay] = ls;
					addtif(v.temp, "0", ls);
				} else
					error("Se espera expresión booleana", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$13",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$12 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2){
			idisplay ++;
			String li = genEtiq();
			push(li);
			add(li + ":\n");
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // if ::= IF PAREN valor TESIS NT$11 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$11 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(pasada() == 2)
			if(v != null){
				if(v.temp != null && v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String lf = genEtiq();
					addtif(v.temp, "0", lf);
					RESULT = lf;
				} else
					error("Se espera expresión booleana", vleft + 1);
			}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ifelse ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(i != null)
				add(i + ":\n");
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ifelse",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ifelse ::= if ELSE NT$10 sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		
		if(pasada() == 2)
			if(i != null){
				String ls = pop();
				add(ls + ":\n");
			}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ifelse",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(pasada() == 2)
			if(i != null){
				String ls = genEtiq();
				addt("goto " + ls);
				push(ls);
				add(i + ":\n");
			}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primitivo ::= VBOOLEAN 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v.equals("true") ? "1" : "0", null, Variable.tboolean, false, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitivo",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primitivo ::= VFLOAT 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v, null, Variable.tfloat, false, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitivo",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // primitivo ::= VINT 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v, null, Variable.tint, false, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitivo",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primitivo ::= COMILLA VCHAR COMILLA 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2)
			RESULT = new Variable(String.valueOf((int) v.charAt(0)), null, Variable.tchar, false, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitivo",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primitivo ::= COMILLAS VSTRING COMILLAS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2) {
			String temp = tnuevaInstanciaString(v, vleft + 1);
			RESULT = new Variable(temp, heap(), Variable.tString, true, false);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitivo",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // exp ::= cvariable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // exp ::= variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // exp ::= NULL 
            {
              Variable RESULT =null;
		 if(pasada() == 2) RESULT = new Variable(null, null, null, false, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // exp ::= primitivo 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exp",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valor ::= error 
            {
              Variable RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // valor ::= exp 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valor ::= PAREN tipoc TESIS valor 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.esPrimitiva()){
					if(t.equals(Variable.tboolean)){
						String lf = genEtiq();
						addt(v.temp + " = 0");
						addtif(v.temp, "0", lf);
						addt(v.temp + " = 1");
						add(lf + ":\n");
						v.tipo = Variable.tboolean;
						RESULT = v;
					} else if(t.equals(Variable.tint)){
						addt(v.temp + " = (int) " + v.temp);
						v.tipo = Variable.tint;
						RESULT = v;
					} else if(t.equals(Variable.tfloat)){
						v.tipo = Variable.tfloat;
						RESULT = v;
					} else if(t.equals(Variable.tchar)){
						addt(v.temp + " = (int) " + v.temp);
						RESULT = v;
					}
				} else
					error("Se esperaba un valor de tipo primitivo", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // valor ::= PAREN valor TESIS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valor ::= NOT valor 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if (!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else{
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String temp = genTemp();
					String et = genEtiq();
					addt(temp + " = 0");
					addtif(v.temp, "1", et);
					addt(temp + " = 1");
					add(et + ":\n");
					RESULT = new Variable(temp, null, Variable.tboolean, false, false);
				} else
					error("Variable debe ser booleana", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valor ::= valor XOR valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.xor, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor ::= valor AND valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.and, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);	
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor ::= valor OR valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.or, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= valor COMPARA valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.esNumerica() && v2.esNumerica()){
					if(v1.lugar == null){
					} else if(!v1.referencia){
						addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
					} else {
						addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
						addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					}
					
					if(v2.lugar == null){
					} else if(!v2.referencia){
						addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
					} else {
						addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
						addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					}
					
					String temp = genTemp();
					String et = genEtiq();
					addt(temp + " = 1");
					com = com.equals("#") ? "==" : com;
					addt("if (" + v1.temp + " " + com + " " + v2.temp +") goto " + et);
					addt(temp + " = 0");
					add(et + ":\n");
					
					RESULT = new Variable(temp, null, Variable.tboolean, false, false);
				} else
					error("Los valores deben ser numéricos", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= MENOS valor 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				RESULT = aritmética(new Variable("0", null, v.tipo, false, false), 
						v, " - ", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= valor MOD valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " % ", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= valor DIV valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " / ", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= valor MUL valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " * ", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= valor MENOS valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " - ", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= valor MAS valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " + ", v1left + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valor",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // atrs ::= valor 
            {
              ArrayList<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if(pasada() == 2) {
			RESULT = new ArrayList<Variable>();
			if(v != null)
				RESULT.add(v);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atrs",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // atrs ::= atrs COMA valor 
            {
              ArrayList<Variable> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ArrayList<Variable> l = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			RESULT = l;
			if(v != null)
				RESULT.add(v);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atrs",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // vatrs ::= 
            {
              ArrayList<Variable> RESULT =null;
		 if(pasada() == 2) RESULT = new ArrayList<Variable>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vatrs",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // vatrs ::= atrs 
            {
              ArrayList<Variable> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ArrayList<Variable> l = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 2) RESULT = l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vatrs",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cvariable ::= MINUSMINUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					RESULT = cvariable(true, " - ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cvariable",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cvariable ::= PLUSPLUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					RESULT = cvariable(true, " + ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cvariable",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cvariable ::= variable MINUSMINUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					RESULT = cvariable(false, " - ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cvariable",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cvariable ::= variable PLUSPLUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint))){
					RESULT = cvariable(false, " + ", v, vleft + 1);
				} else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cvariable",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dims ::= valor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.tipo.equals(Variable.tint)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					RESULT = v.temp;
				} else 
					error("Se espera expresión tipo INT", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dims ::= dims CHETE COR valor 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null && d != null)
				if(v.temp != null && v.tipo.equals(Variable.tint)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					RESULT = d + ":" + v.temp;
				} else 
					error("Se espera expresión tipo INT", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable ::= variable PUNTO ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2){
			if(v != null && var != null){
				RESULT = llamarFuncion(var.tipo, id, v, var.temp, idleft + 1);
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variable ::= ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = llamarFuncion(nclase(), id, v, temp, idleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // variable ::= THIS PUNTO ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = llamarFuncion(nclase(), id, v, temp, idleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable ::= variable PUNTO ID 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			if(v != null){
				addt(v.temp + " = " + heap() + "[(int) " + v.temp + "]");
				RESULT = buscaEnInstancia(id, v.tipo, v.temp, idleft + 1);
				if(RESULT != null && RESULT.temp.contains(":")){
					error("Acceso ilegal a la matriz '" + id + "'", idleft + 1);
					RESULT = null;
				}
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			RESULT = buscaEnAmbito(id);
			if(RESULT == null){
				String temp = genTemp();
				addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
				RESULT = buscaEnInstancia(id, nclase(), temp, idleft + 1);
			}
			if(RESULT != null && RESULT.temp.contains(":")){
				error("Acceso ilegal a la matriz '" + id + "'", idleft + 1);
				RESULT = null;
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable ::= THIS PUNTO ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = buscaEnInstancia(id, nclase(), temp, idleft + 1);
			if(RESULT != null && RESULT.temp.contains(":")){
				error("Acceso ilegal a la matriz '" + id + "'", idleft + 1);
				RESULT = null;
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variable ::= variable PUNTO ID COR dims CHETE 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String dims = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2 && dims != null && var != null){
			
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variable ::= ID COR dims CHETE 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String dims = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2 && dims != null){
			Variable mat = buscaEnAmbito(id);
			if(mat == null){
				String temp = genTemp();
				addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
				mat = buscaEnInstancia(id, nclase(), temp, idleft + 1);
				if(mat != null)
					RESULT = variableMatriz(mat, dims, idleft + 1);				
			} else
				RESULT = variableMatriz(mat, dims, idleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variable ::= THIS PUNTO ID COR dims CHETE 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String dims = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2 && dims != null){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			Variable mat = buscaEnInstancia(id, nclase(), temp, idleft + 1);
			if(mat != null)
				RESULT = variableMatriz(mat, dims, idleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable ::= NEW ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2){
			String temp = tnuevaInstancia(id, idleft + 1);
			if(temp != null){
				RESULT = new Variable(temp, heap(), id, true, false);
				llamarFuncion(id, id, v, temp, idleft + 1);
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asigna ::= cvariable 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asigna ::= variable as valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(var != null && val != null)
				if(var.variable)
					asigna(var, val, as, varleft + 1);
				else 
					error("Se esperaba variable para hacer asignación", varleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("asigna",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sent ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sent ::= PRINT PAREN valor TESIS PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null){
					if(v.esPrimitiva()){
						printf(v);
					} else if(v.tipo.equals(Variable.tString)){
						String temp = genTemp(false);
						addt(temp + " = " + v.lugar + "[(int) " + v.temp + "]");
						String li = genEtiq();
						String ls = genEtiq();
						add(li + ":\n");
						addt(temp + " = " + temp + " + 1");
						addt(v.temp + " = " + heap() + "[(int) " + temp + "]");
						addtif(v.temp, "0", ls);
						addt("printf(\"%c\", (char)((int) " + v.temp + "))");
						addt("goto " + li);
						add(ls + ":\n");
						addt("printf(\"%c\", (char)((int) 10))");
					}
				} else
					error("Se variable no null", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sent ::= for 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sent ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2)
			if(idisplay >= 0){
				addt("goto " + display[idisplay]);
			} else 
				error("Sentencia BREAK en ámbito incorrecto", vleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sent ::= switchcase 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sent ::= dowhile PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sent ::= while 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sent ::= ifelse 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sent ::= RETURN valor PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2){
			if(v != null)
				retorna(v, vleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sent ::= variable PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sent ::= asigna PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sent ::= declasig PUNTOCOMA 
            {
              Object RESULT =null;
		 RESULT = "42 >:)"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // as ::= MODIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " % "; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // as ::= MULIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " * "; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // as ::= MENOSIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " - "; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // as ::= MASIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " + "; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // as ::= ASIGNA 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declmatriz ::= tipo ID COR valorn 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v > 0){
				RESULT = new Variable(id + "-" + v, null, t, 
						false, false);
			} else
				error("Se esperaba dimensión de matriz positiva", idleft + 1);
			
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declmatriz",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declmatriz ::= declmatriz CHETE COR valorn 
            {
              Variable RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2)
			if(d != null){
				d.temp += ":" + v;
				RESULT = d;
			}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declmatriz",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decl ::= tipo ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			if(funcion().addVariable(t, id, idleft + 1)){
				RESULT = id;
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decl",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declmatrizasigna ::= declmatriz CHETE ASIGNA LLA valor 
            {
              Variable RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Variable dec = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2){
			if(dec != null){
				funcion().addVariable(dec.tipo, dec.temp, decleft + 1);
				
				if(val != null){ 
					
				}
			}
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declmatrizasigna",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declmatrizasigna ::= declmatrizasigna COMA valor 
            {
              Variable RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declmatrizasigna",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declasig ::= declmatriz CHETE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 2)
			if(d != null)
				funcion().addVariable(d.tipo, d.temp, dleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declasig ::= declmatrizasigna VES 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declasig ::= decl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declasig ::= decl ASIGNA valor 
            {
              Object RESULT =null;
		int svarleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int svarright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String svar = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2) 
			if(svar != null && val != null)
				asigna(buscaEnAmbito(svar), val, "", svarleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sents ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sents",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sents ::= sents sent 
            {
              Object RESULT =null;
		 if(pasada() == 2) resetTempPorGuardar(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sents",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencias ::= bloque 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentencias",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= sent 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 2 && s != null) 
			error("No se pueden hacer declaraciones", sleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentencias",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloque ::= LLA NT$9 sents VES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		if(pasada() == 2)
			funcion(funcion().ambitoSuperior());
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$9 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2)
			funcion(funcion().agregarAmbito());
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloquec ::= LLA NT$8 sents VES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		if(pasada() == 2){
			add(etSalidaMetodo + ":\n");
			addt("return");
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bloquec",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2)
			etSalidaMetodo = genEtiq();
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // apunt ::= 
            {
              String RESULT =null;
		 if(pasada() == 1) RESULT = " "; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("apunt",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // apunt ::= APUNTADOR 
            {
              String RESULT =null;
		 if(pasada() == 1) RESULT = "&"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("apunt",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decparam ::= tipo apunt ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if(pasada() == 1) 
			RESULT = a + t; 
		else if(pasada() == 2) {
			funcion().addVariable(t, id, idleft + 1);
			add("_" + t);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparam",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decparams ::= decparam 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = d; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparams",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decparams ::= decparams COMA decparam 
            {
              String RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ds + ":" + d; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("decparams",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _decparams ::= 
            {
              String RESULT =null;
		 
		if(pasada() == 1) 
			RESULT = ""; 
		else if (pasada() == 2)
			add("() {\n");
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_decparams",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _decparams ::= decparams 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if (pasada() == 1) 
			RESULT = d; 
		else if (pasada() == 2) 
			add("() {\n");
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_decparams",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcion ::= error 
            {
              Object RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcion ::= acceso ID PAREN NT$6 _decparams NT$7 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 1)
			clase().addFuncion(a, "%constructor%", i, p, ileft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), Funcion.rconstructor));
			add("\nvoid " + nclase() + "_void_" + i);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion ::= acceso VOID ID PAREN NT$4 _decparams NT$5 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 1)
			clase().addFuncion(a, t, i, p, ileft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), t));
			add("\nvoid " + nclase() + "_" + t + "_" + i);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= acceso tipo ID PAREN NT$2 _decparams NT$3 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 1)
			if(Variable.esPrimitiva(t))
				clase().addFuncion(a, t, i, p, ileft + 1);
			else
				error("Tipo de retorno inválido para la función", tleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), t));
			add("\nvoid " + nclase() + "_" + t + "_" + i);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoc ::= FLOAT 
            {
              Object RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tfloat; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoc ::= BOOLEAN 
            {
              Object RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tboolean; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoc ::= CHAR 
            {
              Object RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tchar; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoc ::= STRING 
            {
              Object RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tString; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoc ::= INT 
            {
              Object RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tint; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipoc",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = id; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tfloat; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tboolean; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= CHAR 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tchar; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= STRING 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tString; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= INT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tint; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valorn ::= error 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valorn ::= MENOS valorn 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = - v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valorn ::= PAREN valorn TESIS 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valorn ::= valorn MOD valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 % v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valorn ::= valorn DIV valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 / v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valorn ::= valorn MUL valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 * v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valorn ::= valorn MENOS valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 - v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valorn ::= valorn MAS valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 + v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valorn ::= VINT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = Integer.valueOf(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lmatriz ::= ID COR valorn 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if(pasada() == 1) {
			if(v > 0)
				RESULT = id + "-" + v; 
			else 
				error("Dimensión no válida. Se esperaba un valor positivo diferente de cero", vleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lmatriz",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lmatriz ::= lmatriz CHETE COR valorn 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if(pasada() == 1) {
			if(v > 0){
				if (l != null)
					RESULT = l + ":" + v; 
			} else 
				error("Dimensión no válida. Se esperaba un valor positivo diferente de cero", vleft + 1);
		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lmatriz",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // puntocoma ::= 
            {
              Object RESULT =null;
		 RESULT = "durmiendo o q ase"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("puntocoma",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // puntocoma ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("puntocoma",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atributo ::= acceso tipo lmatriz CHETE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		if(pasada() == 1 && l != null) 
			clase().agregaAtributo(a, t, l, lleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atributo",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atributo ::= acceso tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		if(pasada() == 1)
			clase().agregaAtributo(a, t, id, idleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atributo",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vatributo ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vatributo",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vatributo ::= atributo puntocoma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vatributo",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vatributo ::= atributo ASIGNA valor puntocoma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("vatributo",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentc ::= funcion 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentc ::= vatributo 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentsc ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentsc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentsc ::= sentsc sentc 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sentsc",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _extends ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_extends",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _extends ::= EXTENDS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		if(pasada() == 1)
			clase().claseExtiende(id, idleft + 1);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_extends",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // acceso ::= 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vpublic; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // acceso ::= PROTECTED 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vprotected; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // acceso ::= PRIVATE 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vprivate; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // acceso ::= PUBLIC 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vpublic; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("acceso",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ves ::= 
            {
              Object RESULT =null;
		 RESULT = "ola q ase :D"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ves",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ves ::= VES 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ves",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // defclase ::= CLASS ID NT$1 _extends LLA sentsc ves 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(v != null) error("Se esperaba '}'", vleft + 1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("defclase",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 
		if(pasada() == 1)
			clase().revisaNombre(id, idleft + 1); 
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _import ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _import ::= IMPORT ID NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

		if(pasada() == 1) 
			clase().addClase(id, idleft + 1); 
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // imports ::= _import 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= imports _import 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= error 
            {
              Object RESULT =null;
		 error(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= defclase 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= imports defclase 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= L 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


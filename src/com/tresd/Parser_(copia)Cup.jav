
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 16 23:10:22 CST 2013
//----------------------------------------------------

package com.tresd;

import java_cup.runtime.Symbol;
import java.io.File;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 16 23:10:22 CST 2013
  */
public class Parser_(copia)Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser_(copia)Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Parser_(copia)Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser_(copia)Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\065\002\000\002\005\006\000" +
    "\002\005\004\000\002\066\002\000\002\006\011\000\002" +
    "\036\003\000\002\036\002\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\002\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\021\006\000\002" +
    "\021\004\000\002\021\004\000\002\012\005\000\002\012" +
    "\006\000\002\020\003\000\002\020\002\000\002\040\005" +
    "\000\002\040\005\000\002\037\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\037" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\067\002\000\002\070" +
    "\002\000\002\013\013\000\002\071\002\000\002\072\002" +
    "\000\002\013\013\000\002\073\002\000\002\074\002\000" +
    "\002\013\012\000\002\013\003\000\002\045\003\000\002" +
    "\045\002\000\002\043\005\000\002\043\003\000\002\042" +
    "\005\000\002\044\003\000\002\044\002\000\002\075\002" +
    "\000\002\022\006\000\002\076\002\000\002\015\006\000" +
    "\002\024\003\000\002\024\003\000\002\016\004\000\002" +
    "\016\002\000\002\014\005\000\002\014\003\000\002\014" +
    "\004\000\002\014\004\000\002\062\005\000\002\062\007" +
    "\000\002\050\004\000\002\054\005\000\002\054\006\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\017\004\000\002\017" +
    "\006\000\002\017\004\000\002\017\004\000\002\077\002" +
    "\000\002\017\010\000\002\017\005\000\002\017\004\000" +
    "\002\017\003\000\002\017\004\000\002\055\007\000\002" +
    "\055\005\000\002\055\003\000\002\055\005\000\002\055" +
    "\010\000\002\055\006\000\002\055\010\000\002\055\010" +
    "\000\002\055\006\000\002\055\010\000\002\051\005\000" +
    "\002\051\003\000\002\056\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\004\000\002\064\003\000\002\064" +
    "\002\000\002\063\005\000\002\063\003\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\004\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\004\000\002\057\005\000\002\057\006\000\002\057\003" +
    "\000\002\057\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\061\005\000\002" +
    "\061\005\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\100\002\000\002\025\006\000\002\025\003" +
    "\000\002\101\002\000\002\041\010\000\002\026\007\000" +
    "\002\027\010\000\002\030\013\000\002\031\003\000\002" +
    "\031\002\000\002\032\012\000\002\033\004\000\002\033" +
    "\003\000\002\034\006\000\002\035\005\000\002\035\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\010\003\007\051\013\053\006\001\002\000" +
    "\004\002\000\001\002\000\010\003\u0103\051\013\053\006" +
    "\001\002\000\004\063\u0100\001\002\000\006\002\ufffd\010" +
    "\377\001\002\000\004\002\ufffe\001\002\000\004\002\376" +
    "\001\002\000\010\003\ufffb\051\ufffb\053\ufffb\001\002\000" +
    "\004\063\014\001\002\000\006\006\ufff7\064\ufff7\001\002" +
    "\000\006\006\uffee\064\016\001\002\000\004\063\375\001" +
    "\002\000\004\006\020\001\002\000\034\002\uffec\003\uffec" +
    "\007\uffec\037\uffec\040\uffec\054\uffec\055\uffec\056\uffec\063" +
    "\uffec\065\uffec\067\uffec\070\uffec\071\uffec\001\002\000\034" +
    "\002\ufff4\003\031\007\022\037\ufff0\040\ufff0\054\024\055" +
    "\026\056\032\063\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\001\002\000\004\002\ufff5\001\002\000\040\002\uffe3\003" +
    "\uffe3\007\uffe3\010\371\022\372\037\uffe3\040\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\001\002\000\020\037\ufff3\040\ufff3\063\ufff3\065\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\001\002\000\034\002\uffea\003" +
    "\uffea\007\uffea\037\uffea\040\uffea\054\uffea\055\uffea\056\uffea" +
    "\063\uffea\065\uffea\067\uffea\070\uffea\071\uffea\001\002\000" +
    "\020\037\ufff1\040\ufff1\063\ufff1\065\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\001\002\000\020\037\045\040\037\063\036\065" +
    "\042\067\043\070\044\071\041\001\002\000\004\002\ufff6" +
    "\001\002\000\036\002\uffc3\003\uffc3\007\uffc3\010\035\037" +
    "\uffc3\040\uffc3\054\uffc3\055\uffc3\056\uffc3\063\uffc3\065\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\001\002\000\020\037\ufff2\040" +
    "\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\001\002" +
    "\000\034\002\uffed\003\uffed\007\uffed\037\uffed\040\uffed\054" +
    "\uffed\055\uffed\056\uffed\063\uffed\065\uffed\067\uffed\070\uffed" +
    "\071\uffed\001\002\000\034\002\uffeb\003\uffeb\007\uffeb\037" +
    "\uffeb\040\uffeb\054\uffeb\055\uffeb\056\uffeb\063\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\001\002\000\034\002\uffe7\003" +
    "\uffe7\007\uffe7\037\uffe7\040\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\063\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002\000" +
    "\006\004\362\063\uffd2\001\002\000\006\063\uffd6\066\uffd6" +
    "\001\002\000\004\063\345\001\002\000\006\063\uffd3\066" +
    "\uffd3\001\002\000\004\063\046\001\002\000\006\063\uffd5" +
    "\066\uffd5\001\002\000\006\063\uffd4\066\uffd4\001\002\000" +
    "\006\063\uffd7\066\uffd7\001\002\000\004\004\047\001\002" +
    "\000\020\005\uffc9\037\uffc9\040\uffc9\063\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\001\002\000\020\005\uffc1\037\045\040\037" +
    "\063\054\067\043\070\044\071\041\001\002\000\004\005" +
    "\uffc8\001\002\000\006\005\uffc2\023\061\001\002\000\006" +
    "\005\uffbf\023\uffbf\001\002\000\006\063\uffd2\066\uffd2\001" +
    "\002\000\006\063\uffbc\066\057\001\002\000\004\063\060" +
    "\001\002\000\004\063\uffbd\001\002\000\006\005\uffbe\023" +
    "\uffbe\001\002\000\016\037\045\040\037\063\054\067\043" +
    "\070\044\071\041\001\002\000\006\005\uffc0\023\uffc0\001" +
    "\002\000\004\005\064\001\002\000\004\006\065\001\002" +
    "\000\042\003\uffbb\007\uffbb\037\uffbb\040\uffbb\041\uffbb\050" +
    "\uffbb\052\uffbb\057\uffbb\060\uffbb\063\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\074\uffbb\075\uffbb\100\uffbb\001\002\000\034\002" +
    "\uffc7\003\uffc7\007\uffc7\037\uffc7\040\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\063\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\001" +
    "\002\000\042\003\uffb4\007\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\050\uffb4\052\uffb4\057\uffb4\060\uffb4\063\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\074\uffb4\075\uffb4\100\uffb4\001\002\000\042" +
    "\003\112\007\076\037\045\040\037\041\101\050\107\052" +
    "\114\057\075\060\111\063\103\067\043\070\044\071\041" +
    "\074\110\075\077\100\104\001\002\000\004\063\342\001" +
    "\002\000\006\012\314\023\313\001\002\000\006\010\uffb2" +
    "\022\311\001\002\000\004\010\310\001\002\000\040\003" +
    "\133\004\121\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\034\002\uffba\003\uffba\007\uffba" +
    "\037\uffba\040\uffba\054\uffba\055\uffba\056\uffba\063\uffba\065" +
    "\uffba\067\uffba\070\uffba\071\uffba\001\002\000\010\052\114" +
    "\063\130\100\104\001\002\000\004\010\304\001\002\000" +
    "\004\004\277\001\002\000\006\007\275\023\274\001\002" +
    "\000\032\004\206\010\uff99\011\207\013\uff99\022\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\063\uffd2\074\uff99\075\uff99" +
    "\001\002\000\004\013\264\001\002\000\044\003\uff9d\007" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\050\uff9d\052\uff9d" +
    "\057\uff9d\060\uff9d\063\uff9d\067\uff9d\070\uff9d\071\uff9d\074" +
    "\uff9d\075\uff9d\100\uff9d\001\002\000\044\003\uff6d\007\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\253\050\uff6d\052\uff6d\057" +
    "\uff6d\060\uff6d\063\uff6d\067\uff6d\070\uff6d\071\uff6d\074\uff6d" +
    "\075\uff6d\100\uff6d\001\002\000\004\010\252\001\002\000" +
    "\010\052\114\063\130\100\104\001\002\000\004\004\244" +
    "\001\002\000\004\010\243\001\002\000\024\010\237\013" +
    "\167\022\240\025\235\026\234\027\232\030\236\074\171" +
    "\075\170\001\002\000\004\063\116\001\002\000\042\003" +
    "\uffb5\007\uffb5\037\uffb5\040\uffb5\041\uffb5\050\uffb5\052\uffb5" +
    "\057\uffb5\060\uffb5\063\uffb5\067\uffb5\070\uffb5\071\uffb5\074" +
    "\uffb5\075\uffb5\100\uffb5\001\002\000\004\004\117\001\002" +
    "\000\042\003\133\004\121\005\uff8a\014\127\016\120\034" +
    "\132\052\114\061\140\062\137\063\130\072\131\074\110" +
    "\075\077\077\136\100\104\101\122\001\002\000\040\003" +
    "\133\004\121\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\052\003\133\004\121\014\127" +
    "\016\120\034\132\037\217\040\223\052\114\061\140\062" +
    "\137\063\130\067\220\070\222\071\224\072\131\074\110" +
    "\075\077\077\136\100\104\101\122\001\002\000\040\003" +
    "\133\004\121\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\066\002\uff75\003\uff75\005\uff75" +
    "\007\uff75\010\uff75\012\uff75\015\uff75\016\uff75\017\uff75\020" +
    "\uff75\021\uff75\023\uff75\031\uff75\032\uff75\033\uff75\037\uff75" +
    "\040\uff75\054\uff75\055\uff75\056\uff75\063\uff75\065\uff75\067" +
    "\uff75\070\uff75\071\uff75\073\uff75\001\002\000\066\002\uff78" +
    "\003\uff78\005\uff78\007\uff78\010\uff78\012\uff78\015\uff78\016" +
    "\uff78\017\uff78\020\uff78\021\uff78\023\uff78\031\uff78\032\uff78" +
    "\033\uff78\037\uff78\040\uff78\054\uff78\055\uff78\056\uff78\063" +
    "\uff78\065\uff78\067\uff78\070\uff78\071\uff78\073\uff78\001\002" +
    "\000\066\002\uff7a\003\uff7a\005\uff7a\007\uff7a\010\uff7a\012" +
    "\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\023\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\037\uff7a\040\uff7a\054\uff7a\055" +
    "\uff7a\056\uff7a\063\uff7a\065\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\073\uff7a\001\002\000\030\005\uff88\015\150\016\146\017" +
    "\153\020\151\021\147\023\uff88\031\144\032\145\033\154" +
    "\073\152\001\002\000\004\036\214\001\002\000\100\002" +
    "\uff99\003\uff99\004\206\005\uff99\007\uff99\010\uff99\011\207" +
    "\012\uff99\013\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\023\uff99\031\uff99\032\uff99\033\uff99\037\uff99\040\uff99" +
    "\054\uff99\055\uff99\056\uff99\063\uff99\065\uff99\067\uff99\070" +
    "\uff99\071\uff99\073\uff99\074\uff99\075\uff99\001\002\000\066" +
    "\002\uff70\003\uff70\005\uff70\007\uff70\010\uff70\012\uff70\015" +
    "\uff70\016\uff70\017\uff70\020\uff70\021\uff70\023\uff70\031\uff70" +
    "\032\uff70\033\uff70\037\uff70\040\uff70\054\uff70\055\uff70\056" +
    "\uff70\063\uff70\065\uff70\067\uff70\070\uff70\071\uff70\073\uff70" +
    "\001\002\000\004\035\204\001\002\000\066\002\uff79\003" +
    "\uff79\005\uff79\007\uff79\010\uff79\012\uff79\015\uff79\016\uff79" +
    "\017\uff79\020\uff79\021\uff79\023\uff79\031\uff79\032\uff79\033" +
    "\uff79\037\uff79\040\uff79\054\uff79\055\uff79\056\uff79\063\uff79" +
    "\065\uff79\067\uff79\070\uff79\071\uff79\073\uff79\001\002\000" +
    "\074\002\uff76\003\uff76\005\uff76\007\uff76\010\uff76\012\uff76" +
    "\013\167\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\023" +
    "\uff76\031\uff76\032\uff76\033\uff76\037\uff76\040\uff76\054\uff76" +
    "\055\uff76\056\uff76\063\uff76\065\uff76\067\uff76\070\uff76\071" +
    "\uff76\073\uff76\074\171\075\170\001\002\000\004\005\166" +
    "\001\002\000\066\002\uff77\003\uff77\005\uff77\007\uff77\010" +
    "\uff77\012\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77" +
    "\023\uff77\031\uff77\032\uff77\033\uff77\037\uff77\040\uff77\054" +
    "\uff77\055\uff77\056\uff77\063\uff77\065\uff77\067\uff77\070\uff77" +
    "\071\uff77\073\uff77\001\002\000\066\002\uff72\003\uff72\005" +
    "\uff72\007\uff72\010\uff72\012\uff72\015\uff72\016\uff72\017\uff72" +
    "\020\uff72\021\uff72\023\uff72\031\uff72\032\uff72\033\uff72\037" +
    "\uff72\040\uff72\054\uff72\055\uff72\056\uff72\063\uff72\065\uff72" +
    "\067\uff72\070\uff72\071\uff72\073\uff72\001\002\000\066\002" +
    "\uff71\003\uff71\005\uff71\007\uff71\010\uff71\012\uff71\015\uff71" +
    "\016\uff71\017\uff71\020\uff71\021\uff71\023\uff71\031\uff71\032" +
    "\uff71\033\uff71\037\uff71\040\uff71\054\uff71\055\uff71\056\uff71" +
    "\063\uff71\065\uff71\067\uff71\070\uff71\071\uff71\073\uff71\001" +
    "\002\000\006\005\uff8b\023\142\001\002\000\040\003\133" +
    "\004\121\014\127\016\120\034\132\052\114\061\140\062" +
    "\137\063\130\072\131\074\110\075\077\077\136\100\104" +
    "\101\122\001\002\000\030\005\uff89\015\150\016\146\017" +
    "\153\020\151\021\147\023\uff89\031\144\032\145\033\154" +
    "\073\152\001\002\000\040\003\133\004\121\014\127\016" +
    "\120\034\132\052\114\061\140\062\137\063\130\072\131" +
    "\074\110\075\077\077\136\100\104\101\122\001\002\000" +
    "\040\003\133\004\121\014\127\016\120\034\132\052\114" +
    "\061\140\062\137\063\130\072\131\074\110\075\077\077" +
    "\136\100\104\101\122\001\002\000\040\003\133\004\121" +
    "\014\127\016\120\034\132\052\114\061\140\062\137\063" +
    "\130\072\131\074\110\075\077\077\136\100\104\101\122" +
    "\001\002\000\040\003\133\004\121\014\127\016\120\034" +
    "\132\052\114\061\140\062\137\063\130\072\131\074\110" +
    "\075\077\077\136\100\104\101\122\001\002\000\040\003" +
    "\133\004\121\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\040\003\133\004\121\014\127" +
    "\016\120\034\132\052\114\061\140\062\137\063\130\072" +
    "\131\074\110\075\077\077\136\100\104\101\122\001\002" +
    "\000\040\003\133\004\121\014\127\016\120\034\132\052" +
    "\114\061\140\062\137\063\130\072\131\074\110\075\077" +
    "\077\136\100\104\101\122\001\002\000\040\003\133\004" +
    "\121\014\127\016\120\034\132\052\114\061\140\062\137" +
    "\063\130\072\131\074\110\075\077\077\136\100\104\101" +
    "\122\001\002\000\040\003\133\004\121\014\127\016\120" +
    "\034\132\052\114\061\140\062\137\063\130\072\131\074" +
    "\110\075\077\077\136\100\104\101\122\001\002\000\066" +
    "\002\uff80\003\uff80\005\uff80\007\uff80\010\uff80\012\uff80\015" +
    "\150\016\146\017\153\020\151\021\147\023\uff80\031\144" +
    "\032\145\033\uff80\037\uff80\040\uff80\054\uff80\055\uff80\056" +
    "\uff80\063\uff80\065\uff80\067\uff80\070\uff80\071\uff80\073\152" +
    "\001\002\000\066\002\uff85\003\uff85\005\uff85\007\uff85\010" +
    "\uff85\012\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\023\uff85\031\uff85\032\uff85\033\uff85\037\uff85\040\uff85\054" +
    "\uff85\055\uff85\056\uff85\063\uff85\065\uff85\067\uff85\070\uff85" +
    "\071\uff85\073\uff85\001\002\000\066\002\uff81\003\uff81\005" +
    "\uff81\007\uff81\010\uff81\012\uff81\015\150\016\146\017\153" +
    "\020\151\021\147\023\uff81\031\uff81\032\uff81\033\uff81\037" +
    "\uff81\040\uff81\054\uff81\055\uff81\056\uff81\063\uff81\065\uff81" +
    "\067\uff81\070\uff81\071\uff81\073\uff81\001\002\000\066\002" +
    "\uff84\003\uff84\005\uff84\007\uff84\010\uff84\012\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\021\uff84\023\uff84\031\uff84\032" +
    "\uff84\033\uff84\037\uff84\040\uff84\054\uff84\055\uff84\056\uff84" +
    "\063\uff84\065\uff84\067\uff84\070\uff84\071\uff84\073\uff84\001" +
    "\002\000\066\002\uff87\003\uff87\005\uff87\007\uff87\010\uff87" +
    "\012\uff87\015\uff87\016\uff87\017\153\020\151\021\147\023" +
    "\uff87\031\uff87\032\uff87\033\uff87\037\uff87\040\uff87\054\uff87" +
    "\055\uff87\056\uff87\063\uff87\065\uff87\067\uff87\070\uff87\071" +
    "\uff87\073\uff87\001\002\000\066\002\uff83\003\uff83\005\uff83" +
    "\007\uff83\010\uff83\012\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\023\uff83\031\uff83\032\uff83\033\uff83\037\uff83" +
    "\040\uff83\054\uff83\055\uff83\056\uff83\063\uff83\065\uff83\067" +
    "\uff83\070\uff83\071\uff83\073\uff83\001\002\000\066\002\uff86" +
    "\003\uff86\005\uff86\007\uff86\010\uff86\012\uff86\015\uff86\016" +
    "\uff86\017\153\020\151\021\147\023\uff86\031\uff86\032\uff86" +
    "\033\uff86\037\uff86\040\uff86\054\uff86\055\uff86\056\uff86\063" +
    "\uff86\065\uff86\067\uff86\070\uff86\071\uff86\073\uff86\001\002" +
    "\000\066\002\uff7e\003\uff7e\005\uff7e\007\uff7e\010\uff7e\012" +
    "\uff7e\015\150\016\146\017\153\020\151\021\147\023\uff7e" +
    "\031\144\032\uff7e\033\uff7e\037\uff7e\040\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\063\uff7e\065\uff7e\067\uff7e\070\uff7e\071\uff7e" +
    "\073\152\001\002\000\066\002\uff7f\003\uff7f\005\uff7f\007" +
    "\uff7f\010\uff7f\012\uff7f\015\150\016\146\017\153\020\151" +
    "\021\147\023\uff7f\031\uff7f\032\uff7f\033\uff7f\037\uff7f\040" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\063\uff7f\065\uff7f\067\uff7f" +
    "\070\uff7f\071\uff7f\073\152\001\002\000\106\002\uff9b\003" +
    "\uff9b\005\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\037\uff9b\040\uff9b\054\uff9b\055\uff9b\056\uff9b\063\uff9b\065" +
    "\uff9b\067\uff9b\070\uff9b\071\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\001\002\000\004\063\172\001\002\000\066\002\uff8e\003" +
    "\uff8e\005\uff8e\007\uff8e\010\uff8e\012\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\023\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\037\uff8e\040\uff8e\054\uff8e\055\uff8e\056\uff8e\063\uff8e" +
    "\065\uff8e\067\uff8e\070\uff8e\071\uff8e\073\uff8e\001\002\000" +
    "\066\002\uff8f\003\uff8f\005\uff8f\007\uff8f\010\uff8f\012\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\023\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\037\uff8f\040\uff8f\054\uff8f\055\uff8f" +
    "\056\uff8f\063\uff8f\065\uff8f\067\uff8f\070\uff8f\071\uff8f\073" +
    "\uff8f\001\002\000\112\002\uff98\003\uff98\004\173\005\uff98" +
    "\007\uff98\010\uff98\011\174\012\uff98\013\uff98\015\uff98\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\037" +
    "\uff98\040\uff98\054\uff98\055\uff98\056\uff98\063\uff98\065\uff98" +
    "\067\uff98\070\uff98\071\uff98\073\uff98\074\uff98\075\uff98\001" +
    "\002\000\042\003\133\004\121\005\uff8a\014\127\016\120" +
    "\034\132\052\114\061\140\062\137\063\130\072\131\074" +
    "\110\075\077\077\136\100\104\101\122\001\002\000\040" +
    "\003\133\004\121\014\127\016\120\034\132\052\114\061" +
    "\140\062\137\063\130\072\131\074\110\075\077\077\136" +
    "\100\104\101\122\001\002\000\030\012\uff90\015\150\016" +
    "\146\017\153\020\151\021\147\023\uff90\031\144\032\145" +
    "\033\154\073\152\001\002\000\006\012\200\023\177\001" +
    "\002\000\040\003\133\004\121\014\127\016\120\034\132" +
    "\052\114\061\140\062\137\063\130\072\131\074\110\075" +
    "\077\077\136\100\104\101\122\001\002\000\106\002\uff92" +
    "\003\uff92\005\uff92\007\uff92\010\uff92\012\uff92\013\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\037\uff92\040\uff92\054\uff92\055\uff92\056\uff92\063\uff92" +
    "\065\uff92\067\uff92\070\uff92\071\uff92\073\uff92\074\uff92\075" +
    "\uff92\001\002\000\030\012\uff91\015\150\016\146\017\153" +
    "\020\151\021\147\023\uff91\031\144\032\145\033\154\073" +
    "\152\001\002\000\004\005\203\001\002\000\106\002\uff95" +
    "\003\uff95\005\uff95\007\uff95\010\uff95\012\uff95\013\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\037\uff95\040\uff95\054\uff95\055\uff95\056\uff95\063\uff95" +
    "\065\uff95\067\uff95\070\uff95\071\uff95\073\uff95\074\uff95\075" +
    "\uff95\001\002\000\004\034\205\001\002\000\066\002\uff73" +
    "\003\uff73\005\uff73\007\uff73\010\uff73\012\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\023\uff73\031\uff73\032\uff73" +
    "\033\uff73\037\uff73\040\uff73\054\uff73\055\uff73\056\uff73\063" +
    "\uff73\065\uff73\067\uff73\070\uff73\071\uff73\073\uff73\001\002" +
    "\000\042\003\133\004\121\005\uff8a\014\127\016\120\034" +
    "\132\052\114\061\140\062\137\063\130\072\131\074\110" +
    "\075\077\077\136\100\104\101\122\001\002\000\040\003" +
    "\133\004\121\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\006\012\211\023\177\001\002" +
    "\000\106\002\uff93\003\uff93\005\uff93\007\uff93\010\uff93\012" +
    "\uff93\013\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\037\uff93\040\uff93\054\uff93\055\uff93" +
    "\056\uff93\063\uff93\065\uff93\067\uff93\070\uff93\071\uff93\073" +
    "\uff93\074\uff93\075\uff93\001\002\000\004\005\213\001\002" +
    "\000\106\002\uff96\003\uff96\005\uff96\007\uff96\010\uff96\012" +
    "\uff96\013\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\037\uff96\040\uff96\054\uff96\055\uff96" +
    "\056\uff96\063\uff96\065\uff96\067\uff96\070\uff96\071\uff96\073" +
    "\uff96\074\uff96\075\uff96\001\002\000\004\014\215\001\002" +
    "\000\066\002\uff74\003\uff74\005\uff74\007\uff74\010\uff74\012" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\023\uff74" +
    "\031\uff74\032\uff74\033\uff74\037\uff74\040\uff74\054\uff74\055" +
    "\uff74\056\uff74\063\uff74\065\uff74\067\uff74\070\uff74\071\uff74" +
    "\073\uff74\001\002\000\066\002\uff7d\003\uff7d\005\uff7d\007" +
    "\uff7d\010\uff7d\012\uff7d\015\150\016\146\017\153\020\151" +
    "\021\147\023\uff7d\031\144\032\145\033\154\037\uff7d\040" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\063\uff7d\065\uff7d\067\uff7d" +
    "\070\uff7d\071\uff7d\073\152\001\002\000\004\005\uffd1\001" +
    "\002\000\004\005\uffcf\001\002\000\026\005\230\015\150" +
    "\016\146\017\153\020\151\021\147\031\144\032\145\033" +
    "\154\073\152\001\002\000\004\005\uffce\001\002\000\004" +
    "\005\uffd0\001\002\000\004\005\uffcd\001\002\000\004\005" +
    "\226\001\002\000\040\003\133\004\121\014\127\016\120" +
    "\034\132\052\114\061\140\062\137\063\130\072\131\074" +
    "\110\075\077\077\136\100\104\101\122\001\002\000\066" +
    "\002\uff7b\003\uff7b\005\uff7b\007\uff7b\010\uff7b\012\uff7b\015" +
    "\150\016\146\017\153\020\151\021\147\023\uff7b\031\144" +
    "\032\145\033\154\037\uff7b\040\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\063\uff7b\065\uff7b\067\uff7b\070\uff7b\071\uff7b\073\152" +
    "\001\002\000\066\002\uff7c\003\uff7c\005\uff7c\007\uff7c\010" +
    "\uff7c\012\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\023\uff7c\031\uff7c\032\uff7c\033\uff7c\037\uff7c\040\uff7c\054" +
    "\uff7c\055\uff7c\056\uff7c\063\uff7c\065\uff7c\067\uff7c\070\uff7c" +
    "\071\uff7c\073\uff7c\001\002\000\066\002\uff82\003\uff82\005" +
    "\uff82\007\uff82\010\uff82\012\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\023\uff82\031\uff82\032\uff82\033\uff82\037" +
    "\uff82\040\uff82\054\uff82\055\uff82\056\uff82\063\uff82\065\uff82" +
    "\067\uff82\070\uff82\071\uff82\073\uff82\001\002\000\040\003" +
    "\uffa7\004\uffa7\014\uffa7\016\uffa7\034\uffa7\052\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\072\uffa7\074\uffa7\075\uffa7\077\uffa7\100" +
    "\uffa7\101\uffa7\001\002\000\040\003\133\004\121\014\127" +
    "\016\120\034\132\052\114\061\140\062\137\063\130\072" +
    "\131\074\110\075\077\077\136\100\104\101\122\001\002" +
    "\000\040\003\uffa8\004\uffa8\014\uffa8\016\uffa8\034\uffa8\052" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\072\uffa8\074\uffa8\075\uffa8" +
    "\077\uffa8\100\uffa8\101\uffa8\001\002\000\040\003\uffa9\004" +
    "\uffa9\014\uffa9\016\uffa9\034\uffa9\052\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\072\uffa9\074\uffa9\075\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\001\002\000\040\003\uffa6\004\uffa6\014\uffa6\016\uffa6" +
    "\034\uffa6\052\uffa6\061\uffa6\062\uffa6\063\uffa6\072\uffa6\074" +
    "\uffa6\075\uffa6\077\uffa6\100\uffa6\101\uffa6\001\002\000\044" +
    "\003\uffa2\007\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\050" +
    "\uffa2\052\uffa2\057\uffa2\060\uffa2\063\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\074\uffa2\075\uffa2\100\uffa2\001\002\000\040\003" +
    "\uffaa\004\uffaa\014\uffaa\016\uffaa\034\uffaa\052\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\072\uffaa\074\uffaa\075\uffaa\077\uffaa\100" +
    "\uffaa\101\uffaa\001\002\000\026\010\242\015\150\016\146" +
    "\017\153\020\151\021\147\031\144\032\145\033\154\073" +
    "\152\001\002\000\044\003\uffa4\007\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\050\uffa4\052\uffa4\057\uffa4\060\uffa4\063" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\074\uffa4\075\uffa4\100\uffa4" +
    "\001\002\000\044\003\uff9c\007\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\050\uff9c\052\uff9c\057\uff9c\060\uff9c\063\uff9c" +
    "\067\uff9c\070\uff9c\071\uff9c\074\uff9c\075\uff9c\100\uff9c\001" +
    "\002\000\040\003\133\004\121\014\127\016\120\034\132" +
    "\052\114\061\140\062\137\063\130\072\131\074\110\075" +
    "\077\077\136\100\104\101\122\001\002\000\026\005\246" +
    "\015\150\016\146\017\153\020\151\021\147\031\144\032" +
    "\145\033\154\073\152\001\002\000\004\010\uffa1\001\002" +
    "\000\004\010\250\001\002\000\044\003\uffa0\007\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\050\uffa0\052\uffa0\057\uffa0" +
    "\060\uffa0\063\uffa0\067\uffa0\070\uffa0\071\uffa0\074\uffa0\075" +
    "\uffa0\100\uffa0\001\002\000\070\002\uff8d\003\uff8d\005\uff8d" +
    "\007\uff8d\010\uff8d\012\uff8d\013\167\015\uff8d\016\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\023\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\037\uff8d\040\uff8d\054\uff8d\055\uff8d\056\uff8d\063\uff8d\065" +
    "\uff8d\067\uff8d\070\uff8d\071\uff8d\073\uff8d\001\002\000\044" +
    "\003\uff9e\007\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\050" +
    "\uff9e\052\uff9e\057\uff9e\060\uff9e\063\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\074\uff9e\075\uff9e\100\uff9e\001\002\000\042\003" +
    "\uff6f\006\uff6f\037\uff6f\040\uff6f\041\uff6f\050\uff6f\052\uff6f" +
    "\057\uff6f\060\uff6f\063\uff6f\067\uff6f\070\uff6f\071\uff6f\074" +
    "\uff6f\075\uff6f\100\uff6f\001\002\000\042\003\112\006\257" +
    "\037\045\040\037\041\101\050\107\052\114\057\075\060" +
    "\111\063\103\067\043\070\044\071\041\074\110\075\077" +
    "\100\104\001\002\000\044\003\uff6e\007\uff6e\037\uff6e\040" +
    "\uff6e\041\uff6e\042\uff6e\050\uff6e\052\uff6e\057\uff6e\060\uff6e" +
    "\063\uff6e\067\uff6e\070\uff6e\071\uff6e\074\uff6e\075\uff6e\100" +
    "\uff6e\001\002\000\044\003\uffb6\007\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\050\uffb6\052\uffb6\057\uffb6\060\uffb6\063" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\074\uffb6\075\uffb6\100\uffb6" +
    "\001\002\000\042\003\uffb9\007\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\050\uffb9\052\uffb9\057\uffb9\060\uffb9\063\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\074\uffb9\075\uffb9\100\uffb9\001\002\000" +
    "\044\003\uffb7\007\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\050\uffb7\052\uffb7\057\uffb7\060\uffb7\063\uffb7\067\uffb7\070" +
    "\uffb7\071\uffb7\074\uffb7\075\uffb7\100\uffb7\001\002\000\042" +
    "\003\uffb4\007\uffb4\037\uffb4\040\uffb4\041\uffb4\050\uffb4\052" +
    "\uffb4\057\uffb4\060\uffb4\063\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\074\uffb4\075\uffb4\100\uffb4\001\002\000\042\003\112\007" +
    "\263\037\045\040\037\041\101\050\107\052\114\057\075" +
    "\060\111\063\103\067\043\070\044\071\041\074\110\075" +
    "\077\100\104\001\002\000\044\003\uffb8\007\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\050\uffb8\052\uffb8\057\uffb8\060" +
    "\uffb8\063\uffb8\067\uffb8\070\uffb8\071\uffb8\074\uffb8\075\uffb8" +
    "\100\uffb8\001\002\000\004\063\265\001\002\000\112\002" +
    "\uff9a\003\uff9a\004\266\005\uff9a\007\uff9a\010\uff9a\011\267" +
    "\012\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\037\uff9a\040\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\063\uff9a\065\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\001\002\000\042\003\133\004" +
    "\121\005\uff8a\014\127\016\120\034\132\052\114\061\140" +
    "\062\137\063\130\072\131\074\110\075\077\077\136\100" +
    "\104\101\122\001\002\000\040\003\133\004\121\014\127" +
    "\016\120\034\132\052\114\061\140\062\137\063\130\072" +
    "\131\074\110\075\077\077\136\100\104\101\122\001\002" +
    "\000\006\012\271\023\177\001\002\000\106\002\uff94\003" +
    "\uff94\005\uff94\007\uff94\010\uff94\012\uff94\013\uff94\015\uff94" +
    "\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94" +
    "\037\uff94\040\uff94\054\uff94\055\uff94\056\uff94\063\uff94\065" +
    "\uff94\067\uff94\070\uff94\071\uff94\073\uff94\074\uff94\075\uff94" +
    "\001\002\000\004\005\273\001\002\000\106\002\uff97\003" +
    "\uff97\005\uff97\007\uff97\010\uff97\012\uff97\013\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\037\uff97\040\uff97\054\uff97\055\uff97\056\uff97\063\uff97\065" +
    "\uff97\067\uff97\070\uff97\071\uff97\073\uff97\074\uff97\075\uff97" +
    "\001\002\000\040\003\133\004\121\014\127\016\120\034" +
    "\132\052\114\061\140\062\137\063\130\072\131\074\110" +
    "\075\077\077\136\100\104\101\122\001\002\000\004\010" +
    "\uffb1\001\002\000\030\007\uffaf\015\150\016\146\017\153" +
    "\020\151\021\147\023\uffaf\031\144\032\145\033\154\073" +
    "\152\001\002\000\040\003\133\004\121\014\127\016\120" +
    "\034\132\052\114\061\140\062\137\063\130\072\131\074" +
    "\110\075\077\077\136\100\104\101\122\001\002\000\026" +
    "\005\301\015\150\016\146\017\153\020\151\021\147\031" +
    "\144\032\145\033\154\073\152\001\002\000\042\003\uff6c" +
    "\006\uff6c\037\uff6c\040\uff6c\041\uff6c\050\uff6c\052\uff6c\057" +
    "\uff6c\060\uff6c\063\uff6c\067\uff6c\070\uff6c\071\uff6c\074\uff6c" +
    "\075\uff6c\100\uff6c\001\002\000\042\003\112\006\257\037" +
    "\045\040\037\041\101\050\107\052\114\057\075\060\111" +
    "\063\103\067\043\070\044\071\041\074\110\075\077\100" +
    "\104\001\002\000\044\003\uff6b\007\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\042\uff6b\050\uff6b\052\uff6b\057\uff6b\060\uff6b\063" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\074\uff6b\075\uff6b\100\uff6b" +
    "\001\002\000\044\003\uffa3\007\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\050\uffa3\052\uffa3\057\uffa3\060\uffa3\063\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\074\uffa3\075\uffa3\100\uffa3\001" +
    "\002\000\070\002\uff8c\003\uff8c\005\uff8c\007\uff8c\010\uff8c" +
    "\012\uff8c\013\167\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\023\uff8c\031\uff8c\032\uff8c\033\uff8c\037\uff8c\040\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\063\uff8c\065\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\073\uff8c\001\002\000\026\010\307\015\150" +
    "\016\146\017\153\020\151\021\147\031\144\032\145\033" +
    "\154\073\152\001\002\000\044\003\uff9f\007\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\050\uff9f\052\uff9f\057\uff9f\060" +
    "\uff9f\063\uff9f\067\uff9f\070\uff9f\071\uff9f\074\uff9f\075\uff9f" +
    "\100\uff9f\001\002\000\044\003\uffa5\007\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\050\uffa5\052\uffa5\057\uffa5\060\uffa5" +
    "\063\uffa5\067\uffa5\070\uffa5\071\uffa5\074\uffa5\075\uffa5\100" +
    "\uffa5\001\002\000\040\003\133\004\121\014\127\016\120" +
    "\034\132\052\114\061\140\062\137\063\130\072\131\074" +
    "\110\075\077\077\136\100\104\101\122\001\002\000\026" +
    "\010\uffb3\015\150\016\146\017\153\020\151\021\147\031" +
    "\144\032\145\033\154\073\152\001\002\000\012\003\321" +
    "\004\323\016\324\062\322\001\002\000\006\010\uffb0\022" +
    "\315\001\002\000\004\006\316\001\002\000\040\003\133" +
    "\004\121\014\127\016\120\034\132\052\114\061\140\062" +
    "\137\063\130\072\131\074\110\075\077\077\136\100\104" +
    "\101\122\001\002\000\030\007\uffae\015\150\016\146\017" +
    "\153\020\151\021\147\023\uffae\031\144\032\145\033\154" +
    "\073\152\001\002\000\020\012\uffac\015\327\016\331\017" +
    "\330\020\332\021\326\023\uffac\001\002\000\022\005\uffd8" +
    "\012\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\001\002\000\022\005\uffe0\012\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\001\002\000\012\003" +
    "\321\004\323\016\324\062\322\001\002\000\012\003\321" +
    "\004\323\016\324\062\322\001\002\000\022\005\uffd9\012" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\001\002\000\012\003\321\004\323\016\324\062\322\001" +
    "\002\000\012\003\321\004\323\016\324\062\322\001\002" +
    "\000\012\003\321\004\323\016\324\062\322\001\002\000" +
    "\012\003\321\004\323\016\324\062\322\001\002\000\012" +
    "\003\321\004\323\016\324\062\322\001\002\000\022\005" +
    "\uffdc\012\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\001\002\000\022\005\uffde\012\uffde\015\uffde\016" +
    "\uffde\017\330\020\332\021\326\023\uffde\001\002\000\022" +
    "\005\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\001\002\000\022\005\uffdf\012\uffdf\015\uffdf" +
    "\016\uffdf\017\330\020\332\021\326\023\uffdf\001\002\000" +
    "\022\005\uffdb\012\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\001\002\000\016\005\341\015\327\016" +
    "\331\017\330\020\332\021\326\001\002\000\022\005\uffda" +
    "\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023" +
    "\uffda\001\002\000\010\010\uffad\011\343\022\uffad\001\002" +
    "\000\012\003\321\004\323\016\324\062\322\001\002\000" +
    "\020\012\uffab\015\327\016\331\017\330\020\332\021\326" +
    "\023\uffab\001\002\000\044\002\uffe6\003\uffe6\004\352\007" +
    "\uffe6\010\uffe6\011\353\022\uffe6\037\uffe6\040\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\063\uffe6\065\uffe6\067\uffe6\070\uffe6\071" +
    "\uffe6\001\002\000\006\012\350\023\347\001\002\000\012" +
    "\003\321\004\323\016\324\062\322\001\002\000\040\002" +
    "\uffe5\003\uffe5\007\uffe5\010\uffe5\022\uffe5\037\uffe5\040\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\063\uffe5\065\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\001\002\000\020\012\uffe2\015\327\016\331" +
    "\017\330\020\332\021\326\023\uffe2\001\002\000\020\005" +
    "\uffcc\037\uffcc\040\uffcc\063\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\001\002\000\012\003\321\004\323\016\324\062\322\001" +
    "\002\000\020\012\uffe1\015\327\016\331\017\330\020\332" +
    "\021\326\023\uffe1\001\002\000\020\005\uffc1\037\045\040" +
    "\037\063\054\067\043\070\044\071\041\001\002\000\004" +
    "\005\uffcb\001\002\000\004\005\360\001\002\000\004\006" +
    "\065\001\002\000\034\002\uffca\003\uffca\007\uffca\037\uffca" +
    "\040\uffca\054\uffca\055\uffca\056\uffca\063\uffca\065\uffca\067" +
    "\uffca\070\uffca\071\uffca\001\002\000\020\005\uffc6\037\uffc6" +
    "\040\uffc6\063\uffc6\067\uffc6\070\uffc6\071\uffc6\001\002\000" +
    "\020\005\uffc1\037\045\040\037\063\054\067\043\070\044" +
    "\071\041\001\002\000\004\005\uffc5\001\002\000\004\005" +
    "\366\001\002\000\004\006\065\001\002\000\034\002\uffc4" +
    "\003\uffc4\007\uffc4\037\uffc4\040\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002" +
    "\000\034\002\uffe8\003\uffe8\007\uffe8\037\uffe8\040\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\063\uffe8\065\uffe8\067\uffe8\070\uffe8" +
    "\071\uffe8\001\002\000\034\002\uffe4\003\uffe4\007\uffe4\037" +
    "\uffe4\040\uffe4\054\uffe4\055\uffe4\056\uffe4\063\uffe4\065\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\001\002\000\040\003\133\004" +
    "\121\014\127\016\120\034\132\052\114\061\140\062\137" +
    "\063\130\072\131\074\110\075\077\077\136\100\104\101" +
    "\122\001\002\000\060\002\uffe3\003\uffe3\007\uffe3\010\371" +
    "\015\150\016\146\017\153\020\151\021\147\031\144\032" +
    "\145\033\154\037\uffe3\040\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071\uffe3\073\152\001" +
    "\002\000\034\002\uffe9\003\uffe9\007\uffe9\037\uffe9\040\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\063\uffe9\065\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\001\002\000\004\006\uffef\001\002\000\004" +
    "\002\001\001\002\000\010\003\ufff8\051\ufff8\053\ufff8\001" +
    "\002\000\004\010\ufffa\001\002\000\004\010\u0102\001\002" +
    "\000\010\003\ufff9\051\ufff9\053\ufff9\001\002\000\004\010" +
    "\377\001\002\000\004\002\uffff\001\002\000\010\003\ufffc" +
    "\051\ufffc\053\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\014\002\010\003\003\004\004\005\011\006" +
    "\007\001\001\000\002\001\001\000\006\005\u0104\006\u0103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\014\001\001\000\004\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\020\001\001" +
    "\000\016\011\032\012\022\013\024\021\033\036\027\053" +
    "\026\001\001\000\002\001\001\000\004\020\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\047\001\001\000\012\042\052\043" +
    "\051\045\050\046\054\001\001\000\004\072\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\061\046\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\065\001\001" +
    "\000\004\075\066\001\001\000\002\001\001\000\004\016" +
    "\067\001\001\000\026\014\073\017\114\025\104\041\105" +
    "\046\070\050\072\054\071\055\112\056\077\062\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\055\133\056\122\057\305\060" +
    "\124\061\123\001\001\000\002\001\001\000\004\055\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\055\133\056\122\057\125\060\124\061\123" +
    "\063\140\064\134\001\001\000\014\055\133\056\122\057" +
    "\230\060\124\061\123\001\001\000\016\052\224\055\133" +
    "\056\122\057\220\060\124\061\123\001\001\000\014\055" +
    "\133\056\122\057\215\060\124\061\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\133\056\122\057" +
    "\142\060\124\061\123\001\001\000\002\001\001\000\014" +
    "\055\133\056\122\057\164\060\124\061\123\001\001\000" +
    "\014\055\133\056\122\057\163\060\124\061\123\001\001" +
    "\000\014\055\133\056\122\057\162\060\124\061\123\001" +
    "\001\000\014\055\133\056\122\057\161\060\124\061\123" +
    "\001\001\000\014\055\133\056\122\057\160\060\124\061" +
    "\123\001\001\000\014\055\133\056\122\057\157\060\124" +
    "\061\123\001\001\000\014\055\133\056\122\057\156\060" +
    "\124\061\123\001\001\000\014\055\133\056\122\057\155" +
    "\060\124\061\123\001\001\000\014\055\133\056\122\057" +
    "\154\060\124\061\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\055\133\056\122\057\125\060\124\061\123\063\140\064" +
    "\201\001\001\000\016\051\175\055\133\056\122\057\174" +
    "\060\124\061\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\055\133\056\122\057\200\060\124\061\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\055\133\056\122\057\125\060\124\061\123\063" +
    "\140\064\211\001\001\000\016\051\207\055\133\056\122" +
    "\057\174\060\124\061\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\055\133\056\122\057\226\060\124\061\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\055\133\056\122\057\240\060\124" +
    "\061\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\055" +
    "\133\056\122\057\244\060\124\061\123\001\001\000\002" +
    "\001\001\000\004\077\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\253\001\001\000\032\014\073\015\255\017\257\024" +
    "\254\025\104\041\105\046\070\050\072\054\071\055\112" +
    "\056\077\062\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\260\001\001\000\002\001\001\000\004" +
    "\016\261\001\001\000\026\014\073\017\114\025\104\041" +
    "\105\046\070\050\072\054\071\055\112\056\077\062\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\055\133\056\122\057\125\060\124\061\123" +
    "\063\140\064\271\001\001\000\016\051\267\055\133\056" +
    "\122\057\174\060\124\061\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\055\133\056\122\057\275\060\124\061\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\055\133\056" +
    "\122\057\277\060\124\061\123\001\001\000\002\001\001" +
    "\000\004\101\301\001\001\000\032\014\073\015\255\017" +
    "\257\024\302\025\104\041\105\046\070\050\072\054\071" +
    "\055\112\056\077\062\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\133\056\122\057" +
    "\311\060\124\061\123\001\001\000\002\001\001\000\004" +
    "\037\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\055\133\056\122\057\316\060\124\061\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\337\001\001\000\004\037\324" +
    "\001\001\000\002\001\001\000\004\037\336\001\001\000" +
    "\004\037\335\001\001\000\004\037\334\001\001\000\004" +
    "\037\333\001\001\000\004\037\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\354" +
    "\001\001\000\004\037\353\001\001\000\002\001\001\000" +
    "\012\042\052\043\051\045\355\046\054\001\001\000\004" +
    "\070\356\001\001\000\002\001\001\000\004\022\360\001" +
    "\001\000\002\001\001\000\004\073\362\001\001\000\012" +
    "\042\052\043\051\045\363\046\054\001\001\000\004\074" +
    "\364\001\001\000\002\001\001\000\004\022\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\055\133\056\122\057\372\060\124\061\123\001\001" +
    "\000\004\020\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser_(copia)Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser_(copia)Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser_(copia)Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol symbolActual() { 
        return this.cur_token;
    }

	@Override
	public void syntax_error(Symbol s) { 
		clase.error("Símbolo '" + s.value + "' fuera de contexto", archivo, s.left + 1);
//		report_error("ERR Sintaxis. Archivo: " + archivo + " Linea: " + (s.left + 1) + 
//				". Texto: \"" + s.value + "\"", null);
	}

	@Override
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("La Cadena: \"" + s.value + "\" en la linea: " + 
				(s.left+1) + ", columna: " + s.right + " esta fuera de contexto!!!!!" );
	}

	public ParserCup(File file, Clase clase, int pasada) throws Exception {
		super(new LexicoLex(file, clase));
		this.archivo = file.getName();
		this.clase = clase;
		this.nclase = this.archivo.split("\\.")[0];
		this.pasada = pasada;
	}
	
	protected String archivo;	
	protected Clase clase;
	protected String nclase;
	protected int pasada;
	protected Funcion funcion;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser_(copia)Cup$actions {


	private void error(){
		parser.syntax_error(parser.symbolActual());
	}

	private void error(String error, int linea){
		clase().error(error, parser.archivo, linea);
	}
	
	private void error(String symbol){
		parser.syntax_error(new Symbol(ParserSym.error, 
				parser.symbolActual().left, 0, symbol));
	}
	
	private String [] display = new String [50];
	private String [] pila = new String [50];		// para push
	private int ipila = -1;							// y pop
	private String tempPorGuardar = "";
	private etSalidaMetodo;
	
	private void addtif(String val, String bool, String et){
		addt("if (" + val + " == " + bool + ") goto " + et);
	}
	
	private void push(String val){
		pila[++ ipila] = val;
	}
	
	private String pop(){
		return pila[ipila --];
	}
	
	private Clase clase(){ return parser.clase; }
	private String nclase(){ return parser.nclase; }
	private int pasada(){ return parser.pasada; }
	private Funcion funcion(){ return parser.funcion; }
	private void funcion(Funcion f) { parser.funcion = f; }
	private void add(String txt) { clase().add(txt); }
	private void addt(String txt) { add("\t" + txt + ";\n"); }
	private String genTemp(boolean guardar){
		String ret = Clase.genTemp();
		if(guardar)
			tempPorGuardar += tempPorGuardar.equals("") ? ret : ":" + ret;
		return ret;
	}
	private String genTemp(){ return genTemp(true); }
	private void resetTempPorGuardar(){ tempPorGuardar = ""; }
	private String genEtiq(){ return Clase.genEtiq(); }
	private void resetcTemp() { Clase.resetcTemp(); }
	private String apheap(){ return Clase.apHeap; }
	private String apstack(){ return Clase.apStack; }
	private String heap(){ return Clase.Heap; }
	private String stack(){ return Clase.Stack; }
	private String escape(){ return String.valueOf(Variable.escapeString); }

	/**
	 * Realiza el protocolo de llamada a función. Retorna null 
	 * si es un procedimiento sin retorno. Si no, genera variable  
	 * @param clase clase de la instancia a la que pertenece el método
	 * @param metodo método al que se llama
	 * @param pars lista de instancias de Variable puestos como parámetros
	 * @param posInstancia temporal que posee la posición de la instancia
	 * @param linea linea por posible error
	 * @return
	 */
	private Variable llamarFuncion(String clase, String metodo, 
			ArrayList<Variable> pars, String posInstancia, int linea){
		Variable ret = null;
		/**
		 * 1) verificar que metodo existe y que es accesible
		 * 2) guardar temps en stack
		 * 3) setear parametros por valor o referehcia
		 * 4) actualizar punteros de stack y heap
		 * 5) llamar procedimiento
		 * 6) tomar valor de retorno
		 * 7) restablecer temporales
		 * 8) retornar valor 
		 */
		String def = clase().definicionDeClaseSiPuede(clase, metodo, pars, linea);
		if (def != null) { // ya se trató el error
							// def de la forma tipoRetorno-nombre[-[&| ]t1:[&| ]t2: ... :[&| ]tn]
			String [] vdef = def.split("-");
			int ind_ = vdef[0].indexOf('_');
			String clasep = vdef[0].substring(0, ind_);
			String retorno = vdef[0].substring(ind_ + 1);
			String [] vpars = vdef.length == 3 ? vdef[2].split(":") : null;
			String temp = genTemp(false);
			int tamAmbito = funcion().getTamaño();
			String [] vtempPorGuardar = tempPorGuardar.split(":");
			
			addt("// guardar temps en stack");
			// 2) guardar temps en stack
			if(!tempPorGuardar.equals("")){
				for(int i = 0; i < vtempPorGuardar.length; i++){
					addt(temp + " = " + apstack() + " + " + tamAmbito ++);
					addt(stack() + "[(int) " + temp + "] = " + vtempPorGuardar[i]);
				}
			}
			
			addt("// setear parametros por valor o referencia");
			// 3) setear parametros por valor o referencia
			int posStack = tamAmbito;
			if(!retorno.equals(Funcion.rconstructor) && !retorno.equals(Funcion.rvoid))
				posStack ++;
			String defin = "";
			for(int i = 0; i < pars.size(); i++){
				addt(temp + " = " + apstack() + " + " + ++ posStack);
				Variable par = pars.get(i);
				defin += "_" + par.tipo;
				if(vpars[i].charAt(0) == ' ' && Variable.esPrimitiva(par.tipo)){
					if(par.lugar == null){// valores float simples 
						addt(stack() + "[(int) " + temp + "] = " + par.temp);
					} else { // su 'temp' está apuntando a 'lugar'
						if(!par.referencia){ // sólo primitivos
							addt(par.temp + " = " + par.lugar + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						} else { // solo primitivos en stack
							addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
							addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						}
					}
				} else { // espera referencia de primitivo en stack o es instancia de clase
					if(par.lugar == null){
						error("Se espera variable", linea);
					} else {
						if(Variable.esPrimitiva(par.tipo)){
							if(!par.referencia) {
								addt(stack() + "[(int) " + temp + "] = " + par.temp);
							} else {
								addt(par.temp + " = " + stack() + "[(int) " + par.temp + "]");
								addt(stack() + "[(int) " + temp + "] = " + par.temp);
							}
						} else { // es instancia de clase o String
							if(par.lugar.equals(stack()))
								add(par.temp + " = " + par.lugar + "[(int) " + par.temp + "]");
							addt(stack() + "[(int) " + temp + "] = " + par.temp);
						}
					}
				} 
			}
			
			addt("// actualizar punteros en stack y heap");
			// 4) actualizar punteros de stack y heap
			addt(temp + " = " + apstack() + " + " + tamAmbito);
			addt(stack() + "[(int) " + temp + "] = " + posInstancia);
			addt(apstack() + " = " + apstack() + " + " + tamAmbito);
			
			addt("// llamar al procedimiento");
			// 5) llamar al procedimiento
			metodo = clasep + "_" + (retorno.equals(Funcion.rconstructor) ? 
					"void" : retorno) + "_" + metodo + defin;
			addt(metodo + "()");
			addt("// restablecer valor de apstack");
			// 5.1) restablecer valor de apstack
			addt(apstack() + " = " + apstack() + " - " + tamAmbito);
			
			addt("// tomar valor retorno");
			// 6) tomar valor retorno
			if(!retorno.equals(Funcion.rconstructor) && !retorno.equals(Funcion.rvoid)){
				String tret = genTemp();
				addt(tret + " = " + apstack() + " + " + (tamAmbito + 1));
				ret = new Variable(tret, Variable.esPrimitiva(retorno) ?
						stack() : heap(), retorno, !Variable.esPrimitiva(retorno), false);
			}
			
			addt("// restablecer temporales");
			// 7) restablecer temporales
			if(!tempPorGuardar.equals("")){
				for(int i = vtempPorGuardar.length - 1; i >= 0; i --){
					addt(temp + " = " + apstack() + " + " + -- tamAmbito);
					addt(vtempPorGuardar[i] + " = " + stack() + "[(int) " + temp + "]");
				}
			}
		}
		// 8) retornar valor
		return ret;
	}

	/**
	 * retorna temporal con el valor de la posición en heap de la nueva instancia
	 * Actualiza el aputador al heap
	 * @param sclase clase a instanciar
	 * @param nulo si la nueva clase está inicializada como null
	 * @param linea liea por posible error
	 * @return temporal generado o null si no existe clase
	 */
	private String tnuevaInstancia(String sclase, boolean nulo, int linea){
		int tamClase = sclase.equals(Variable.tString) ? 
				Variable.tamString : clase().tamClase(sclase);
		if(tamClase > 0){
			String temp = genTemp();
			addt(temp + " = " + apheap());
			if(!nulo)
				addt(heap() + "[(int) " + temp + "] = " + temp);
			else
				addt(heap() + "[(int) " + temp + "] = -1");
			addt(apheap() + " = " + apheap() + " + " + tamClase);
			return temp;
		}
		error("No se encuentra clase '" + sclase + "'", linea);
		return null;
	}
	
	/**
	 * retorna temporal con el valor de la posición en heap de la nueva instancia
	 * Actualiza el aputador al heap
	 * @param sclase clase a instanciar
	 * @param linea liea por posible error
	 * @return temporal generado o null si no existe clase
	 */
	private String tnuevaInstancia(String sclase, int linea){
		return tnuevaInstancia(sclase, false, linea);
	}
	
	/**
	 * Retorna un temporal con el valor de la posición en heap donde empieza 
	 * el string
	 * @param valor la cadena String
	 * @param linea la linea por posible error
	 * @return el temporal 
	 */
	private String tnuevaInstanciaString(String valor, int linea){
		String tstring = tnuevaInstancia(Variable.tString, linea);
		String temp = genTemp(false);
		int i = 0;
		for(char c : valor.toCharArray()){
			addt(temp + " = " + tstring + " + " + ++ i);
			// addt(heap() + "[(int) " + temp + "] = " + (int) c);
			addt(heap() + "[(int) " + temp + "] = " + (int)c);
		}
		addt(temp + " = " + tstring + " + " + ++ i);
		addt(heap() + "[(int) " + temp + "] = " + escape());
		return tstring;
	}

	/**
	 * Retorna Variable, el temporal tiene el valor correspondiente al resultado de la operación
	 * de tipo ++ o --
	 * Retorna null si la Variable es inválida
	 * @param antes Si el operador está antes de la variable
	 * @param op el operador, " + " o " - "
	 * @param v la Variable debe ser variable
	 * @param linea linea por posible error
	 * @return Variable cuyo temporal tiene el resultado de la operación
	 */
	private Variable cvariable(boolean antes, String op, Variable v, int linea){
		Variable ret = null;
		String temp1 = genTemp(!antes);
		String temp2 = genTemp(antes);
		if(!v.referencia){ // es un valor en 'lugar' apuntado por 'temp'
			addt(temp1 + " = " + v.lugar + "[(int) " + v.temp + "]");
			addt(temp2 + " = " + temp1 + op + 1);
			addt(v.lugar + "[(int) " + v.temp + "] = " + temp2);
			ret = new Variable(antes ? temp2 : temp1, null, v.tipo, false, false);
		} else { // es una referencia en stack apuntada por 'temp'
			if(v.lugar.equals(stack())){
				addt(temp1 + " = " + stack() + "[(int) " + v.temp + "]");
				addt(temp1 + " = " + stack() + "[(int) " + temp1 + "]");
				addt(temp2 + " = " + temp1 + op + 1);
				addt(stack() + "[(int) " + v.temp + "] = " + temp2);
				ret = new Variable(antes ? temp2 : temp1, null, v.tipo, false, false);
			} else
				error("Se esperaba variable numérica de ámbito", linea + 1);
		}
		return ret;
	}
	
	/**
	* Busca en los ámtibos actuales la variable etiquetada con 'id'
	* Si no se encuentra, devuelve null
	* @param id Etiqueta de la variable a buscar
	* @return Variable con los datos de la variable buscada o null si no se encuentra
	*/
	private Variable buscaEnAmbito(String id){
		Variable ret = null;
		Variable var = funcion().getPosicionVariable(id);
		if(var != null){
			String temp = genTemp();
			addt(temp + " = " + apstack() + " + " + var.getPosición());
			ret = new Variable(temp, stack(), var.tipo, var.referencia, true);
		}
		return ret;
	}
	
	/**
	 * Busca el atributo de la instancia 'clasePoseedora' a partir de una instancia 
	 * 'claseDeOrigen'. Valida que se encuentre y visibilidad. Si es inválido, devuelve null
	 * @param id etiqueta del atributo 
	 * @param clasePoseedora clase que posee el atributo
	 * @param temp temporal que posee el valor de la posición del heap donde está la instancia 'clasePoseedora'
	 * @param linea linea por posible error
	 * @return Variable si se encuentra, o null si hay error
	 */
	private Variable buscaEnInstancia(String id, String clasePoseedora, String temp, int linea){
		Variable ret = null;
		Variable atr = clase().buscarEnClase(id, clasePoseedora, linea);
		if(atr != null){
			addt(temp + " = " + temp + " + " + atr.getPosición());
			// addt(temp + " = " + heap() + "[(int) " + temp + "]");
			ret = new Variable(temp, heap(), atr.tipo, !Variable.esPrimitiva(atr.tipo), true);
		}
		return ret;
	}

	/**
	 * Asigna al lugar apuntado por var.temp, en el lugar var.lugar, el valor o apuntador del lugar en
	 * val.lugar apuntado por  val.temp
	 * @param var Variable donde será asignado el nuevo valor
	 * @param val Variable que posee el valor a asignar
	 */
	private void asigna(Variable var, Variable val, String op, int linea){
		if(var.esPrimitiva()){
			if(val.temp != null && var.tipo.equals(val.tipo)){
				if(val.lugar == null){
				} else if(!val.referencia){
					addt(val.temp + " = " + val.lugar + "[(int) " + val.temp + "]");
				} else {
					addt(val.temp + " = " + stack() + "[(int) " + val.temp + "]");
					addt(val.temp + " = " + stack() + "[(int) " + val.temp + "]");
				}
				if(!var.referencia){
					if(!op.equals("")){
						String temp = genTemp();
						addt(temp + " = " + var.lugar + "[(int) " + var.temp + "]");
						addt(val.temp + " = " + temp + op + val.temp);
					}
					addt(var.lugar + "[(int) " + var.temp + "] = " + val.temp);
				} else {
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
					if(!op.equals("")){
						String temp = genTemp();
						addt(temp + " = " + stack() + "[(int) " + var.temp + "]");
						addt(val.temp + " = " + temp + op + val.temp);
					}
					addt(stack() + "[(int) " + var.temp + "] = " + val.temp);					
				}
			} else 
				error("Se esperaba valor de tipo '" + var.tipo + "'", linea);
		} else {
			if(val.temp == null){
				String tinstancia = tnuevaInstancia(var.tipo, true, linea);
				addt(var.lugar + "[(int) " + var.temp + "] = " + tinstancia);
			} else if(var.tipo.equals(val.tipo)){
				if(val.variable)
					addt(val.temp + " = " + val.lugar + "[(int) " + val.temp + "]");
				addt(var.lugar + "[(int) " + var.temp + "] = " + val.temp);
			} else
				error("Se esperaba valor de tipo '" + var.tipo + "'", linea);
		}
	}
	
	/**
	* Realiza operación aritmética y retorna Variable con el temporal que tiene ese valor 
	* val1 valor 1
	* val2 valor 2
	* op operación aritmética a realizar
	* linea linea por posible error
	*/
	private Variable aritmética(Variable val1, Variable val2, String op, int linea) {
		Variable ret = null;
		if(val1.esNumerica() && val2.esNumerica()){
			if(val1.tipo.equals(val2.tipo)){
				String temp = val1.temp;
				if(val1.lugar == null){
					temp = genTemp();
				} else if(!val1.referencia){
					addt(val1.temp + " = " + val1.lugar + "[(int) " + val1.temp + "]");
				} else {
					addt(val1.temp + " = " + stack() + "[(int) " + val1.temp + "]");
					addt(val1.temp = " = " + stack() + "[(int) " + val1.temp + "]");
				}
				if(val1.lugar == null){
				} else if(!val2.referencia){
					addt(val2.temp + " = " + val2.lugar + "[(int) " + val2.temp + "]");
				} else {
					addt(val2.temp + " = " + stack() + "[(int) " + val2.temp + "]");
					addt(val2.temp = " = " + stack() + "[(int) " + val2.temp + "]");
				}
				addt(temp + " = " + val1.temp + op + val2.temp);
				ret = new Variable(temp, null, val1.tipo, false, false);
			} else
				error("Se debe realizar casteo", linea);
		} else 
			error("Variable no numérica, no se puede operar", linea);
		return ret;
	}
	
	/**
	* Realiza protocolo de retorno de variable. Por valor o referencia
	* var variable que tiene el temporal de valor o el temporal que apunta a lugar del valor 
	* linea por posible error
	*/
	private void retorna(Variable var, int linea){
		if((!Variable.esPrimitiva(funcion().getRetorno()) && var.tipo == null) ||
				funcion().getRetorno().equals(var.tipo)){
			String ltemp = genTemp(false);
			addt(ltemp + " = " + apstack() + " + 1");
			if(var.temp != null && var.esPrimitiva()){
				if(var.lugar == null){
				} else if(!var.referencia){
					addt(var.temp + " = " + var.lugar + "[(int) " + var.temp + "]");
				} else {
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
					addt(var.temp + " = " + stack() + "[(int) " + var.temp + "]");
				}
				addt(stack() + "[(int) " + ltemp + "] = " + var.temp);
			} else {
				if(var.temp != null){
					addt(var.temp + " = " + var.lugar + "[(int) " + var.temp + "]");
					addt(stack() + "[(int) " + ltemp + "] = " + var.temp);					
				} else {
					String tinstancia = tnuevaInstancia(funcion().getRetorno(), true, linea);
					addt(stack() + "[(int) " + ltemp + "] = " + tinstancia);
				}
			}
		} else 
			error("La función debe retornar tipo '" + funcion().getRetorno() + "'", linea);
	}

	/**
	 * Genera una Variable con el resultado de la comparación booleana 
	 * de las variables.
	 * Realiza validaciones
	 * @param v1 primer valor 
	 * @param v2 segundo valor 
	 * @param op operador lógico
	 * @param linea linea por posible error
	 * @return Variable en forma de booleana resultado de aplicar la operación lógica
	 */
	private Variable lógica(Variable v1, Variable v2, String op, int linea) {
		Variable ret = null;
		if(v1.tipo.equals(v2.tipo) && v1.tipo.equals(Variable.tboolean)){
			if(op.equals(Variable.or)){
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else{
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				addt(temp + " = 1");
				String ev = genEtiq();
				addt("if (" + v1.temp + " == 1) goto " + ev);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				addt("if (" + v2.temp + " == 1) goto " + ev);
				addt(temp + " = 0");
				
				add(ev + ":\n");
				return new Variable(temp, null, Variable.tboolean, false, false);
			} else if(op.equals(Variable.and)){
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else {
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				addt(temp + " = 0");
				String ev = genEtiq();
				addt("if (" + v1.temp + " == 0) goto " + ev);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				addt("if (" + v2.temp + " == 0) goto " + ev);
				addt(temp + " = 1");
				
				add(ev + ":\n");
				return new Variable(temp, null, Variable.tboolean, false, false);
			} else {
				if(v1.lugar == null){
				} else if (!v1.referencia){
					addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
				} else {
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
				}
				
				String temp = genTemp();
				String et1 = genEtiq();
				String et2 = genEtiq();
				String ev = genEtiq();
				String ef = genEtiq();
				String es = genEtiq();
				addt("if (" + v1.temp + " == 1) goto " + et1);
				addt("goto " + et2);
				
				if(v2.lugar == null){
				} else if(!v2.referencia){
					addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
				} else {
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
				}
				
				add(et1 + ":\n");
				addt("if (" + v2.temp + " == 1) goto " + ef);
				addt("goto " + ev);
				add(et2 + ":\n");
				addt("if (" + v2.temp + " == 1) goto " + ev);
				addt("goto " + ef);

				add(ev + ":\n");
				addt(temp + " = 1");
				addt("goto " + es);
				add(ef + ":\n");
				addt(temp + " = 0");
				add(es + ":\n");
				
				return new Variable(temp, null, Variable.tboolean, false, false);
			}
		} else 
			error("Los operandos deben ser booleanos", linea);
		return ret;
	}
	
	private void printf(Variable v2){
		if(v2.lugar == null){
		} else if(!v2.referencia){
			addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
		} else {
			addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
			addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
		}		
		
		if(v2.tipo.equals(Variable.tchar)){
			addt("printf(\"%c\", (char)((int) " + v2.temp + "))");
		} else if(v2.tipo.equals(Variable.tint)){
			addt("printf(\"%d\", (int)" + v2.temp + ")");
		} else if(v2.tipo.equals(Variable.tfloat)){
			addt("printf(\"%lf\", " + v2.temp + ")");
		} else if(v2.tipo.equals(Variable.tboolean)){
			String lf = genEtiq();
			String ls = genEtiq();
			addtif(v2.temp, "0", lf);
			addt("printf(\"%c\", (char)((int) 116))");
			addt("printf(\"%c\", (char)((int) 114))");
			addt("printf(\"%c\", (char)((int) 117))");
			addt("printf(\"%c\", (char)((int) 101))");
			addt("goto " + ls);
			add(lf + ":\n");
			addt("printf(\"%c\", (char)((int) 102))");
			addt("printf(\"%c\", (char)((int) 97))");
			addt("printf(\"%c\", (char)((int) 108))");
			addt("printf(\"%c\", (char)((int) 115))");
			addt("printf(\"%c\", (char)((int) 101))");			
			add(ls + ":\n");
		}
		addt("printf(\"%c\", (char)((int) 10))");
	}


  private final Parser_(copia)Cup parser;

  /** Constructor */
  CUP$Parser_(copia)Cup$actions(Parser_(copia)Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser_(copia)Cup$do_action(
    int                        CUP$Parser_(copia)Cup$act_num,
    java_cup.runtime.lr_parser CUP$Parser_(copia)Cup$parser,
    java.util.Stack            CUP$Parser_(copia)Cup$stack,
    int                        CUP$Parser_(copia)Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser_(copia)Cup$result;

      /* select the action based on the action number */
      switch (CUP$Parser_(copia)Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // default ::= 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("default",27, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // default ::= DEFAULT DOSPUNTOS sents 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("default",27, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // case ::= CASE valor DOSPUNTOS sents 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("case",26, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cases",25, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // switchcase ::= SWITCH PAREN valor TESIS LLA cases default VES 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("switchcase",24, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // _asigna ::= 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_asigna",23, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // _asigna ::= asigna 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_asigna",23, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for ::= FOR PAREN _asigna PUNTOCOMA valor PUNTOCOMA _asigna TESIS sentencias 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("for",22, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dowhile ::= DO sentencias WHILE PAREN valor TESIS 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("dowhile",21, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // while ::= WHILE PAREN valor TESIS sentencias 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // if ::= IF PAREN valor TESIS NT$12 sentencias 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("if",31, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$12 ::= 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2)
			if(v != null){
				if(v.temp != null && v.tipo.equals(Variable.tboolean)){
					if(v.lugar == null){
					} else if(!v.referencia){
						addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
					} else {
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
					}
					String lf = genEtiq();
					addtif(v.temp, "0", lf);
					RESULT = lf;
				} else
					error("Se espera expresión booleana", vleft + 1);
			}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$12",63, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ifelse ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(i != null)
				add(i + ":\n");
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("ifelse",19, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ifelse ::= if ELSE NT$11 sentencias 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		
		if(pasada() == 2)
			if(i != null){
				String ls = pop();
				add(ls + ":\n");
			}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("ifelse",19, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2)
			if(i != null){
				String ls = genEtiq();
				addt("goto " + ls);
				push(ls);
				add(i + ":\n");
			}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$11",62, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primitivo ::= VBOOLEAN 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v.equals("true") ? "1" : "0", null, Variable.tboolean, false, false);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("primitivo",47, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primitivo ::= VFLOAT 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v, null, Variable.tfloat, false, false);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("primitivo",47, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primitivo ::= VINT 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			RESULT = new Variable(v, null, Variable.tint, false, false);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("primitivo",47, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primitivo ::= COMILLA VCHAR COMILLA 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2)
			RESULT = new Variable(String.valueOf((int) v.charAt(0)), null, Variable.tchar, false, false);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("primitivo",47, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primitivo ::= COMILLAS VSTRING COMILLAS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2) {
			String temp = tnuevaInstanciaString(v, vleft + 1);
			RESULT = new Variable(temp, heap(), Variable.tString, true, false);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("primitivo",47, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // exp ::= cvariable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("exp",46, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // exp ::= variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("exp",46, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // exp ::= NULL 
            {
              Variable RESULT =null;
		 if(pasada() == 2) RESULT = new Variable(null, null, null, false, false); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("exp",46, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // exp ::= primitivo 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("exp",46, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valor ::= error 
            {
              Variable RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valor ::= exp 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 2) RESULT = e; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // valor ::= PAREN tipoc TESIS valor 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null && v.esPrimitiva()){
					if(t.equals(Variable.tboolean)){
						String lf = genEtiq();
						addt(v.temp + " = 0");
						addtif(v.temp, "0", lf);
						addt(v.temp + " = 1");
						add(lf + ":\n");
						v.tipo = Variable.tboolean;
						RESULT = v;
					} else if(t.equals(Variable.tint)){
						addt(v.temp + " = (int) " + v.temp);
						v.tipo = Variable.tint;
						RESULT = v;
					} else if(t.equals(Variable.tfloat)){
						v.tipo = Variable.tfloat;
						RESULT = v;
					} else if(t.equals(Variable.tchar)){
						addt(v.temp + " = (int) " + v.temp);
						RESULT = v;
					}
				} else
					error("Se esperaba un valor de tipo primitivo", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valor ::= PAREN valor TESIS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		 if(pasada() == 2) RESULT = v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valor ::= NOT valor 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.temp != null){
					if(v.tipo.equals(Variable.tboolean)){
						if(v.lugar == null){
						} else if (!v.referencia){
							addt(v.temp + " = " + v.lugar + "[(int) " + v.temp + "]");
						} else{
							addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
							addt(v.temp + " = " + stack() + "[(int) " + v.temp + "]");
						}
						String temp = genTemp();
						String et = genEtiq();
						addt(temp + " = 0");
						addtif(v.temp, "1", et);
						addt(temp + " = 1");
						add(et + ":\n");
						RESULT = new Variable(temp, null, Variable.tboolean, false, false);
					} else
						error("Variable debe ser booleana", vleft + 1);
				} else
					error("No se permiten valores nulos", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valor ::= valor XOR valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.xor, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valor ::= valor AND valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.and, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);	
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // valor ::= valor OR valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.temp != null && v2.temp != null)
					RESULT = lógica(v1, v2, Variable.or, v1left + 1);
				else
					error("No se permiten valores nulos", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valor ::= valor COMPARA valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				if(v1.esNumerica() && v2.esNumerica()){
					if(v1.lugar == null){
					} else if(!v1.referencia){
						addt(v1.temp + " = " + v1.lugar + "[(int) " + v1.temp + "]");
					} else {
						addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
						addt(v1.temp + " = " + stack() + "[(int) " + v1.temp + "]");
					}
					
					if(v2.lugar == null){
					} else if(!v2.referencia){
						addt(v2.temp + " = " + v2.lugar + "[(int) " + v2.temp + "]");
					} else {
						addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
						addt(v2.temp + " = " + stack() + "[(int) " + v2.temp + "]");
					}
					
					String temp = genTemp();
					String et = genEtiq();
					addt(temp + " = 1");
					addt("if (" + v1.temp + " " + com + " " + v2.temp +") goto " + et);
					addt(temp + " = 0");
					add(et + ":\n");
					
					RESULT = new Variable(temp, null, Variable.tboolean, false, false);
				} else
					error("Los valores deben ser numéricos", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valor ::= MENOS valor 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				RESULT = aritmética(new Variable("0", null, v.tipo, false, false), 
						v, " - ", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valor ::= valor MOD valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " % ", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor ::= valor DIV valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " / ", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor ::= valor MUL valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " * ", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor ::= valor MENOS valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " - ", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= valor MAS valor 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v1 != null && v2 != null)
				RESULT = aritmética(v1, v2, " + ", v1left + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // atrs ::= valor 
            {
              ArrayList<Variable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 2) {
			RESULT = new ArrayList<Variable>();
			if(v != null)
				RESULT.add(v);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("atrs",49, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // atrs ::= atrs COMA valor 
            {
              ArrayList<Variable> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		ArrayList<Variable> l = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			RESULT = l;
			if(v != null)
				RESULT.add(v);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("atrs",49, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // vatrs ::= 
            {
              ArrayList<Variable> RESULT =null;
		 if(pasada() == 2) RESULT = new ArrayList<Variable>(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("vatrs",50, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // vatrs ::= atrs 
            {
              ArrayList<Variable> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		ArrayList<Variable> l = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 2) RESULT = l; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("vatrs",50, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cvariable ::= MINUSMINUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					cvariable(true, " - ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cvariable",44, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cvariable ::= PLUSPLUS variable 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					cvariable(true, " + ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cvariable",44, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cvariable ::= variable MINUSMINUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint)))
					cvariable(false, " - ", v, vleft + 1);
				else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cvariable",44, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cvariable ::= variable PLUSPLUS 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2)
			if(v != null)
				if(v.variable && (v.tipo.equals(Variable.tfloat) || v.tipo.equals(Variable.tint))){
					cvariable(false, " + ", v, vleft + 1);
				} else
					error("Se esperaba variable numérica", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("cvariable",44, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // dims ::= valor 
            {
              String RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("dims",39, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dims ::= dims COMA valor 
            {
              String RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("dims",39, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable ::= variable PUNTO ID COR dims CHETE 
            {
              Variable RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable ::= ID COR dims CHETE 
            {
              Variable RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variable ::= THIS PUNTO ID COR dims CHETE 
            {
              Variable RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variable ::= variable PUNTO ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2){
			if(v != null && var != null){
				RESULT = llamarFuncion(var.tipo, id, v, var.temp, idleft + 1);
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variable ::= ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = llamarFuncion(nclase(), id, v, temp, idleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable ::= THIS PUNTO ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = llamarFuncion(nclase(), id, v, temp, idleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable ::= variable PUNTO ID 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			if(v != null){
				addt(v.temp + " = " + heap() + "[(int) " + v.temp + "]");
				RESULT = buscaEnInstancia(id, v.tipo, v.temp, idleft + 1);
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			RESULT = buscaEnAmbito(id);
			if(RESULT == null){
				String temp = genTemp();
				addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
				RESULT = buscaEnInstancia(id, nclase(), temp, idleft + 1);
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= THIS PUNTO ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			String temp = genTemp();
			addt(temp + " = " + stack() + "[(int) " + apstack() + "]");
			RESULT = buscaEnInstancia(id, nclase(), temp, idleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= NEW ID PAREN vatrs TESIS 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		ArrayList<Variable> v = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2){
			String temp = tnuevaInstancia(id, idleft + 1);
			if(temp != null){
				RESULT = new Variable(temp, heap(), id, true, false);
				llamarFuncion(id, id, v, temp, idleft + 1);
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("variable",43, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sent ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sent ::= ifelse 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sent ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sent ::= RETURN valor PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2){
			if(v != null)
				retorna(v, vleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sent ::= PRINT PAREN valor TESIS NT$10 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$10 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2)
			if(v != null)
				if(v.temp != null){
					if(v.esPrimitiva()){
						printf(v);
					} else if(v.tipo.equals(Variable.tString)){
						String temp = genTemp(false);
						addt(temp + " = " + v.lugar + "[(int) " + v.temp + "]");
						String li = genEtiq();
						String ls = genEtiq();
						add(li + ":\n");
						addt(temp + " = " + temp + " + 1");
						addt(v.temp + " = " + heap() + "[(int) " + temp + "]");
						addtif(v.temp, "0", ls);
						addt("printf(\"%c\", (char)((int) " + v.temp + "))");
						addt("goto " + li);
						add(ls + ":\n");
						addt("printf(\"%c\", (char)((int) 10))");
					}
				} else
					error("Se variable no null", vleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$10",61, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sent ::= variable PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sent ::= cvariable PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sent ::= variable as valor PUNTOCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2)
			if(var != null && val != null)
				if(var.variable)
					asigna(var, val, as, varleft + 1);
				else 
					error("Se esperaba variable para hacer asignación", varleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sent ::= declasig PUNTOCOMA 
            {
              Object RESULT =null;
		 RESULT = "ola q ase"; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sent",13, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // as ::= MODIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " % "; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // as ::= MULIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " * "; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // as ::= MENOSIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " - "; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // as ::= MASIGUAL 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = " + "; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // as ::= ASIGNA 
            {
              String RESULT =null;
		 if(pasada() == 2) RESULT = ""; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("as",37, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declmatriz ::= tipo ID COR valorn 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(v > 0){
				RESULT = new Variable(id + "-" + v, null, t, 
						false, false);
			} else
				error("Se esperaba dimensión de matriz positiva", idleft + 1);
			
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declmatriz",42, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declmatriz ::= declmatriz COMA valorn 
            {
              Variable RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2)
			if(d != null){
				d.temp += ":" + v;
				RESULT = d;
			}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declmatriz",42, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decl ::= tipo ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			if(funcion().addVariable(t, id, idleft + 1)){
				RESULT = id;
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("decl",38, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declmatrizasigna ::= declmatriz CHETE ASIGNA LLA valor 
            {
              Variable RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).right;
		Variable dec = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2){
			if(dec != null){
				funcion().addVariable(dec.tipo, dec.temp, decleft + 1);
				
				if(val != null){ 
					
				}
			}
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declmatrizasigna",48, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declmatrizasigna ::= declmatrizasigna COMA valor 
            {
              Variable RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declmatrizasigna",48, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declasig ::= declmatriz CHETE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 2)
			if(d != null)
				funcion().addVariable(d.tipo, d.temp, dleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declasig ::= declmatrizasigna VES 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declasig ::= decl 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declasig ::= decl ASIGNA valor 
            {
              Object RESULT =null;
		int svarleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int svarright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String svar = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Variable val = (Variable)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 2) 
			if(svar != null && val != null)
				asigna(buscaEnAmbito(svar), val, "", svarleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("declasig",10, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sents ::= 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sents",12, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sents ::= sents sent 
            {
              Object RESULT =null;
		 if(pasada() == 2) resetTempPorGuardar(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sents",12, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencias ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentencias",18, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= sent 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 2 && s != null) 
			error("No se pueden hacer declaraciones", sleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentencias",18, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bloque ::= LLA NT$9 sents VES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		
		if(pasada() == 2)
			funcion(funcion().ambitoSuperior());
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$9 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2)
			funcion(funcion().agregarAmbito());
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$9",60, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloquec ::= LLA NT$8 sents VES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		
		add(etSalidaMetodo + ":\n");
		addt("return");
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("bloquec",16, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$8 ::= 
            {
              Object RESULT =null;

		if(pasada() == 2)
			etSalidaMetodo = genEtiq();
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$8",59, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // apunt ::= 
            {
              String RESULT =null;
		 if(pasada() == 1) RESULT = " "; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("apunt",34, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // apunt ::= APUNTADOR 
            {
              String RESULT =null;
		 if(pasada() == 1) RESULT = "&"; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("apunt",34, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decparam ::= tipo apunt ID 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 1) 
			RESULT = a + t; 
		else if(pasada() == 2) {
			funcion().addVariable(t, id, idleft + 1);
			add("_" + t);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("decparam",32, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decparams ::= decparam 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("decparams",33, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decparams ::= decparams COMA decparam 
            {
              String RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 RESULT = ds + ":" + d; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("decparams",33, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _decparams ::= 
            {
              String RESULT =null;
		 
		if(pasada() == 1) 
			RESULT = ""; 
		else if (pasada() == 2)
			add("() {\n");
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_decparams",35, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _decparams ::= decparams 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if (pasada() == 1) 
			RESULT = d; 
		else if (pasada() == 2) 
			add("() {\n");
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_decparams",35, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcion ::= error 
            {
              Object RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcion ::= acceso ID PAREN NT$6 _decparams NT$7 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;

		if(pasada() == 1)
			clase().addFuncion(a, "%constructor%", i, p, ileft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$7",58, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), Funcion.rconstructor));
			add("\nvoid " + nclase() + "_void_" + i);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion ::= acceso VOID ID PAREN NT$4 _decparams NT$5 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;

		if(pasada() == 1)
			clase().addFuncion(a, t, i, p, ileft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), t));
			add("\nvoid " + nclase() + "_" + t + "_" + i);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= acceso tipo ID PAREN NT$2 _decparams NT$3 TESIS bloquec 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		 if(pasada() == 2) { add("}\n"); resetcTemp(); } 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;

		if(pasada() == 1)
			if(Variable.esPrimitiva(t))
				clase().addFuncion(a, t, i, p, ileft + 1);
			else
				error("Tipo de retorno inválido para la función", tleft + 1);
			
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;

		if(pasada() == 2) {
			funcion(new Funcion(clase(), t));
			add("\nvoid " + nclase() + "_" + t + "_" + i);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoc ::= FLOAT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tfloat; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipoc",40, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoc ::= BOOLEAN 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tboolean; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipoc",40, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoc ::= CHAR 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tchar; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipoc",40, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoc ::= STRING 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tString; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipoc",40, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoc ::= INT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tint; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipoc",40, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = id; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tfloat; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= BOOLEAN 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tboolean; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= CHAR 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tchar; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo ::= STRING 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tString; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= INT 
            {
              String RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.tint; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valorn ::= error 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valorn ::= MENOS valorn 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = - v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valorn ::= PAREN valorn TESIS 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valorn ::= valorn MOD valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 % v2; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valorn ::= valorn DIV valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 / v2; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valorn ::= valorn MUL valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 * v2; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valorn ::= valorn MENOS valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 - v2; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valorn ::= valorn MAS valorn 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = v1 + v2; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valorn ::= VINT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(pasada() == 1 || pasada() == 2) RESULT = Integer.valueOf(i); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("valorn",29, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lmatriz ::= ID COR valorn 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 1) {
			if(v > 0)
				RESULT = id + "-" + v; 
			else 
				error("Dimensión no válida. Se esperaba un valor positivo diferente de cero", vleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("lmatriz",30, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lmatriz ::= lmatriz COMA valorn 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 1) {
			if(v > 0){
				if (l != null)
					RESULT = l + ":" + v; 
			} else 
				error("Dimensión no válida. Se esperaba un valor positivo diferente de cero", vleft + 1);
		}
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("lmatriz",30, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // puntocoma ::= 
            {
              Object RESULT =null;
		 RESULT = "durmiendo o q ase Keyly"; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("puntocoma",14, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // puntocoma ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("puntocoma",14, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atributo ::= acceso tipo lmatriz CHETE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		
		if(pasada() == 1 && l != null) 
			clase().agregaAtributo(a, t, l, lleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("atributo",8, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atributo ::= acceso tipo ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		
		if(pasada() == 1)
			clase().agregaAtributo(a, t, id, idleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("atributo",8, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vatributo ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("vatributo",15, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vatributo ::= atributo puntocoma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("vatributo",15, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vatributo ::= atributo ASIGNA valor puntocoma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(p != null) error("Se esperaba ';'", pleft + 1); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("vatributo",15, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentc ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentc",7, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentc ::= vatributo 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentc",7, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentsc ::= 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentsc",6, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentsc ::= sentsc sentc 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("sentsc",6, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _extends ::= 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_extends",5, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _extends ::= EXTENDS ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 
		if(pasada() == 1)
			clase().claseExtiende(id, idleft + 1);
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_extends",5, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // acceso ::= 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vpublic; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("acceso",41, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // acceso ::= PROTECTED 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vprotected; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("acceso",41, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // acceso ::= PRIVATE 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vprivate; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("acceso",41, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // acceso ::= PUBLIC 
            {
              Character RESULT =null;
		 if(pasada() == 1 || pasada() == 2) RESULT = Variable.vpublic; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("acceso",41, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ves ::= 
            {
              Object RESULT =null;
		 RESULT = "ola q ase Keyly :D"; 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("ves",28, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ves ::= VES 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("ves",28, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // defclase ::= CLASS ID NT$1 _extends LLA sentsc ves 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
		 if(v != null) error("Se esperaba '}'", vleft + 1); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("defclase",4, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;
 
		if(pasada() == 1)
			clase().revisaNombre(id, idleft + 1); 
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _import ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _import ::= IMPORT ID NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-2)).value;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("_import",3, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.peek()).value;

		if(pasada() == 1) 
			clase().addClase(id, idleft + 1); 
	
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // imports ::= _import 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // imports ::= imports _import 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("imports",2, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= error 
            {
              Object RESULT =null;
		 error(); 
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= defclase 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= imports defclase 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= L 
            {
              Object RESULT =null;

              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          return CUP$Parser_(copia)Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)).value;
		RESULT = start_val;
              CUP$Parser_(copia)Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.elementAt(CUP$Parser_(copia)Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_(copia)Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser_(copia)Cup$parser.done_parsing();
          return CUP$Parser_(copia)Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

